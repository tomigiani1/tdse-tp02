
tdse-tp0_04-hw_sw_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08003604  08003604  00004604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037dc  080037dc  00005070  2**0
                  CONTENTS
  4 .ARM          00000008  080037dc  080037dc  000047dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037e4  080037e4  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e4  080037e4  000047e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037e8  080037e8  000047e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080037ec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000070  0800385c  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  0800385c  000052d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000667d  00000000  00000000  00005099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001381  00000000  00000000  0000b716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  0000ca98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004a0  00000000  00000000  0000d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cbe  00000000  00000000  0000d550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a28  00000000  00000000  0002420e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fd3  00000000  00000000  0002bc36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000adc09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000269c  00000000  00000000  000adc4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000b02e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080035ec 	.word	0x080035ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080035ec 	.word	0x080035ec

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b08e      	sub	sp, #56	@ 0x38
 8000160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000162:	f001 fc41 	bl	80019e8 <initialise_monitor_handles>

	char s[50];

	char *p;

	p = s;
 8000166:	463b      	mov	r3, r7
 8000168:	637b      	str	r3, [r7, #52]	@ 0x34
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800016a:	f000 fa09 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016e:	f000 f821 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000172:	f000 f88b 	bl	800028c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000176:	f000 f85f 	bl	8000238 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Hello World!\n");
 800017a:	480a      	ldr	r0, [pc, #40]	@ (80001a4 <main+0x48>)
 800017c:	f001 fde4 	bl	8001d48 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("Enter string:\n");
 8000180:	4809      	ldr	r0, [pc, #36]	@ (80001a8 <main+0x4c>)
 8000182:	f001 fde1 	bl	8001d48 <puts>

	  scanf("%s", p);
 8000186:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000188:	4808      	ldr	r0, [pc, #32]	@ (80001ac <main+0x50>)
 800018a:	f001 fde5 	bl	8001d58 <iscanf>

	  printf("\nReceived string: ");
 800018e:	4808      	ldr	r0, [pc, #32]	@ (80001b0 <main+0x54>)
 8000190:	f001 fd6a 	bl	8001c68 <iprintf>

	  printf(p);
 8000194:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000196:	f001 fd67 	bl	8001c68 <iprintf>

	  printf("\n");
 800019a:	200a      	movs	r0, #10
 800019c:	f001 fd76 	bl	8001c8c <putchar>
	  printf("Enter string:\n");
 80001a0:	bf00      	nop
 80001a2:	e7ed      	b.n	8000180 <main+0x24>
 80001a4:	08003604 	.word	0x08003604
 80001a8:	08003614 	.word	0x08003614
 80001ac:	08003624 	.word	0x08003624
 80001b0:	08003628 	.word	0x08003628

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b090      	sub	sp, #64	@ 0x40
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	2228      	movs	r2, #40	@ 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f001 feb2 	bl	8001f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	1d3b      	adds	r3, r7, #4
 80001ca:	2200      	movs	r2, #0
 80001cc:	601a      	str	r2, [r3, #0]
 80001ce:	605a      	str	r2, [r3, #4]
 80001d0:	609a      	str	r2, [r3, #8]
 80001d2:	60da      	str	r2, [r3, #12]
 80001d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d6:	2302      	movs	r3, #2
 80001d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001da:	2301      	movs	r3, #1
 80001dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001de:	2310      	movs	r3, #16
 80001e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001e2:	2302      	movs	r3, #2
 80001e4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001e6:	2300      	movs	r3, #0
 80001e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001ea:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f0:	f107 0318 	add.w	r3, r7, #24
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 fcf1 	bl	8000bdc <HAL_RCC_OscConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000200:	f000 f8b2 	bl	8000368 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000204:	230f      	movs	r3, #15
 8000206:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000208:	2302      	movs	r3, #2
 800020a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000210:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000216:	2300      	movs	r3, #0
 8000218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	2102      	movs	r1, #2
 800021e:	4618      	mov	r0, r3
 8000220:	f000 ff5e 	bl	80010e0 <HAL_RCC_ClockConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800022a:	f000 f89d 	bl	8000368 <Error_Handler>
  }
}
 800022e:	bf00      	nop
 8000230:	3740      	adds	r7, #64	@ 0x40
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800023c:	4b11      	ldr	r3, [pc, #68]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 800023e:	4a12      	ldr	r2, [pc, #72]	@ (8000288 <MX_USART2_UART_Init+0x50>)
 8000240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000242:	4b10      	ldr	r3, [pc, #64]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 8000244:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800024a:	4b0e      	ldr	r3, [pc, #56]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000250:	4b0c      	ldr	r3, [pc, #48]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 8000252:	2200      	movs	r2, #0
 8000254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000256:	4b0b      	ldr	r3, [pc, #44]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 8000258:	2200      	movs	r2, #0
 800025a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800025c:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 800025e:	220c      	movs	r2, #12
 8000260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000262:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 8000264:	2200      	movs	r2, #0
 8000266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000268:	4b06      	ldr	r3, [pc, #24]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 800026a:	2200      	movs	r2, #0
 800026c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800026e:	4805      	ldr	r0, [pc, #20]	@ (8000284 <MX_USART2_UART_Init+0x4c>)
 8000270:	f001 f8c4 	bl	80013fc <HAL_UART_Init>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800027a:	f000 f875 	bl	8000368 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	2000008c 	.word	0x2000008c
 8000288:	40004400 	.word	0x40004400

0800028c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b088      	sub	sp, #32
 8000290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000292:	f107 0310 	add.w	r3, r7, #16
 8000296:	2200      	movs	r2, #0
 8000298:	601a      	str	r2, [r3, #0]
 800029a:	605a      	str	r2, [r3, #4]
 800029c:	609a      	str	r2, [r3, #8]
 800029e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000358 <MX_GPIO_Init+0xcc>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a2c      	ldr	r2, [pc, #176]	@ (8000358 <MX_GPIO_Init+0xcc>)
 80002a6:	f043 0310 	orr.w	r3, r3, #16
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000358 <MX_GPIO_Init+0xcc>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0310 	and.w	r3, r3, #16
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b8:	4b27      	ldr	r3, [pc, #156]	@ (8000358 <MX_GPIO_Init+0xcc>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a26      	ldr	r2, [pc, #152]	@ (8000358 <MX_GPIO_Init+0xcc>)
 80002be:	f043 0320 	orr.w	r3, r3, #32
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b24      	ldr	r3, [pc, #144]	@ (8000358 <MX_GPIO_Init+0xcc>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0320 	and.w	r3, r3, #32
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d0:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <MX_GPIO_Init+0xcc>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a20      	ldr	r2, [pc, #128]	@ (8000358 <MX_GPIO_Init+0xcc>)
 80002d6:	f043 0304 	orr.w	r3, r3, #4
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000358 <MX_GPIO_Init+0xcc>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0304 	and.w	r3, r3, #4
 80002e4:	607b      	str	r3, [r7, #4]
 80002e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <MX_GPIO_Init+0xcc>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a1a      	ldr	r2, [pc, #104]	@ (8000358 <MX_GPIO_Init+0xcc>)
 80002ee:	f043 0308 	orr.w	r3, r3, #8
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <MX_GPIO_Init+0xcc>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0308 	and.w	r3, r3, #8
 80002fc:	603b      	str	r3, [r7, #0]
 80002fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	2120      	movs	r1, #32
 8000304:	4815      	ldr	r0, [pc, #84]	@ (800035c <MX_GPIO_Init+0xd0>)
 8000306:	f000 fc2f 	bl	8000b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800030a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800030e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000310:	4b13      	ldr	r3, [pc, #76]	@ (8000360 <MX_GPIO_Init+0xd4>)
 8000312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000314:	2300      	movs	r3, #0
 8000316:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000318:	f107 0310 	add.w	r3, r7, #16
 800031c:	4619      	mov	r1, r3
 800031e:	4811      	ldr	r0, [pc, #68]	@ (8000364 <MX_GPIO_Init+0xd8>)
 8000320:	f000 fa9e 	bl	8000860 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000324:	2320      	movs	r3, #32
 8000326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000328:	2301      	movs	r3, #1
 800032a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000330:	2302      	movs	r3, #2
 8000332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000334:	f107 0310 	add.w	r3, r7, #16
 8000338:	4619      	mov	r1, r3
 800033a:	4808      	ldr	r0, [pc, #32]	@ (800035c <MX_GPIO_Init+0xd0>)
 800033c:	f000 fa90 	bl	8000860 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000340:	2200      	movs	r2, #0
 8000342:	2100      	movs	r1, #0
 8000344:	2028      	movs	r0, #40	@ 0x28
 8000346:	f000 fa54 	bl	80007f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800034a:	2028      	movs	r0, #40	@ 0x28
 800034c:	f000 fa6d 	bl	800082a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000350:	bf00      	nop
 8000352:	3720      	adds	r7, #32
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40021000 	.word	0x40021000
 800035c:	40010800 	.word	0x40010800
 8000360:	10110000 	.word	0x10110000
 8000364:	40011000 	.word	0x40011000

08000368 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800036c:	b672      	cpsid	i
}
 800036e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <Error_Handler+0x8>

08000374 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000374:	b480      	push	{r7}
 8000376:	b085      	sub	sp, #20
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800037a:	4b15      	ldr	r3, [pc, #84]	@ (80003d0 <HAL_MspInit+0x5c>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	4a14      	ldr	r2, [pc, #80]	@ (80003d0 <HAL_MspInit+0x5c>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6193      	str	r3, [r2, #24]
 8000386:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <HAL_MspInit+0x5c>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000392:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <HAL_MspInit+0x5c>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	4a0e      	ldr	r2, [pc, #56]	@ (80003d0 <HAL_MspInit+0x5c>)
 8000398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800039c:	61d3      	str	r3, [r2, #28]
 800039e:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <HAL_MspInit+0x5c>)
 80003a0:	69db      	ldr	r3, [r3, #28]
 80003a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003aa:	4b0a      	ldr	r3, [pc, #40]	@ (80003d4 <HAL_MspInit+0x60>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	4a04      	ldr	r2, [pc, #16]	@ (80003d4 <HAL_MspInit+0x60>)
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c6:	bf00      	nop
 80003c8:	3714      	adds	r7, #20
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	40021000 	.word	0x40021000
 80003d4:	40010000 	.word	0x40010000

080003d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a15      	ldr	r2, [pc, #84]	@ (8000448 <HAL_UART_MspInit+0x70>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d123      	bne.n	8000440 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003f8:	4b14      	ldr	r3, [pc, #80]	@ (800044c <HAL_UART_MspInit+0x74>)
 80003fa:	69db      	ldr	r3, [r3, #28]
 80003fc:	4a13      	ldr	r2, [pc, #76]	@ (800044c <HAL_UART_MspInit+0x74>)
 80003fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000402:	61d3      	str	r3, [r2, #28]
 8000404:	4b11      	ldr	r3, [pc, #68]	@ (800044c <HAL_UART_MspInit+0x74>)
 8000406:	69db      	ldr	r3, [r3, #28]
 8000408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800040c:	60fb      	str	r3, [r7, #12]
 800040e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000410:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <HAL_UART_MspInit+0x74>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a0d      	ldr	r2, [pc, #52]	@ (800044c <HAL_UART_MspInit+0x74>)
 8000416:	f043 0304 	orr.w	r3, r3, #4
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <HAL_UART_MspInit+0x74>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0304 	and.w	r3, r3, #4
 8000424:	60bb      	str	r3, [r7, #8]
 8000426:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000428:	230c      	movs	r3, #12
 800042a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800042c:	2302      	movs	r3, #2
 800042e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2302      	movs	r3, #2
 8000432:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000434:	f107 0310 	add.w	r3, r7, #16
 8000438:	4619      	mov	r1, r3
 800043a:	4805      	ldr	r0, [pc, #20]	@ (8000450 <HAL_UART_MspInit+0x78>)
 800043c:	f000 fa10 	bl	8000860 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000440:	bf00      	nop
 8000442:	3720      	adds	r7, #32
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40004400 	.word	0x40004400
 800044c:	40021000 	.word	0x40021000
 8000450:	40010800 	.word	0x40010800

08000454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000458:	bf00      	nop
 800045a:	e7fd      	b.n	8000458 <NMI_Handler+0x4>

0800045c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <HardFault_Handler+0x4>

08000464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <MemManage_Handler+0x4>

0800046c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <BusFault_Handler+0x4>

08000474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <UsageFault_Handler+0x4>

0800047c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a4:	f000 f8b2 	bl	800060c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}

080004ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80004b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80004b4:	f000 fb70 	bl	8000b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}

080004bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c4:	4a14      	ldr	r2, [pc, #80]	@ (8000518 <_sbrk+0x5c>)
 80004c6:	4b15      	ldr	r3, [pc, #84]	@ (800051c <_sbrk+0x60>)
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004cc:	697b      	ldr	r3, [r7, #20]
 80004ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d0:	4b13      	ldr	r3, [pc, #76]	@ (8000520 <_sbrk+0x64>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d102      	bne.n	80004de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d8:	4b11      	ldr	r3, [pc, #68]	@ (8000520 <_sbrk+0x64>)
 80004da:	4a12      	ldr	r2, [pc, #72]	@ (8000524 <_sbrk+0x68>)
 80004dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004de:	4b10      	ldr	r3, [pc, #64]	@ (8000520 <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	693a      	ldr	r2, [r7, #16]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d207      	bcs.n	80004fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004ec:	f001 fd6c 	bl	8001fc8 <__errno>
 80004f0:	4603      	mov	r3, r0
 80004f2:	220c      	movs	r2, #12
 80004f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295
 80004fa:	e009      	b.n	8000510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004fc:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <_sbrk+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000502:	4b07      	ldr	r3, [pc, #28]	@ (8000520 <_sbrk+0x64>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	4413      	add	r3, r2
 800050a:	4a05      	ldr	r2, [pc, #20]	@ (8000520 <_sbrk+0x64>)
 800050c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3718      	adds	r7, #24
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20005000 	.word	0x20005000
 800051c:	00000400 	.word	0x00000400
 8000520:	200000d4 	.word	0x200000d4
 8000524:	200002d8 	.word	0x200002d8

08000528 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr

08000534 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000534:	f7ff fff8 	bl	8000528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000538:	480b      	ldr	r0, [pc, #44]	@ (8000568 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800053a:	490c      	ldr	r1, [pc, #48]	@ (800056c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800053c:	4a0c      	ldr	r2, [pc, #48]	@ (8000570 <LoopFillZerobss+0x16>)
  movs r3, #0
 800053e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000540:	e002      	b.n	8000548 <LoopCopyDataInit>

08000542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000546:	3304      	adds	r3, #4

08000548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800054a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800054c:	d3f9      	bcc.n	8000542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800054e:	4a09      	ldr	r2, [pc, #36]	@ (8000574 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000550:	4c09      	ldr	r4, [pc, #36]	@ (8000578 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000554:	e001      	b.n	800055a <LoopFillZerobss>

08000556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000558:	3204      	adds	r2, #4

0800055a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800055a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800055c:	d3fb      	bcc.n	8000556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800055e:	f001 fd39 	bl	8001fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000562:	f7ff fdfb 	bl	800015c <main>
  bx lr
 8000566:	4770      	bx	lr
  ldr r0, =_sdata
 8000568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800056c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000570:	080037ec 	.word	0x080037ec
  ldr r2, =_sbss
 8000574:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000578:	200002d4 	.word	0x200002d4

0800057c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800057c:	e7fe      	b.n	800057c <ADC1_2_IRQHandler>
	...

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <HAL_Init+0x28>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a07      	ldr	r2, [pc, #28]	@ (80005a8 <HAL_Init+0x28>)
 800058a:	f043 0310 	orr.w	r3, r3, #16
 800058e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000590:	2003      	movs	r0, #3
 8000592:	f000 f923 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000596:	2000      	movs	r0, #0
 8000598:	f000 f808 	bl	80005ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800059c:	f7ff feea 	bl	8000374 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005a0:	2300      	movs	r3, #0
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40022000 	.word	0x40022000

080005ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <HAL_InitTick+0x54>)
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <HAL_InitTick+0x58>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	4619      	mov	r1, r3
 80005be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f93b 	bl	8000846 <HAL_SYSTICK_Config>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005d6:	2301      	movs	r3, #1
 80005d8:	e00e      	b.n	80005f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2b0f      	cmp	r3, #15
 80005de:	d80a      	bhi.n	80005f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e0:	2200      	movs	r2, #0
 80005e2:	6879      	ldr	r1, [r7, #4]
 80005e4:	f04f 30ff 	mov.w	r0, #4294967295
 80005e8:	f000 f903 	bl	80007f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005ec:	4a06      	ldr	r2, [pc, #24]	@ (8000608 <HAL_InitTick+0x5c>)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005f2:	2300      	movs	r3, #0
 80005f4:	e000      	b.n	80005f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000000 	.word	0x20000000
 8000604:	20000008 	.word	0x20000008
 8000608:	20000004 	.word	0x20000004

0800060c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <HAL_IncTick+0x1c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	461a      	mov	r2, r3
 8000616:	4b05      	ldr	r3, [pc, #20]	@ (800062c <HAL_IncTick+0x20>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4413      	add	r3, r2
 800061c:	4a03      	ldr	r2, [pc, #12]	@ (800062c <HAL_IncTick+0x20>)
 800061e:	6013      	str	r3, [r2, #0]
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	20000008 	.word	0x20000008
 800062c:	200000d8 	.word	0x200000d8

08000630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return uwTick;
 8000634:	4b02      	ldr	r3, [pc, #8]	@ (8000640 <HAL_GetTick+0x10>)
 8000636:	681b      	ldr	r3, [r3, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr
 8000640:	200000d8 	.word	0x200000d8

08000644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000644:	b480      	push	{r7}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065a:	68ba      	ldr	r2, [r7, #8]
 800065c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800066c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000676:	4a04      	ldr	r2, [pc, #16]	@ (8000688 <__NVIC_SetPriorityGrouping+0x44>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	60d3      	str	r3, [r2, #12]
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000690:	4b04      	ldr	r3, [pc, #16]	@ (80006a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000692:	68db      	ldr	r3, [r3, #12]
 8000694:	0a1b      	lsrs	r3, r3, #8
 8000696:	f003 0307 	and.w	r3, r3, #7
}
 800069a:	4618      	mov	r0, r3
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000ed00 	.word	0xe000ed00

080006a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	db0b      	blt.n	80006d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	f003 021f 	and.w	r2, r3, #31
 80006c0:	4906      	ldr	r1, [pc, #24]	@ (80006dc <__NVIC_EnableIRQ+0x34>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	095b      	lsrs	r3, r3, #5
 80006c8:	2001      	movs	r0, #1
 80006ca:	fa00 f202 	lsl.w	r2, r0, r2
 80006ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db0a      	blt.n	800070a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	490c      	ldr	r1, [pc, #48]	@ (800072c <__NVIC_SetPriority+0x4c>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000708:	e00a      	b.n	8000720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4908      	ldr	r1, [pc, #32]	@ (8000730 <__NVIC_SetPriority+0x50>)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	3b04      	subs	r3, #4
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	440b      	add	r3, r1
 800071e:	761a      	strb	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	@ 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	f04f 32ff 	mov.w	r2, #4294967295
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43da      	mvns	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	401a      	ands	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077c:	f04f 31ff 	mov.w	r1, #4294967295
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	43d9      	mvns	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	4313      	orrs	r3, r2
         );
}
 800078e:	4618      	mov	r0, r3
 8000790:	3724      	adds	r7, #36	@ 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007a8:	d301      	bcc.n	80007ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00f      	b.n	80007ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ae:	4a0a      	ldr	r2, [pc, #40]	@ (80007d8 <SysTick_Config+0x40>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b6:	210f      	movs	r1, #15
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f7ff ff90 	bl	80006e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <SysTick_Config+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	4b04      	ldr	r3, [pc, #16]	@ (80007d8 <SysTick_Config+0x40>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ff2d 	bl	8000644 <__NVIC_SetPriorityGrouping>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000804:	f7ff ff42 	bl	800068c <__NVIC_GetPriorityGrouping>
 8000808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ff90 	bl	8000734 <NVIC_EncodePriority>
 8000814:	4602      	mov	r2, r0
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff5f 	bl	80006e0 <__NVIC_SetPriority>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff35 	bl	80006a8 <__NVIC_EnableIRQ>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff ffa2 	bl	8000798 <SysTick_Config>
 8000854:	4603      	mov	r3, r0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000860:	b480      	push	{r7}
 8000862:	b08b      	sub	sp, #44	@ 0x2c
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800086e:	2300      	movs	r3, #0
 8000870:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000872:	e169      	b.n	8000b48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000874:	2201      	movs	r2, #1
 8000876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	69fa      	ldr	r2, [r7, #28]
 8000884:	4013      	ands	r3, r2
 8000886:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000888:	69ba      	ldr	r2, [r7, #24]
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	429a      	cmp	r2, r3
 800088e:	f040 8158 	bne.w	8000b42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	4a9a      	ldr	r2, [pc, #616]	@ (8000b00 <HAL_GPIO_Init+0x2a0>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d05e      	beq.n	800095a <HAL_GPIO_Init+0xfa>
 800089c:	4a98      	ldr	r2, [pc, #608]	@ (8000b00 <HAL_GPIO_Init+0x2a0>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d875      	bhi.n	800098e <HAL_GPIO_Init+0x12e>
 80008a2:	4a98      	ldr	r2, [pc, #608]	@ (8000b04 <HAL_GPIO_Init+0x2a4>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d058      	beq.n	800095a <HAL_GPIO_Init+0xfa>
 80008a8:	4a96      	ldr	r2, [pc, #600]	@ (8000b04 <HAL_GPIO_Init+0x2a4>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d86f      	bhi.n	800098e <HAL_GPIO_Init+0x12e>
 80008ae:	4a96      	ldr	r2, [pc, #600]	@ (8000b08 <HAL_GPIO_Init+0x2a8>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d052      	beq.n	800095a <HAL_GPIO_Init+0xfa>
 80008b4:	4a94      	ldr	r2, [pc, #592]	@ (8000b08 <HAL_GPIO_Init+0x2a8>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d869      	bhi.n	800098e <HAL_GPIO_Init+0x12e>
 80008ba:	4a94      	ldr	r2, [pc, #592]	@ (8000b0c <HAL_GPIO_Init+0x2ac>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d04c      	beq.n	800095a <HAL_GPIO_Init+0xfa>
 80008c0:	4a92      	ldr	r2, [pc, #584]	@ (8000b0c <HAL_GPIO_Init+0x2ac>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d863      	bhi.n	800098e <HAL_GPIO_Init+0x12e>
 80008c6:	4a92      	ldr	r2, [pc, #584]	@ (8000b10 <HAL_GPIO_Init+0x2b0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d046      	beq.n	800095a <HAL_GPIO_Init+0xfa>
 80008cc:	4a90      	ldr	r2, [pc, #576]	@ (8000b10 <HAL_GPIO_Init+0x2b0>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d85d      	bhi.n	800098e <HAL_GPIO_Init+0x12e>
 80008d2:	2b12      	cmp	r3, #18
 80008d4:	d82a      	bhi.n	800092c <HAL_GPIO_Init+0xcc>
 80008d6:	2b12      	cmp	r3, #18
 80008d8:	d859      	bhi.n	800098e <HAL_GPIO_Init+0x12e>
 80008da:	a201      	add	r2, pc, #4	@ (adr r2, 80008e0 <HAL_GPIO_Init+0x80>)
 80008dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e0:	0800095b 	.word	0x0800095b
 80008e4:	08000935 	.word	0x08000935
 80008e8:	08000947 	.word	0x08000947
 80008ec:	08000989 	.word	0x08000989
 80008f0:	0800098f 	.word	0x0800098f
 80008f4:	0800098f 	.word	0x0800098f
 80008f8:	0800098f 	.word	0x0800098f
 80008fc:	0800098f 	.word	0x0800098f
 8000900:	0800098f 	.word	0x0800098f
 8000904:	0800098f 	.word	0x0800098f
 8000908:	0800098f 	.word	0x0800098f
 800090c:	0800098f 	.word	0x0800098f
 8000910:	0800098f 	.word	0x0800098f
 8000914:	0800098f 	.word	0x0800098f
 8000918:	0800098f 	.word	0x0800098f
 800091c:	0800098f 	.word	0x0800098f
 8000920:	0800098f 	.word	0x0800098f
 8000924:	0800093d 	.word	0x0800093d
 8000928:	08000951 	.word	0x08000951
 800092c:	4a79      	ldr	r2, [pc, #484]	@ (8000b14 <HAL_GPIO_Init+0x2b4>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d013      	beq.n	800095a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000932:	e02c      	b.n	800098e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	623b      	str	r3, [r7, #32]
          break;
 800093a:	e029      	b.n	8000990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	3304      	adds	r3, #4
 8000942:	623b      	str	r3, [r7, #32]
          break;
 8000944:	e024      	b.n	8000990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	68db      	ldr	r3, [r3, #12]
 800094a:	3308      	adds	r3, #8
 800094c:	623b      	str	r3, [r7, #32]
          break;
 800094e:	e01f      	b.n	8000990 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	330c      	adds	r3, #12
 8000956:	623b      	str	r3, [r7, #32]
          break;
 8000958:	e01a      	b.n	8000990 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d102      	bne.n	8000968 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000962:	2304      	movs	r3, #4
 8000964:	623b      	str	r3, [r7, #32]
          break;
 8000966:	e013      	b.n	8000990 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d105      	bne.n	800097c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000970:	2308      	movs	r3, #8
 8000972:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	69fa      	ldr	r2, [r7, #28]
 8000978:	611a      	str	r2, [r3, #16]
          break;
 800097a:	e009      	b.n	8000990 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800097c:	2308      	movs	r3, #8
 800097e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	69fa      	ldr	r2, [r7, #28]
 8000984:	615a      	str	r2, [r3, #20]
          break;
 8000986:	e003      	b.n	8000990 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
          break;
 800098c:	e000      	b.n	8000990 <HAL_GPIO_Init+0x130>
          break;
 800098e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	2bff      	cmp	r3, #255	@ 0xff
 8000994:	d801      	bhi.n	800099a <HAL_GPIO_Init+0x13a>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	e001      	b.n	800099e <HAL_GPIO_Init+0x13e>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	3304      	adds	r3, #4
 800099e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	2bff      	cmp	r3, #255	@ 0xff
 80009a4:	d802      	bhi.n	80009ac <HAL_GPIO_Init+0x14c>
 80009a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	e002      	b.n	80009b2 <HAL_GPIO_Init+0x152>
 80009ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ae:	3b08      	subs	r3, #8
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	210f      	movs	r1, #15
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	fa01 f303 	lsl.w	r3, r1, r3
 80009c0:	43db      	mvns	r3, r3
 80009c2:	401a      	ands	r2, r3
 80009c4:	6a39      	ldr	r1, [r7, #32]
 80009c6:	693b      	ldr	r3, [r7, #16]
 80009c8:	fa01 f303 	lsl.w	r3, r1, r3
 80009cc:	431a      	orrs	r2, r3
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	685b      	ldr	r3, [r3, #4]
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009da:	2b00      	cmp	r3, #0
 80009dc:	f000 80b1 	beq.w	8000b42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000b18 <HAL_GPIO_Init+0x2b8>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a4c      	ldr	r2, [pc, #304]	@ (8000b18 <HAL_GPIO_Init+0x2b8>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	6193      	str	r3, [r2, #24]
 80009ec:	4b4a      	ldr	r3, [pc, #296]	@ (8000b18 <HAL_GPIO_Init+0x2b8>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	f003 0301 	and.w	r3, r3, #1
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f8:	4a48      	ldr	r2, [pc, #288]	@ (8000b1c <HAL_GPIO_Init+0x2bc>)
 80009fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009fc:	089b      	lsrs	r3, r3, #2
 80009fe:	3302      	adds	r3, #2
 8000a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a08:	f003 0303 	and.w	r3, r3, #3
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	220f      	movs	r2, #15
 8000a10:	fa02 f303 	lsl.w	r3, r2, r3
 8000a14:	43db      	mvns	r3, r3
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	4013      	ands	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a40      	ldr	r2, [pc, #256]	@ (8000b20 <HAL_GPIO_Init+0x2c0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d013      	beq.n	8000a4c <HAL_GPIO_Init+0x1ec>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a3f      	ldr	r2, [pc, #252]	@ (8000b24 <HAL_GPIO_Init+0x2c4>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d00d      	beq.n	8000a48 <HAL_GPIO_Init+0x1e8>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b28 <HAL_GPIO_Init+0x2c8>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d007      	beq.n	8000a44 <HAL_GPIO_Init+0x1e4>
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a3d      	ldr	r2, [pc, #244]	@ (8000b2c <HAL_GPIO_Init+0x2cc>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d101      	bne.n	8000a40 <HAL_GPIO_Init+0x1e0>
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	e006      	b.n	8000a4e <HAL_GPIO_Init+0x1ee>
 8000a40:	2304      	movs	r3, #4
 8000a42:	e004      	b.n	8000a4e <HAL_GPIO_Init+0x1ee>
 8000a44:	2302      	movs	r3, #2
 8000a46:	e002      	b.n	8000a4e <HAL_GPIO_Init+0x1ee>
 8000a48:	2301      	movs	r3, #1
 8000a4a:	e000      	b.n	8000a4e <HAL_GPIO_Init+0x1ee>
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a50:	f002 0203 	and.w	r2, r2, #3
 8000a54:	0092      	lsls	r2, r2, #2
 8000a56:	4093      	lsls	r3, r2
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a5e:	492f      	ldr	r1, [pc, #188]	@ (8000b1c <HAL_GPIO_Init+0x2bc>)
 8000a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a62:	089b      	lsrs	r3, r3, #2
 8000a64:	3302      	adds	r3, #2
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d006      	beq.n	8000a86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a78:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000a7a:	689a      	ldr	r2, [r3, #8]
 8000a7c:	492c      	ldr	r1, [pc, #176]	@ (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	608b      	str	r3, [r1, #8]
 8000a84:	e006      	b.n	8000a94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a86:	4b2a      	ldr	r3, [pc, #168]	@ (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000a88:	689a      	ldr	r2, [r3, #8]
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4928      	ldr	r1, [pc, #160]	@ (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000a90:	4013      	ands	r3, r2
 8000a92:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d006      	beq.n	8000aae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000aa0:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000aa2:	68da      	ldr	r2, [r3, #12]
 8000aa4:	4922      	ldr	r1, [pc, #136]	@ (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	60cb      	str	r3, [r1, #12]
 8000aac:	e006      	b.n	8000abc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000aae:	4b20      	ldr	r3, [pc, #128]	@ (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	68da      	ldr	r2, [r3, #12]
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	491e      	ldr	r1, [pc, #120]	@ (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d006      	beq.n	8000ad6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac8:	4b19      	ldr	r3, [pc, #100]	@ (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	4918      	ldr	r1, [pc, #96]	@ (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	604b      	str	r3, [r1, #4]
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ad6:	4b16      	ldr	r3, [pc, #88]	@ (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	4914      	ldr	r1, [pc, #80]	@ (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d021      	beq.n	8000b34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	490e      	ldr	r1, [pc, #56]	@ (8000b30 <HAL_GPIO_Init+0x2d0>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	600b      	str	r3, [r1, #0]
 8000afc:	e021      	b.n	8000b42 <HAL_GPIO_Init+0x2e2>
 8000afe:	bf00      	nop
 8000b00:	10320000 	.word	0x10320000
 8000b04:	10310000 	.word	0x10310000
 8000b08:	10220000 	.word	0x10220000
 8000b0c:	10210000 	.word	0x10210000
 8000b10:	10120000 	.word	0x10120000
 8000b14:	10110000 	.word	0x10110000
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010000 	.word	0x40010000
 8000b20:	40010800 	.word	0x40010800
 8000b24:	40010c00 	.word	0x40010c00
 8000b28:	40011000 	.word	0x40011000
 8000b2c:	40011400 	.word	0x40011400
 8000b30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b34:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <HAL_GPIO_Init+0x304>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	69bb      	ldr	r3, [r7, #24]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	4909      	ldr	r1, [pc, #36]	@ (8000b64 <HAL_GPIO_Init+0x304>)
 8000b3e:	4013      	ands	r3, r2
 8000b40:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b44:	3301      	adds	r3, #1
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	f47f ae8e 	bne.w	8000874 <HAL_GPIO_Init+0x14>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	372c      	adds	r7, #44	@ 0x2c
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	40010400 	.word	0x40010400

08000b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
 8000b74:	4613      	mov	r3, r2
 8000b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b78:	787b      	ldrb	r3, [r7, #1]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b84:	e003      	b.n	8000b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b86:	887b      	ldrh	r3, [r7, #2]
 8000b88:	041a      	lsls	r2, r3, #16
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	611a      	str	r2, [r3, #16]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000ba2:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ba4:	695a      	ldr	r2, [r3, #20]
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d006      	beq.n	8000bbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb0:	88fb      	ldrh	r3, [r7, #6]
 8000bb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f806 	bl	8000bc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40010400 	.word	0x40010400

08000bc8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e272      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 8087 	beq.w	8000d0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bfc:	4b92      	ldr	r3, [pc, #584]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 030c 	and.w	r3, r3, #12
 8000c04:	2b04      	cmp	r3, #4
 8000c06:	d00c      	beq.n	8000c22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c08:	4b8f      	ldr	r3, [pc, #572]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 030c 	and.w	r3, r3, #12
 8000c10:	2b08      	cmp	r3, #8
 8000c12:	d112      	bne.n	8000c3a <HAL_RCC_OscConfig+0x5e>
 8000c14:	4b8c      	ldr	r3, [pc, #560]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c20:	d10b      	bne.n	8000c3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c22:	4b89      	ldr	r3, [pc, #548]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d06c      	beq.n	8000d08 <HAL_RCC_OscConfig+0x12c>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d168      	bne.n	8000d08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e24c      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c42:	d106      	bne.n	8000c52 <HAL_RCC_OscConfig+0x76>
 8000c44:	4b80      	ldr	r3, [pc, #512]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a7f      	ldr	r2, [pc, #508]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	e02e      	b.n	8000cb0 <HAL_RCC_OscConfig+0xd4>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d10c      	bne.n	8000c74 <HAL_RCC_OscConfig+0x98>
 8000c5a:	4b7b      	ldr	r3, [pc, #492]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a7a      	ldr	r2, [pc, #488]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c64:	6013      	str	r3, [r2, #0]
 8000c66:	4b78      	ldr	r3, [pc, #480]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a77      	ldr	r2, [pc, #476]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	e01d      	b.n	8000cb0 <HAL_RCC_OscConfig+0xd4>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c7c:	d10c      	bne.n	8000c98 <HAL_RCC_OscConfig+0xbc>
 8000c7e:	4b72      	ldr	r3, [pc, #456]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a71      	ldr	r2, [pc, #452]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c88:	6013      	str	r3, [r2, #0]
 8000c8a:	4b6f      	ldr	r3, [pc, #444]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a6e      	ldr	r2, [pc, #440]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c94:	6013      	str	r3, [r2, #0]
 8000c96:	e00b      	b.n	8000cb0 <HAL_RCC_OscConfig+0xd4>
 8000c98:	4b6b      	ldr	r3, [pc, #428]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a6a      	ldr	r2, [pc, #424]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b68      	ldr	r3, [pc, #416]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a67      	ldr	r2, [pc, #412]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d013      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cb8:	f7ff fcba 	bl	8000630 <HAL_GetTick>
 8000cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cbe:	e008      	b.n	8000cd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc0:	f7ff fcb6 	bl	8000630 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b64      	cmp	r3, #100	@ 0x64
 8000ccc:	d901      	bls.n	8000cd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e200      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d0f0      	beq.n	8000cc0 <HAL_RCC_OscConfig+0xe4>
 8000cde:	e014      	b.n	8000d0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fca6 	bl	8000630 <HAL_GetTick>
 8000ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce8:	f7ff fca2 	bl	8000630 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b64      	cmp	r3, #100	@ 0x64
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e1ec      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfa:	4b53      	ldr	r3, [pc, #332]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d1f0      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x10c>
 8000d06:	e000      	b.n	8000d0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d063      	beq.n	8000dde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d16:	4b4c      	ldr	r3, [pc, #304]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00b      	beq.n	8000d3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d22:	4b49      	ldr	r3, [pc, #292]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 030c 	and.w	r3, r3, #12
 8000d2a:	2b08      	cmp	r3, #8
 8000d2c:	d11c      	bne.n	8000d68 <HAL_RCC_OscConfig+0x18c>
 8000d2e:	4b46      	ldr	r3, [pc, #280]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d116      	bne.n	8000d68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d3a:	4b43      	ldr	r3, [pc, #268]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d005      	beq.n	8000d52 <HAL_RCC_OscConfig+0x176>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	691b      	ldr	r3, [r3, #16]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d001      	beq.n	8000d52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e1c0      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d52:	4b3d      	ldr	r3, [pc, #244]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	4939      	ldr	r1, [pc, #228]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	4313      	orrs	r3, r2
 8000d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d66:	e03a      	b.n	8000dde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	691b      	ldr	r3, [r3, #16]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d020      	beq.n	8000db2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d70:	4b36      	ldr	r3, [pc, #216]	@ (8000e4c <HAL_RCC_OscConfig+0x270>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d76:	f7ff fc5b 	bl	8000630 <HAL_GetTick>
 8000d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7c:	e008      	b.n	8000d90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d7e:	f7ff fc57 	bl	8000630 <HAL_GetTick>
 8000d82:	4602      	mov	r2, r0
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d901      	bls.n	8000d90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e1a1      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d90:	4b2d      	ldr	r3, [pc, #180]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0f0      	beq.n	8000d7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	4927      	ldr	r1, [pc, #156]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	4313      	orrs	r3, r2
 8000dae:	600b      	str	r3, [r1, #0]
 8000db0:	e015      	b.n	8000dde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000db2:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <HAL_RCC_OscConfig+0x270>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db8:	f7ff fc3a 	bl	8000630 <HAL_GetTick>
 8000dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dbe:	e008      	b.n	8000dd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc0:	f7ff fc36 	bl	8000630 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d901      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e180      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f0      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0308 	and.w	r3, r3, #8
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d03a      	beq.n	8000e60 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d019      	beq.n	8000e26 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000df2:	4b17      	ldr	r3, [pc, #92]	@ (8000e50 <HAL_RCC_OscConfig+0x274>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df8:	f7ff fc1a 	bl	8000630 <HAL_GetTick>
 8000dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfe:	e008      	b.n	8000e12 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e00:	f7ff fc16 	bl	8000630 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d901      	bls.n	8000e12 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	e160      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d0f0      	beq.n	8000e00 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f000 face 	bl	80013c0 <RCC_Delay>
 8000e24:	e01c      	b.n	8000e60 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <HAL_RCC_OscConfig+0x274>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e2c:	f7ff fc00 	bl	8000630 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e32:	e00f      	b.n	8000e54 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e34:	f7ff fbfc 	bl	8000630 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d908      	bls.n	8000e54 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e146      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	42420000 	.word	0x42420000
 8000e50:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e54:	4b92      	ldr	r3, [pc, #584]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e58:	f003 0302 	and.w	r3, r3, #2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1e9      	bne.n	8000e34 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f003 0304 	and.w	r3, r3, #4
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 80a6 	beq.w	8000fba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e72:	4b8b      	ldr	r3, [pc, #556]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d10d      	bne.n	8000e9a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b88      	ldr	r3, [pc, #544]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a87      	ldr	r2, [pc, #540]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b85      	ldr	r3, [pc, #532]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e96:	2301      	movs	r3, #1
 8000e98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e9a:	4b82      	ldr	r3, [pc, #520]	@ (80010a4 <HAL_RCC_OscConfig+0x4c8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d118      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80010a4 <HAL_RCC_OscConfig+0x4c8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a7e      	ldr	r2, [pc, #504]	@ (80010a4 <HAL_RCC_OscConfig+0x4c8>)
 8000eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eb2:	f7ff fbbd 	bl	8000630 <HAL_GetTick>
 8000eb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb8:	e008      	b.n	8000ecc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eba:	f7ff fbb9 	bl	8000630 <HAL_GetTick>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	2b64      	cmp	r3, #100	@ 0x64
 8000ec6:	d901      	bls.n	8000ecc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	e103      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ecc:	4b75      	ldr	r3, [pc, #468]	@ (80010a4 <HAL_RCC_OscConfig+0x4c8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0f0      	beq.n	8000eba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d106      	bne.n	8000eee <HAL_RCC_OscConfig+0x312>
 8000ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	4a6e      	ldr	r2, [pc, #440]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000ee6:	f043 0301 	orr.w	r3, r3, #1
 8000eea:	6213      	str	r3, [r2, #32]
 8000eec:	e02d      	b.n	8000f4a <HAL_RCC_OscConfig+0x36e>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d10c      	bne.n	8000f10 <HAL_RCC_OscConfig+0x334>
 8000ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	6a1b      	ldr	r3, [r3, #32]
 8000efa:	4a69      	ldr	r2, [pc, #420]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000efc:	f023 0301 	bic.w	r3, r3, #1
 8000f00:	6213      	str	r3, [r2, #32]
 8000f02:	4b67      	ldr	r3, [pc, #412]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	4a66      	ldr	r2, [pc, #408]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f08:	f023 0304 	bic.w	r3, r3, #4
 8000f0c:	6213      	str	r3, [r2, #32]
 8000f0e:	e01c      	b.n	8000f4a <HAL_RCC_OscConfig+0x36e>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2b05      	cmp	r3, #5
 8000f16:	d10c      	bne.n	8000f32 <HAL_RCC_OscConfig+0x356>
 8000f18:	4b61      	ldr	r3, [pc, #388]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	4a60      	ldr	r2, [pc, #384]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6213      	str	r3, [r2, #32]
 8000f24:	4b5e      	ldr	r3, [pc, #376]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	4a5d      	ldr	r2, [pc, #372]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6213      	str	r3, [r2, #32]
 8000f30:	e00b      	b.n	8000f4a <HAL_RCC_OscConfig+0x36e>
 8000f32:	4b5b      	ldr	r3, [pc, #364]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f34:	6a1b      	ldr	r3, [r3, #32]
 8000f36:	4a5a      	ldr	r2, [pc, #360]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	f023 0301 	bic.w	r3, r3, #1
 8000f3c:	6213      	str	r3, [r2, #32]
 8000f3e:	4b58      	ldr	r3, [pc, #352]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f40:	6a1b      	ldr	r3, [r3, #32]
 8000f42:	4a57      	ldr	r2, [pc, #348]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f44:	f023 0304 	bic.w	r3, r3, #4
 8000f48:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d015      	beq.n	8000f7e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f52:	f7ff fb6d 	bl	8000630 <HAL_GetTick>
 8000f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f58:	e00a      	b.n	8000f70 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f5a:	f7ff fb69 	bl	8000630 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e0b1      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f70:	4b4b      	ldr	r3, [pc, #300]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0ee      	beq.n	8000f5a <HAL_RCC_OscConfig+0x37e>
 8000f7c:	e014      	b.n	8000fa8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f7e:	f7ff fb57 	bl	8000630 <HAL_GetTick>
 8000f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f84:	e00a      	b.n	8000f9c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f86:	f7ff fb53 	bl	8000630 <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e09b      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f9c:	4b40      	ldr	r3, [pc, #256]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1ee      	bne.n	8000f86 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d105      	bne.n	8000fba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fae:	4b3c      	ldr	r3, [pc, #240]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a3b      	ldr	r2, [pc, #236]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000fb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000fb8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8087 	beq.w	80010d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fc4:	4b36      	ldr	r3, [pc, #216]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 030c 	and.w	r3, r3, #12
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	d061      	beq.n	8001094 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69db      	ldr	r3, [r3, #28]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d146      	bne.n	8001066 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd8:	4b33      	ldr	r3, [pc, #204]	@ (80010a8 <HAL_RCC_OscConfig+0x4cc>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fde:	f7ff fb27 	bl	8000630 <HAL_GetTick>
 8000fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe4:	e008      	b.n	8000ff8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe6:	f7ff fb23 	bl	8000630 <HAL_GetTick>
 8000fea:	4602      	mov	r2, r0
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d901      	bls.n	8000ff8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	e06d      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff8:	4b29      	ldr	r3, [pc, #164]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1f0      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800100c:	d108      	bne.n	8001020 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800100e:	4b24      	ldr	r3, [pc, #144]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	4921      	ldr	r1, [pc, #132]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001020:	4b1f      	ldr	r3, [pc, #124]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a19      	ldr	r1, [r3, #32]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001030:	430b      	orrs	r3, r1
 8001032:	491b      	ldr	r1, [pc, #108]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8001034:	4313      	orrs	r3, r2
 8001036:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001038:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <HAL_RCC_OscConfig+0x4cc>)
 800103a:	2201      	movs	r2, #1
 800103c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff faf7 	bl	8000630 <HAL_GetTick>
 8001042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001044:	e008      	b.n	8001058 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001046:	f7ff faf3 	bl	8000630 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	2b02      	cmp	r3, #2
 8001052:	d901      	bls.n	8001058 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001054:	2303      	movs	r3, #3
 8001056:	e03d      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d0f0      	beq.n	8001046 <HAL_RCC_OscConfig+0x46a>
 8001064:	e035      	b.n	80010d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <HAL_RCC_OscConfig+0x4cc>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff fae0 	bl	8000630 <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001072:	e008      	b.n	8001086 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001074:	f7ff fadc 	bl	8000630 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	2b02      	cmp	r3, #2
 8001080:	d901      	bls.n	8001086 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001082:	2303      	movs	r3, #3
 8001084:	e026      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1f0      	bne.n	8001074 <HAL_RCC_OscConfig+0x498>
 8001092:	e01e      	b.n	80010d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d107      	bne.n	80010ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e019      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40007000 	.word	0x40007000
 80010a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010ac:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <HAL_RCC_OscConfig+0x500>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d106      	bne.n	80010ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d001      	beq.n	80010d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40021000 	.word	0x40021000

080010e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e0d0      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010f4:	4b6a      	ldr	r3, [pc, #424]	@ (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0307 	and.w	r3, r3, #7
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d910      	bls.n	8001124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001102:	4b67      	ldr	r3, [pc, #412]	@ (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 0207 	bic.w	r2, r3, #7
 800110a:	4965      	ldr	r1, [pc, #404]	@ (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	4313      	orrs	r3, r2
 8001110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001112:	4b63      	ldr	r3, [pc, #396]	@ (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d001      	beq.n	8001124 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e0b8      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d020      	beq.n	8001172 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800113c:	4b59      	ldr	r3, [pc, #356]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a58      	ldr	r2, [pc, #352]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001146:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	2b00      	cmp	r3, #0
 8001152:	d005      	beq.n	8001160 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001154:	4b53      	ldr	r3, [pc, #332]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4a52      	ldr	r2, [pc, #328]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800115e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001160:	4b50      	ldr	r3, [pc, #320]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	494d      	ldr	r1, [pc, #308]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800116e:	4313      	orrs	r3, r2
 8001170:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d040      	beq.n	8001200 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	4b47      	ldr	r3, [pc, #284]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d115      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e07f      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d107      	bne.n	80011ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800119e:	4b41      	ldr	r3, [pc, #260]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d109      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e073      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ae:	4b3d      	ldr	r3, [pc, #244]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e06b      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011be:	4b39      	ldr	r3, [pc, #228]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f023 0203 	bic.w	r2, r3, #3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4936      	ldr	r1, [pc, #216]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011d0:	f7ff fa2e 	bl	8000630 <HAL_GetTick>
 80011d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d6:	e00a      	b.n	80011ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d8:	f7ff fa2a 	bl	8000630 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e053      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ee:	4b2d      	ldr	r3, [pc, #180]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 020c 	and.w	r2, r3, #12
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d1eb      	bne.n	80011d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001200:	4b27      	ldr	r3, [pc, #156]	@ (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d210      	bcs.n	8001230 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120e:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 0207 	bic.w	r2, r3, #7
 8001216:	4922      	ldr	r1, [pc, #136]	@ (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d001      	beq.n	8001230 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e032      	b.n	8001296 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4916      	ldr	r1, [pc, #88]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	490e      	ldr	r1, [pc, #56]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	4313      	orrs	r3, r2
 800126c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800126e:	f000 f821 	bl	80012b4 <HAL_RCC_GetSysClockFreq>
 8001272:	4602      	mov	r2, r0
 8001274:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	091b      	lsrs	r3, r3, #4
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	490a      	ldr	r1, [pc, #40]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001280:	5ccb      	ldrb	r3, [r1, r3]
 8001282:	fa22 f303 	lsr.w	r3, r2, r3
 8001286:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <HAL_RCC_ClockConfig+0x1cc>)
 8001288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_RCC_ClockConfig+0x1d0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f98c 	bl	80005ac <HAL_InitTick>

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40022000 	.word	0x40022000
 80012a4:	40021000 	.word	0x40021000
 80012a8:	08003648 	.word	0x08003648
 80012ac:	20000000 	.word	0x20000000
 80012b0:	20000004 	.word	0x20000004

080012b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b087      	sub	sp, #28
 80012b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <HAL_RCC_GetSysClockFreq+0x94>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 030c 	and.w	r3, r3, #12
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d002      	beq.n	80012e4 <HAL_RCC_GetSysClockFreq+0x30>
 80012de:	2b08      	cmp	r3, #8
 80012e0:	d003      	beq.n	80012ea <HAL_RCC_GetSysClockFreq+0x36>
 80012e2:	e027      	b.n	8001334 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012e4:	4b19      	ldr	r3, [pc, #100]	@ (800134c <HAL_RCC_GetSysClockFreq+0x98>)
 80012e6:	613b      	str	r3, [r7, #16]
      break;
 80012e8:	e027      	b.n	800133a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	0c9b      	lsrs	r3, r3, #18
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	4a17      	ldr	r2, [pc, #92]	@ (8001350 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d010      	beq.n	8001324 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <HAL_RCC_GetSysClockFreq+0x94>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	0c5b      	lsrs	r3, r3, #17
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	4a11      	ldr	r2, [pc, #68]	@ (8001354 <HAL_RCC_GetSysClockFreq+0xa0>)
 800130e:	5cd3      	ldrb	r3, [r2, r3]
 8001310:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a0d      	ldr	r2, [pc, #52]	@ (800134c <HAL_RCC_GetSysClockFreq+0x98>)
 8001316:	fb03 f202 	mul.w	r2, r3, r2
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	e004      	b.n	800132e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a0c      	ldr	r2, [pc, #48]	@ (8001358 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	613b      	str	r3, [r7, #16]
      break;
 8001332:	e002      	b.n	800133a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001334:	4b05      	ldr	r3, [pc, #20]	@ (800134c <HAL_RCC_GetSysClockFreq+0x98>)
 8001336:	613b      	str	r3, [r7, #16]
      break;
 8001338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800133a:	693b      	ldr	r3, [r7, #16]
}
 800133c:	4618      	mov	r0, r3
 800133e:	371c      	adds	r7, #28
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000
 800134c:	007a1200 	.word	0x007a1200
 8001350:	08003660 	.word	0x08003660
 8001354:	08003670 	.word	0x08003670
 8001358:	003d0900 	.word	0x003d0900

0800135c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001360:	4b02      	ldr	r3, [pc, #8]	@ (800136c <HAL_RCC_GetHCLKFreq+0x10>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr
 800136c:	20000000 	.word	0x20000000

08001370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001374:	f7ff fff2 	bl	800135c <HAL_RCC_GetHCLKFreq>
 8001378:	4602      	mov	r2, r0
 800137a:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	0a1b      	lsrs	r3, r3, #8
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	4903      	ldr	r1, [pc, #12]	@ (8001394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001386:	5ccb      	ldrb	r3, [r1, r3]
 8001388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800138c:	4618      	mov	r0, r3
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	08003658 	.word	0x08003658

08001398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800139c:	f7ff ffde 	bl	800135c <HAL_RCC_GetHCLKFreq>
 80013a0:	4602      	mov	r2, r0
 80013a2:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	0adb      	lsrs	r3, r3, #11
 80013a8:	f003 0307 	and.w	r3, r3, #7
 80013ac:	4903      	ldr	r1, [pc, #12]	@ (80013bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ae:	5ccb      	ldrb	r3, [r1, r3]
 80013b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	08003658 	.word	0x08003658

080013c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013c8:	4b0a      	ldr	r3, [pc, #40]	@ (80013f4 <RCC_Delay+0x34>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	@ (80013f8 <RCC_Delay+0x38>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0a5b      	lsrs	r3, r3, #9
 80013d4:	687a      	ldr	r2, [r7, #4]
 80013d6:	fb02 f303 	mul.w	r3, r2, r3
 80013da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013dc:	bf00      	nop
  }
  while (Delay --);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1e5a      	subs	r2, r3, #1
 80013e2:	60fa      	str	r2, [r7, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1f9      	bne.n	80013dc <RCC_Delay+0x1c>
}
 80013e8:	bf00      	nop
 80013ea:	bf00      	nop
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	20000000 	.word	0x20000000
 80013f8:	10624dd3 	.word	0x10624dd3

080013fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e042      	b.n	8001494 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d106      	bne.n	8001428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7fe ffd8 	bl	80003d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2224      	movs	r2, #36	@ 0x24
 800142c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	68da      	ldr	r2, [r3, #12]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800143e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f82b 	bl	800149c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	691a      	ldr	r2, [r3, #16]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2220      	movs	r2, #32
 8001480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2220      	movs	r2, #32
 8001488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	431a      	orrs	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80014d6:	f023 030c 	bic.w	r3, r3, #12
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	430b      	orrs	r3, r1
 80014e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699a      	ldr	r2, [r3, #24]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a2c      	ldr	r2, [pc, #176]	@ (80015b0 <UART_SetConfig+0x114>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d103      	bne.n	800150c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001504:	f7ff ff48 	bl	8001398 <HAL_RCC_GetPCLK2Freq>
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	e002      	b.n	8001512 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800150c:	f7ff ff30 	bl	8001370 <HAL_RCC_GetPCLK1Freq>
 8001510:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	009a      	lsls	r2, r3, #2
 800151c:	441a      	add	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	fbb2 f3f3 	udiv	r3, r2, r3
 8001528:	4a22      	ldr	r2, [pc, #136]	@ (80015b4 <UART_SetConfig+0x118>)
 800152a:	fba2 2303 	umull	r2, r3, r2, r3
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	0119      	lsls	r1, r3, #4
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	009a      	lsls	r2, r3, #2
 800153c:	441a      	add	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fbb2 f2f3 	udiv	r2, r2, r3
 8001548:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <UART_SetConfig+0x118>)
 800154a:	fba3 0302 	umull	r0, r3, r3, r2
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	2064      	movs	r0, #100	@ 0x64
 8001552:	fb00 f303 	mul.w	r3, r0, r3
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	3332      	adds	r3, #50	@ 0x32
 800155c:	4a15      	ldr	r2, [pc, #84]	@ (80015b4 <UART_SetConfig+0x118>)
 800155e:	fba2 2303 	umull	r2, r3, r2, r3
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001568:	4419      	add	r1, r3
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	009a      	lsls	r2, r3, #2
 8001574:	441a      	add	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <UART_SetConfig+0x118>)
 8001582:	fba3 0302 	umull	r0, r3, r3, r2
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	2064      	movs	r0, #100	@ 0x64
 800158a:	fb00 f303 	mul.w	r3, r0, r3
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	011b      	lsls	r3, r3, #4
 8001592:	3332      	adds	r3, #50	@ 0x32
 8001594:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <UART_SetConfig+0x118>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	f003 020f 	and.w	r2, r3, #15
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	440a      	add	r2, r1
 80015a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80015a8:	bf00      	nop
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40013800 	.word	0x40013800
 80015b4:	51eb851f 	.word	0x51eb851f

080015b8 <findslot>:
 80015b8:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <findslot+0x2c>)
 80015ba:	b510      	push	{r4, lr}
 80015bc:	4604      	mov	r4, r0
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	b118      	cbz	r0, 80015ca <findslot+0x12>
 80015c2:	6a03      	ldr	r3, [r0, #32]
 80015c4:	b90b      	cbnz	r3, 80015ca <findslot+0x12>
 80015c6:	f000 fb19 	bl	8001bfc <__sinit>
 80015ca:	2c13      	cmp	r4, #19
 80015cc:	d807      	bhi.n	80015de <findslot+0x26>
 80015ce:	4806      	ldr	r0, [pc, #24]	@ (80015e8 <findslot+0x30>)
 80015d0:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80015d4:	3201      	adds	r2, #1
 80015d6:	d002      	beq.n	80015de <findslot+0x26>
 80015d8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80015dc:	bd10      	pop	{r4, pc}
 80015de:	2000      	movs	r0, #0
 80015e0:	e7fc      	b.n	80015dc <findslot+0x24>
 80015e2:	bf00      	nop
 80015e4:	20000020 	.word	0x20000020
 80015e8:	200000e8 	.word	0x200000e8

080015ec <error>:
 80015ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ee:	4604      	mov	r4, r0
 80015f0:	f000 fcea 	bl	8001fc8 <__errno>
 80015f4:	2613      	movs	r6, #19
 80015f6:	4605      	mov	r5, r0
 80015f8:	2700      	movs	r7, #0
 80015fa:	4630      	mov	r0, r6
 80015fc:	4639      	mov	r1, r7
 80015fe:	beab      	bkpt	0x00ab
 8001600:	4606      	mov	r6, r0
 8001602:	4620      	mov	r0, r4
 8001604:	602e      	str	r6, [r5, #0]
 8001606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001608 <checkerror>:
 8001608:	1c43      	adds	r3, r0, #1
 800160a:	d101      	bne.n	8001610 <checkerror+0x8>
 800160c:	f7ff bfee 	b.w	80015ec <error>
 8001610:	4770      	bx	lr

08001612 <_swiread>:
 8001612:	b530      	push	{r4, r5, lr}
 8001614:	b085      	sub	sp, #20
 8001616:	2406      	movs	r4, #6
 8001618:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800161c:	9203      	str	r2, [sp, #12]
 800161e:	ad01      	add	r5, sp, #4
 8001620:	4620      	mov	r0, r4
 8001622:	4629      	mov	r1, r5
 8001624:	beab      	bkpt	0x00ab
 8001626:	4604      	mov	r4, r0
 8001628:	4620      	mov	r0, r4
 800162a:	f7ff ffed 	bl	8001608 <checkerror>
 800162e:	b005      	add	sp, #20
 8001630:	bd30      	pop	{r4, r5, pc}

08001632 <_read>:
 8001632:	b570      	push	{r4, r5, r6, lr}
 8001634:	460e      	mov	r6, r1
 8001636:	4614      	mov	r4, r2
 8001638:	f7ff ffbe 	bl	80015b8 <findslot>
 800163c:	4605      	mov	r5, r0
 800163e:	b930      	cbnz	r0, 800164e <_read+0x1c>
 8001640:	f000 fcc2 	bl	8001fc8 <__errno>
 8001644:	2309      	movs	r3, #9
 8001646:	6003      	str	r3, [r0, #0]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	bd70      	pop	{r4, r5, r6, pc}
 800164e:	4622      	mov	r2, r4
 8001650:	4631      	mov	r1, r6
 8001652:	6800      	ldr	r0, [r0, #0]
 8001654:	f7ff ffdd 	bl	8001612 <_swiread>
 8001658:	1c43      	adds	r3, r0, #1
 800165a:	d0f5      	beq.n	8001648 <_read+0x16>
 800165c:	686b      	ldr	r3, [r5, #4]
 800165e:	1a20      	subs	r0, r4, r0
 8001660:	4403      	add	r3, r0
 8001662:	606b      	str	r3, [r5, #4]
 8001664:	e7f2      	b.n	800164c <_read+0x1a>

08001666 <_swilseek>:
 8001666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001668:	460c      	mov	r4, r1
 800166a:	4616      	mov	r6, r2
 800166c:	f7ff ffa4 	bl	80015b8 <findslot>
 8001670:	4605      	mov	r5, r0
 8001672:	b940      	cbnz	r0, 8001686 <_swilseek+0x20>
 8001674:	f000 fca8 	bl	8001fc8 <__errno>
 8001678:	2309      	movs	r3, #9
 800167a:	6003      	str	r3, [r0, #0]
 800167c:	f04f 34ff 	mov.w	r4, #4294967295
 8001680:	4620      	mov	r0, r4
 8001682:	b003      	add	sp, #12
 8001684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001686:	2e02      	cmp	r6, #2
 8001688:	d903      	bls.n	8001692 <_swilseek+0x2c>
 800168a:	f000 fc9d 	bl	8001fc8 <__errno>
 800168e:	2316      	movs	r3, #22
 8001690:	e7f3      	b.n	800167a <_swilseek+0x14>
 8001692:	2e01      	cmp	r6, #1
 8001694:	d112      	bne.n	80016bc <_swilseek+0x56>
 8001696:	6843      	ldr	r3, [r0, #4]
 8001698:	18e4      	adds	r4, r4, r3
 800169a:	d4f6      	bmi.n	800168a <_swilseek+0x24>
 800169c:	682b      	ldr	r3, [r5, #0]
 800169e:	260a      	movs	r6, #10
 80016a0:	466f      	mov	r7, sp
 80016a2:	e9cd 3400 	strd	r3, r4, [sp]
 80016a6:	4630      	mov	r0, r6
 80016a8:	4639      	mov	r1, r7
 80016aa:	beab      	bkpt	0x00ab
 80016ac:	4606      	mov	r6, r0
 80016ae:	4630      	mov	r0, r6
 80016b0:	f7ff ffaa 	bl	8001608 <checkerror>
 80016b4:	2800      	cmp	r0, #0
 80016b6:	dbe1      	blt.n	800167c <_swilseek+0x16>
 80016b8:	606c      	str	r4, [r5, #4]
 80016ba:	e7e1      	b.n	8001680 <_swilseek+0x1a>
 80016bc:	2e02      	cmp	r6, #2
 80016be:	6803      	ldr	r3, [r0, #0]
 80016c0:	d1ec      	bne.n	800169c <_swilseek+0x36>
 80016c2:	260c      	movs	r6, #12
 80016c4:	466f      	mov	r7, sp
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	4630      	mov	r0, r6
 80016ca:	4639      	mov	r1, r7
 80016cc:	beab      	bkpt	0x00ab
 80016ce:	4606      	mov	r6, r0
 80016d0:	4630      	mov	r0, r6
 80016d2:	f7ff ff99 	bl	8001608 <checkerror>
 80016d6:	1c43      	adds	r3, r0, #1
 80016d8:	d0d0      	beq.n	800167c <_swilseek+0x16>
 80016da:	4404      	add	r4, r0
 80016dc:	e7de      	b.n	800169c <_swilseek+0x36>

080016de <_lseek>:
 80016de:	f7ff bfc2 	b.w	8001666 <_swilseek>

080016e2 <_swiwrite>:
 80016e2:	b530      	push	{r4, r5, lr}
 80016e4:	b085      	sub	sp, #20
 80016e6:	2405      	movs	r4, #5
 80016e8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80016ec:	9203      	str	r2, [sp, #12]
 80016ee:	ad01      	add	r5, sp, #4
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	beab      	bkpt	0x00ab
 80016f6:	4604      	mov	r4, r0
 80016f8:	4620      	mov	r0, r4
 80016fa:	f7ff ff85 	bl	8001608 <checkerror>
 80016fe:	b005      	add	sp, #20
 8001700:	bd30      	pop	{r4, r5, pc}

08001702 <_write>:
 8001702:	b570      	push	{r4, r5, r6, lr}
 8001704:	460e      	mov	r6, r1
 8001706:	4615      	mov	r5, r2
 8001708:	f7ff ff56 	bl	80015b8 <findslot>
 800170c:	4604      	mov	r4, r0
 800170e:	b930      	cbnz	r0, 800171e <_write+0x1c>
 8001710:	f000 fc5a 	bl	8001fc8 <__errno>
 8001714:	2309      	movs	r3, #9
 8001716:	6003      	str	r3, [r0, #0]
 8001718:	f04f 30ff 	mov.w	r0, #4294967295
 800171c:	bd70      	pop	{r4, r5, r6, pc}
 800171e:	462a      	mov	r2, r5
 8001720:	4631      	mov	r1, r6
 8001722:	6800      	ldr	r0, [r0, #0]
 8001724:	f7ff ffdd 	bl	80016e2 <_swiwrite>
 8001728:	1e03      	subs	r3, r0, #0
 800172a:	dbf5      	blt.n	8001718 <_write+0x16>
 800172c:	6862      	ldr	r2, [r4, #4]
 800172e:	1ae8      	subs	r0, r5, r3
 8001730:	4402      	add	r2, r0
 8001732:	42ab      	cmp	r3, r5
 8001734:	6062      	str	r2, [r4, #4]
 8001736:	d1f1      	bne.n	800171c <_write+0x1a>
 8001738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800173c:	2000      	movs	r0, #0
 800173e:	f7ff bf55 	b.w	80015ec <error>

08001742 <_swiclose>:
 8001742:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001744:	2402      	movs	r4, #2
 8001746:	9001      	str	r0, [sp, #4]
 8001748:	ad01      	add	r5, sp, #4
 800174a:	4620      	mov	r0, r4
 800174c:	4629      	mov	r1, r5
 800174e:	beab      	bkpt	0x00ab
 8001750:	4604      	mov	r4, r0
 8001752:	4620      	mov	r0, r4
 8001754:	f7ff ff58 	bl	8001608 <checkerror>
 8001758:	b003      	add	sp, #12
 800175a:	bd30      	pop	{r4, r5, pc}

0800175c <_close>:
 800175c:	b538      	push	{r3, r4, r5, lr}
 800175e:	4605      	mov	r5, r0
 8001760:	f7ff ff2a 	bl	80015b8 <findslot>
 8001764:	4604      	mov	r4, r0
 8001766:	b930      	cbnz	r0, 8001776 <_close+0x1a>
 8001768:	f000 fc2e 	bl	8001fc8 <__errno>
 800176c:	2309      	movs	r3, #9
 800176e:	6003      	str	r3, [r0, #0]
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	bd38      	pop	{r3, r4, r5, pc}
 8001776:	3d01      	subs	r5, #1
 8001778:	2d01      	cmp	r5, #1
 800177a:	d809      	bhi.n	8001790 <_close+0x34>
 800177c:	4b07      	ldr	r3, [pc, #28]	@ (800179c <_close+0x40>)
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d104      	bne.n	8001790 <_close+0x34>
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	2000      	movs	r0, #0
 800178c:	6023      	str	r3, [r4, #0]
 800178e:	e7f1      	b.n	8001774 <_close+0x18>
 8001790:	6820      	ldr	r0, [r4, #0]
 8001792:	f7ff ffd6 	bl	8001742 <_swiclose>
 8001796:	2800      	cmp	r0, #0
 8001798:	d0f5      	beq.n	8001786 <_close+0x2a>
 800179a:	e7eb      	b.n	8001774 <_close+0x18>
 800179c:	200000e8 	.word	0x200000e8

080017a0 <_swistat>:
 80017a0:	b570      	push	{r4, r5, r6, lr}
 80017a2:	460c      	mov	r4, r1
 80017a4:	f7ff ff08 	bl	80015b8 <findslot>
 80017a8:	4605      	mov	r5, r0
 80017aa:	b930      	cbnz	r0, 80017ba <_swistat+0x1a>
 80017ac:	f000 fc0c 	bl	8001fc8 <__errno>
 80017b0:	2309      	movs	r3, #9
 80017b2:	6003      	str	r3, [r0, #0]
 80017b4:	f04f 30ff 	mov.w	r0, #4294967295
 80017b8:	bd70      	pop	{r4, r5, r6, pc}
 80017ba:	6863      	ldr	r3, [r4, #4]
 80017bc:	260c      	movs	r6, #12
 80017be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017c2:	6063      	str	r3, [r4, #4]
 80017c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017c8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80017ca:	4630      	mov	r0, r6
 80017cc:	4629      	mov	r1, r5
 80017ce:	beab      	bkpt	0x00ab
 80017d0:	4605      	mov	r5, r0
 80017d2:	4628      	mov	r0, r5
 80017d4:	f7ff ff18 	bl	8001608 <checkerror>
 80017d8:	1c43      	adds	r3, r0, #1
 80017da:	d0eb      	beq.n	80017b4 <_swistat+0x14>
 80017dc:	6120      	str	r0, [r4, #16]
 80017de:	2000      	movs	r0, #0
 80017e0:	e7ea      	b.n	80017b8 <_swistat+0x18>

080017e2 <_fstat>:
 80017e2:	460b      	mov	r3, r1
 80017e4:	b510      	push	{r4, lr}
 80017e6:	2100      	movs	r1, #0
 80017e8:	4604      	mov	r4, r0
 80017ea:	2258      	movs	r2, #88	@ 0x58
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 fb9d 	bl	8001f2c <memset>
 80017f2:	4601      	mov	r1, r0
 80017f4:	4620      	mov	r0, r4
 80017f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017fa:	f7ff bfd1 	b.w	80017a0 <_swistat>

080017fe <_stat>:
 80017fe:	b538      	push	{r3, r4, r5, lr}
 8001800:	460d      	mov	r5, r1
 8001802:	4604      	mov	r4, r0
 8001804:	2258      	movs	r2, #88	@ 0x58
 8001806:	2100      	movs	r1, #0
 8001808:	4628      	mov	r0, r5
 800180a:	f000 fb8f 	bl	8001f2c <memset>
 800180e:	4620      	mov	r0, r4
 8001810:	2100      	movs	r1, #0
 8001812:	f000 f811 	bl	8001838 <_swiopen>
 8001816:	1c43      	adds	r3, r0, #1
 8001818:	4604      	mov	r4, r0
 800181a:	d00b      	beq.n	8001834 <_stat+0x36>
 800181c:	686b      	ldr	r3, [r5, #4]
 800181e:	4629      	mov	r1, r5
 8001820:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8001824:	606b      	str	r3, [r5, #4]
 8001826:	f7ff ffbb 	bl	80017a0 <_swistat>
 800182a:	4605      	mov	r5, r0
 800182c:	4620      	mov	r0, r4
 800182e:	f7ff ff95 	bl	800175c <_close>
 8001832:	462c      	mov	r4, r5
 8001834:	4620      	mov	r0, r4
 8001836:	bd38      	pop	{r3, r4, r5, pc}

08001838 <_swiopen>:
 8001838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800183c:	4682      	mov	sl, r0
 800183e:	460e      	mov	r6, r1
 8001840:	2400      	movs	r4, #0
 8001842:	4f28      	ldr	r7, [pc, #160]	@ (80018e4 <_swiopen+0xac>)
 8001844:	b096      	sub	sp, #88	@ 0x58
 8001846:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800184a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800184e:	3301      	adds	r3, #1
 8001850:	d00c      	beq.n	800186c <_swiopen+0x34>
 8001852:	3401      	adds	r4, #1
 8001854:	2c14      	cmp	r4, #20
 8001856:	d1f6      	bne.n	8001846 <_swiopen+0xe>
 8001858:	f000 fbb6 	bl	8001fc8 <__errno>
 800185c:	2318      	movs	r3, #24
 800185e:	f04f 34ff 	mov.w	r4, #4294967295
 8001862:	6003      	str	r3, [r0, #0]
 8001864:	4620      	mov	r0, r4
 8001866:	b016      	add	sp, #88	@ 0x58
 8001868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800186c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8001870:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8001874:	46e9      	mov	r9, sp
 8001876:	d109      	bne.n	800188c <_swiopen+0x54>
 8001878:	4649      	mov	r1, r9
 800187a:	4650      	mov	r0, sl
 800187c:	f7ff ffbf 	bl	80017fe <_stat>
 8001880:	3001      	adds	r0, #1
 8001882:	d003      	beq.n	800188c <_swiopen+0x54>
 8001884:	f000 fba0 	bl	8001fc8 <__errno>
 8001888:	2311      	movs	r3, #17
 800188a:	e7e8      	b.n	800185e <_swiopen+0x26>
 800188c:	f240 6301 	movw	r3, #1537	@ 0x601
 8001890:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8001894:	07b2      	lsls	r2, r6, #30
 8001896:	bf48      	it	mi
 8001898:	f045 0502 	orrmi.w	r5, r5, #2
 800189c:	421e      	tst	r6, r3
 800189e:	bf18      	it	ne
 80018a0:	f045 0504 	orrne.w	r5, r5, #4
 80018a4:	0733      	lsls	r3, r6, #28
 80018a6:	bf48      	it	mi
 80018a8:	f025 0504 	bicmi.w	r5, r5, #4
 80018ac:	4650      	mov	r0, sl
 80018ae:	bf48      	it	mi
 80018b0:	f045 0508 	orrmi.w	r5, r5, #8
 80018b4:	f8cd a000 	str.w	sl, [sp]
 80018b8:	f7fe fc48 	bl	800014c <strlen>
 80018bc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80018c0:	2501      	movs	r5, #1
 80018c2:	4628      	mov	r0, r5
 80018c4:	4649      	mov	r1, r9
 80018c6:	beab      	bkpt	0x00ab
 80018c8:	4605      	mov	r5, r0
 80018ca:	2d00      	cmp	r5, #0
 80018cc:	db05      	blt.n	80018da <_swiopen+0xa2>
 80018ce:	2300      	movs	r3, #0
 80018d0:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 80018d4:	4447      	add	r7, r8
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	e7c4      	b.n	8001864 <_swiopen+0x2c>
 80018da:	4628      	mov	r0, r5
 80018dc:	f7ff fe86 	bl	80015ec <error>
 80018e0:	4604      	mov	r4, r0
 80018e2:	e7bf      	b.n	8001864 <_swiopen+0x2c>
 80018e4:	200000e8 	.word	0x200000e8

080018e8 <_get_semihosting_exts>:
 80018e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80018ec:	4606      	mov	r6, r0
 80018ee:	460f      	mov	r7, r1
 80018f0:	4829      	ldr	r0, [pc, #164]	@ (8001998 <_get_semihosting_exts+0xb0>)
 80018f2:	2100      	movs	r1, #0
 80018f4:	4615      	mov	r5, r2
 80018f6:	f7ff ff9f 	bl	8001838 <_swiopen>
 80018fa:	4604      	mov	r4, r0
 80018fc:	462a      	mov	r2, r5
 80018fe:	2100      	movs	r1, #0
 8001900:	4630      	mov	r0, r6
 8001902:	f000 fb13 	bl	8001f2c <memset>
 8001906:	1c63      	adds	r3, r4, #1
 8001908:	d014      	beq.n	8001934 <_get_semihosting_exts+0x4c>
 800190a:	4620      	mov	r0, r4
 800190c:	f7ff fe54 	bl	80015b8 <findslot>
 8001910:	f04f 080c 	mov.w	r8, #12
 8001914:	4681      	mov	r9, r0
 8001916:	4640      	mov	r0, r8
 8001918:	4649      	mov	r1, r9
 800191a:	beab      	bkpt	0x00ab
 800191c:	4680      	mov	r8, r0
 800191e:	4640      	mov	r0, r8
 8001920:	f7ff fe72 	bl	8001608 <checkerror>
 8001924:	2803      	cmp	r0, #3
 8001926:	dd02      	ble.n	800192e <_get_semihosting_exts+0x46>
 8001928:	1ec3      	subs	r3, r0, #3
 800192a:	42ab      	cmp	r3, r5
 800192c:	dc07      	bgt.n	800193e <_get_semihosting_exts+0x56>
 800192e:	4620      	mov	r0, r4
 8001930:	f7ff ff14 	bl	800175c <_close>
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	b003      	add	sp, #12
 800193a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800193e:	2204      	movs	r2, #4
 8001940:	4620      	mov	r0, r4
 8001942:	eb0d 0102 	add.w	r1, sp, r2
 8001946:	f7ff fe74 	bl	8001632 <_read>
 800194a:	2803      	cmp	r0, #3
 800194c:	ddef      	ble.n	800192e <_get_semihosting_exts+0x46>
 800194e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001952:	2b53      	cmp	r3, #83	@ 0x53
 8001954:	d1eb      	bne.n	800192e <_get_semihosting_exts+0x46>
 8001956:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800195a:	2b48      	cmp	r3, #72	@ 0x48
 800195c:	d1e7      	bne.n	800192e <_get_semihosting_exts+0x46>
 800195e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001962:	2b46      	cmp	r3, #70	@ 0x46
 8001964:	d1e3      	bne.n	800192e <_get_semihosting_exts+0x46>
 8001966:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800196a:	2b42      	cmp	r3, #66	@ 0x42
 800196c:	d1df      	bne.n	800192e <_get_semihosting_exts+0x46>
 800196e:	2201      	movs	r2, #1
 8001970:	4639      	mov	r1, r7
 8001972:	4620      	mov	r0, r4
 8001974:	f7ff fe77 	bl	8001666 <_swilseek>
 8001978:	2800      	cmp	r0, #0
 800197a:	dbd8      	blt.n	800192e <_get_semihosting_exts+0x46>
 800197c:	462a      	mov	r2, r5
 800197e:	4631      	mov	r1, r6
 8001980:	4620      	mov	r0, r4
 8001982:	f7ff fe56 	bl	8001632 <_read>
 8001986:	4605      	mov	r5, r0
 8001988:	4620      	mov	r0, r4
 800198a:	f7ff fee7 	bl	800175c <_close>
 800198e:	4628      	mov	r0, r5
 8001990:	f7ff fe3a 	bl	8001608 <checkerror>
 8001994:	e7d0      	b.n	8001938 <_get_semihosting_exts+0x50>
 8001996:	bf00      	nop
 8001998:	08003672 	.word	0x08003672

0800199c <initialise_semihosting_exts>:
 800199c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800199e:	2100      	movs	r1, #0
 80019a0:	2201      	movs	r2, #1
 80019a2:	4d09      	ldr	r5, [pc, #36]	@ (80019c8 <initialise_semihosting_exts+0x2c>)
 80019a4:	4c09      	ldr	r4, [pc, #36]	@ (80019cc <initialise_semihosting_exts+0x30>)
 80019a6:	a801      	add	r0, sp, #4
 80019a8:	6029      	str	r1, [r5, #0]
 80019aa:	6022      	str	r2, [r4, #0]
 80019ac:	f7ff ff9c 	bl	80018e8 <_get_semihosting_exts>
 80019b0:	2800      	cmp	r0, #0
 80019b2:	dd07      	ble.n	80019c4 <initialise_semihosting_exts+0x28>
 80019b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80019b8:	f003 0201 	and.w	r2, r3, #1
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	602a      	str	r2, [r5, #0]
 80019c2:	6023      	str	r3, [r4, #0]
 80019c4:	b003      	add	sp, #12
 80019c6:	bd30      	pop	{r4, r5, pc}
 80019c8:	20000010 	.word	0x20000010
 80019cc:	2000000c 	.word	0x2000000c

080019d0 <_has_ext_stdout_stderr>:
 80019d0:	b510      	push	{r4, lr}
 80019d2:	4c04      	ldr	r4, [pc, #16]	@ (80019e4 <_has_ext_stdout_stderr+0x14>)
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da01      	bge.n	80019de <_has_ext_stdout_stderr+0xe>
 80019da:	f7ff ffdf 	bl	800199c <initialise_semihosting_exts>
 80019de:	6820      	ldr	r0, [r4, #0]
 80019e0:	bd10      	pop	{r4, pc}
 80019e2:	bf00      	nop
 80019e4:	2000000c 	.word	0x2000000c

080019e8 <initialise_monitor_handles>:
 80019e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019ec:	2303      	movs	r3, #3
 80019ee:	2400      	movs	r4, #0
 80019f0:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8001a94 <initialise_monitor_handles+0xac>
 80019f4:	b085      	sub	sp, #20
 80019f6:	f8cd 9004 	str.w	r9, [sp, #4]
 80019fa:	af01      	add	r7, sp, #4
 80019fc:	9303      	str	r3, [sp, #12]
 80019fe:	2501      	movs	r5, #1
 8001a00:	9402      	str	r4, [sp, #8]
 8001a02:	4628      	mov	r0, r5
 8001a04:	4639      	mov	r1, r7
 8001a06:	beab      	bkpt	0x00ab
 8001a08:	4605      	mov	r5, r0
 8001a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0e:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8001a98 <initialise_monitor_handles+0xb0>
 8001a12:	4623      	mov	r3, r4
 8001a14:	4c21      	ldr	r4, [pc, #132]	@ (8001a9c <initialise_monitor_handles+0xb4>)
 8001a16:	f8c8 5000 	str.w	r5, [r8]
 8001a1a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	2b14      	cmp	r3, #20
 8001a22:	d1fa      	bne.n	8001a1a <initialise_monitor_handles+0x32>
 8001a24:	f7ff ffd4 	bl	80019d0 <_has_ext_stdout_stderr>
 8001a28:	4d1d      	ldr	r5, [pc, #116]	@ (8001aa0 <initialise_monitor_handles+0xb8>)
 8001a2a:	b1d0      	cbz	r0, 8001a62 <initialise_monitor_handles+0x7a>
 8001a2c:	f04f 0a03 	mov.w	sl, #3
 8001a30:	2304      	movs	r3, #4
 8001a32:	f8cd 9004 	str.w	r9, [sp, #4]
 8001a36:	2601      	movs	r6, #1
 8001a38:	f8cd a00c 	str.w	sl, [sp, #12]
 8001a3c:	9302      	str	r3, [sp, #8]
 8001a3e:	4630      	mov	r0, r6
 8001a40:	4639      	mov	r1, r7
 8001a42:	beab      	bkpt	0x00ab
 8001a44:	4683      	mov	fp, r0
 8001a46:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <initialise_monitor_handles+0xbc>)
 8001a48:	f8cd 9004 	str.w	r9, [sp, #4]
 8001a4c:	f8c3 b000 	str.w	fp, [r3]
 8001a50:	2308      	movs	r3, #8
 8001a52:	f8cd a00c 	str.w	sl, [sp, #12]
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	4630      	mov	r0, r6
 8001a5a:	4639      	mov	r1, r7
 8001a5c:	beab      	bkpt	0x00ab
 8001a5e:	4606      	mov	r6, r0
 8001a60:	602e      	str	r6, [r5, #0]
 8001a62:	2600      	movs	r6, #0
 8001a64:	682b      	ldr	r3, [r5, #0]
 8001a66:	6066      	str	r6, [r4, #4]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	bf02      	ittt	eq
 8001a6c:	4b0d      	ldreq	r3, [pc, #52]	@ (8001aa4 <initialise_monitor_handles+0xbc>)
 8001a6e:	681b      	ldreq	r3, [r3, #0]
 8001a70:	602b      	streq	r3, [r5, #0]
 8001a72:	f8d8 3000 	ldr.w	r3, [r8]
 8001a76:	6023      	str	r3, [r4, #0]
 8001a78:	f7ff ffaa 	bl	80019d0 <_has_ext_stdout_stderr>
 8001a7c:	b130      	cbz	r0, 8001a8c <initialise_monitor_handles+0xa4>
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <initialise_monitor_handles+0xbc>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8001a86:	682b      	ldr	r3, [r5, #0]
 8001a88:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001a8c:	b005      	add	sp, #20
 8001a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a92:	bf00      	nop
 8001a94:	08003688 	.word	0x08003688
 8001a98:	200000e4 	.word	0x200000e4
 8001a9c:	200000e8 	.word	0x200000e8
 8001aa0:	200000dc 	.word	0x200000dc
 8001aa4:	200000e0 	.word	0x200000e0

08001aa8 <_isatty>:
 8001aa8:	b570      	push	{r4, r5, r6, lr}
 8001aaa:	f7ff fd85 	bl	80015b8 <findslot>
 8001aae:	2409      	movs	r4, #9
 8001ab0:	4605      	mov	r5, r0
 8001ab2:	b920      	cbnz	r0, 8001abe <_isatty+0x16>
 8001ab4:	f000 fa88 	bl	8001fc8 <__errno>
 8001ab8:	6004      	str	r4, [r0, #0]
 8001aba:	2000      	movs	r0, #0
 8001abc:	bd70      	pop	{r4, r5, r6, pc}
 8001abe:	4620      	mov	r0, r4
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	beab      	bkpt	0x00ab
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	2c01      	cmp	r4, #1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	d0f7      	beq.n	8001abc <_isatty+0x14>
 8001acc:	f000 fa7c 	bl	8001fc8 <__errno>
 8001ad0:	2513      	movs	r5, #19
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	2600      	movs	r6, #0
 8001ad6:	4628      	mov	r0, r5
 8001ad8:	4631      	mov	r1, r6
 8001ada:	beab      	bkpt	0x00ab
 8001adc:	4605      	mov	r5, r0
 8001ade:	6025      	str	r5, [r4, #0]
 8001ae0:	e7eb      	b.n	8001aba <_isatty+0x12>
	...

08001ae4 <std>:
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	b510      	push	{r4, lr}
 8001ae8:	4604      	mov	r4, r0
 8001aea:	e9c0 3300 	strd	r3, r3, [r0]
 8001aee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001af2:	6083      	str	r3, [r0, #8]
 8001af4:	8181      	strh	r1, [r0, #12]
 8001af6:	6643      	str	r3, [r0, #100]	@ 0x64
 8001af8:	81c2      	strh	r2, [r0, #14]
 8001afa:	6183      	str	r3, [r0, #24]
 8001afc:	4619      	mov	r1, r3
 8001afe:	2208      	movs	r2, #8
 8001b00:	305c      	adds	r0, #92	@ 0x5c
 8001b02:	f000 fa13 	bl	8001f2c <memset>
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <std+0x58>)
 8001b08:	6224      	str	r4, [r4, #32]
 8001b0a:	6263      	str	r3, [r4, #36]	@ 0x24
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <std+0x5c>)
 8001b0e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001b10:	4b0c      	ldr	r3, [pc, #48]	@ (8001b44 <std+0x60>)
 8001b12:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001b14:	4b0c      	ldr	r3, [pc, #48]	@ (8001b48 <std+0x64>)
 8001b16:	6323      	str	r3, [r4, #48]	@ 0x30
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <std+0x68>)
 8001b1a:	429c      	cmp	r4, r3
 8001b1c:	d006      	beq.n	8001b2c <std+0x48>
 8001b1e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001b22:	4294      	cmp	r4, r2
 8001b24:	d002      	beq.n	8001b2c <std+0x48>
 8001b26:	33d0      	adds	r3, #208	@ 0xd0
 8001b28:	429c      	cmp	r4, r3
 8001b2a:	d105      	bne.n	8001b38 <std+0x54>
 8001b2c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b34:	f000 ba72 	b.w	800201c <__retarget_lock_init_recursive>
 8001b38:	bd10      	pop	{r4, pc}
 8001b3a:	bf00      	nop
 8001b3c:	08001d7d 	.word	0x08001d7d
 8001b40:	08001d9f 	.word	0x08001d9f
 8001b44:	08001dd7 	.word	0x08001dd7
 8001b48:	08001dfb 	.word	0x08001dfb
 8001b4c:	20000188 	.word	0x20000188

08001b50 <stdio_exit_handler>:
 8001b50:	4a02      	ldr	r2, [pc, #8]	@ (8001b5c <stdio_exit_handler+0xc>)
 8001b52:	4903      	ldr	r1, [pc, #12]	@ (8001b60 <stdio_exit_handler+0x10>)
 8001b54:	4803      	ldr	r0, [pc, #12]	@ (8001b64 <stdio_exit_handler+0x14>)
 8001b56:	f000 b869 	b.w	8001c2c <_fwalk_sglue>
 8001b5a:	bf00      	nop
 8001b5c:	20000014 	.word	0x20000014
 8001b60:	08002ead 	.word	0x08002ead
 8001b64:	20000024 	.word	0x20000024

08001b68 <cleanup_stdio>:
 8001b68:	6841      	ldr	r1, [r0, #4]
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b9c <cleanup_stdio+0x34>)
 8001b6c:	b510      	push	{r4, lr}
 8001b6e:	4299      	cmp	r1, r3
 8001b70:	4604      	mov	r4, r0
 8001b72:	d001      	beq.n	8001b78 <cleanup_stdio+0x10>
 8001b74:	f001 f99a 	bl	8002eac <_fflush_r>
 8001b78:	68a1      	ldr	r1, [r4, #8]
 8001b7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ba0 <cleanup_stdio+0x38>)
 8001b7c:	4299      	cmp	r1, r3
 8001b7e:	d002      	beq.n	8001b86 <cleanup_stdio+0x1e>
 8001b80:	4620      	mov	r0, r4
 8001b82:	f001 f993 	bl	8002eac <_fflush_r>
 8001b86:	68e1      	ldr	r1, [r4, #12]
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <cleanup_stdio+0x3c>)
 8001b8a:	4299      	cmp	r1, r3
 8001b8c:	d004      	beq.n	8001b98 <cleanup_stdio+0x30>
 8001b8e:	4620      	mov	r0, r4
 8001b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b94:	f001 b98a 	b.w	8002eac <_fflush_r>
 8001b98:	bd10      	pop	{r4, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000188 	.word	0x20000188
 8001ba0:	200001f0 	.word	0x200001f0
 8001ba4:	20000258 	.word	0x20000258

08001ba8 <global_stdio_init.part.0>:
 8001ba8:	b510      	push	{r4, lr}
 8001baa:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd8 <global_stdio_init.part.0+0x30>)
 8001bac:	4c0b      	ldr	r4, [pc, #44]	@ (8001bdc <global_stdio_init.part.0+0x34>)
 8001bae:	4a0c      	ldr	r2, [pc, #48]	@ (8001be0 <global_stdio_init.part.0+0x38>)
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	2104      	movs	r1, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f7ff ff94 	bl	8001ae4 <std>
 8001bbc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2109      	movs	r1, #9
 8001bc4:	f7ff ff8e 	bl	8001ae4 <std>
 8001bc8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001bcc:	2202      	movs	r2, #2
 8001bce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bd2:	2112      	movs	r1, #18
 8001bd4:	f7ff bf86 	b.w	8001ae4 <std>
 8001bd8:	200002c0 	.word	0x200002c0
 8001bdc:	20000188 	.word	0x20000188
 8001be0:	08001b51 	.word	0x08001b51

08001be4 <__sfp_lock_acquire>:
 8001be4:	4801      	ldr	r0, [pc, #4]	@ (8001bec <__sfp_lock_acquire+0x8>)
 8001be6:	f000 ba1a 	b.w	800201e <__retarget_lock_acquire_recursive>
 8001bea:	bf00      	nop
 8001bec:	200002c9 	.word	0x200002c9

08001bf0 <__sfp_lock_release>:
 8001bf0:	4801      	ldr	r0, [pc, #4]	@ (8001bf8 <__sfp_lock_release+0x8>)
 8001bf2:	f000 ba15 	b.w	8002020 <__retarget_lock_release_recursive>
 8001bf6:	bf00      	nop
 8001bf8:	200002c9 	.word	0x200002c9

08001bfc <__sinit>:
 8001bfc:	b510      	push	{r4, lr}
 8001bfe:	4604      	mov	r4, r0
 8001c00:	f7ff fff0 	bl	8001be4 <__sfp_lock_acquire>
 8001c04:	6a23      	ldr	r3, [r4, #32]
 8001c06:	b11b      	cbz	r3, 8001c10 <__sinit+0x14>
 8001c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c0c:	f7ff bff0 	b.w	8001bf0 <__sfp_lock_release>
 8001c10:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <__sinit+0x28>)
 8001c12:	6223      	str	r3, [r4, #32]
 8001c14:	4b04      	ldr	r3, [pc, #16]	@ (8001c28 <__sinit+0x2c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f5      	bne.n	8001c08 <__sinit+0xc>
 8001c1c:	f7ff ffc4 	bl	8001ba8 <global_stdio_init.part.0>
 8001c20:	e7f2      	b.n	8001c08 <__sinit+0xc>
 8001c22:	bf00      	nop
 8001c24:	08001b69 	.word	0x08001b69
 8001c28:	200002c0 	.word	0x200002c0

08001c2c <_fwalk_sglue>:
 8001c2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c30:	4607      	mov	r7, r0
 8001c32:	4688      	mov	r8, r1
 8001c34:	4614      	mov	r4, r2
 8001c36:	2600      	movs	r6, #0
 8001c38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001c3c:	f1b9 0901 	subs.w	r9, r9, #1
 8001c40:	d505      	bpl.n	8001c4e <_fwalk_sglue+0x22>
 8001c42:	6824      	ldr	r4, [r4, #0]
 8001c44:	2c00      	cmp	r4, #0
 8001c46:	d1f7      	bne.n	8001c38 <_fwalk_sglue+0xc>
 8001c48:	4630      	mov	r0, r6
 8001c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c4e:	89ab      	ldrh	r3, [r5, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d907      	bls.n	8001c64 <_fwalk_sglue+0x38>
 8001c54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	d003      	beq.n	8001c64 <_fwalk_sglue+0x38>
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	4638      	mov	r0, r7
 8001c60:	47c0      	blx	r8
 8001c62:	4306      	orrs	r6, r0
 8001c64:	3568      	adds	r5, #104	@ 0x68
 8001c66:	e7e9      	b.n	8001c3c <_fwalk_sglue+0x10>

08001c68 <iprintf>:
 8001c68:	b40f      	push	{r0, r1, r2, r3}
 8001c6a:	b507      	push	{r0, r1, r2, lr}
 8001c6c:	4906      	ldr	r1, [pc, #24]	@ (8001c88 <iprintf+0x20>)
 8001c6e:	ab04      	add	r3, sp, #16
 8001c70:	6808      	ldr	r0, [r1, #0]
 8001c72:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c76:	6881      	ldr	r1, [r0, #8]
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	f000 faf1 	bl	8002260 <_vfiprintf_r>
 8001c7e:	b003      	add	sp, #12
 8001c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c84:	b004      	add	sp, #16
 8001c86:	4770      	bx	lr
 8001c88:	20000020 	.word	0x20000020

08001c8c <putchar>:
 8001c8c:	4b02      	ldr	r3, [pc, #8]	@ (8001c98 <putchar+0xc>)
 8001c8e:	4601      	mov	r1, r0
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	6882      	ldr	r2, [r0, #8]
 8001c94:	f001 b993 	b.w	8002fbe <_putc_r>
 8001c98:	20000020 	.word	0x20000020

08001c9c <_puts_r>:
 8001c9c:	6a03      	ldr	r3, [r0, #32]
 8001c9e:	b570      	push	{r4, r5, r6, lr}
 8001ca0:	4605      	mov	r5, r0
 8001ca2:	460e      	mov	r6, r1
 8001ca4:	6884      	ldr	r4, [r0, #8]
 8001ca6:	b90b      	cbnz	r3, 8001cac <_puts_r+0x10>
 8001ca8:	f7ff ffa8 	bl	8001bfc <__sinit>
 8001cac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001cae:	07db      	lsls	r3, r3, #31
 8001cb0:	d405      	bmi.n	8001cbe <_puts_r+0x22>
 8001cb2:	89a3      	ldrh	r3, [r4, #12]
 8001cb4:	0598      	lsls	r0, r3, #22
 8001cb6:	d402      	bmi.n	8001cbe <_puts_r+0x22>
 8001cb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001cba:	f000 f9b0 	bl	800201e <__retarget_lock_acquire_recursive>
 8001cbe:	89a3      	ldrh	r3, [r4, #12]
 8001cc0:	0719      	lsls	r1, r3, #28
 8001cc2:	d502      	bpl.n	8001cca <_puts_r+0x2e>
 8001cc4:	6923      	ldr	r3, [r4, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d135      	bne.n	8001d36 <_puts_r+0x9a>
 8001cca:	4621      	mov	r1, r4
 8001ccc:	4628      	mov	r0, r5
 8001cce:	f000 f8d7 	bl	8001e80 <__swsetup_r>
 8001cd2:	b380      	cbz	r0, 8001d36 <_puts_r+0x9a>
 8001cd4:	f04f 35ff 	mov.w	r5, #4294967295
 8001cd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001cda:	07da      	lsls	r2, r3, #31
 8001cdc:	d405      	bmi.n	8001cea <_puts_r+0x4e>
 8001cde:	89a3      	ldrh	r3, [r4, #12]
 8001ce0:	059b      	lsls	r3, r3, #22
 8001ce2:	d402      	bmi.n	8001cea <_puts_r+0x4e>
 8001ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ce6:	f000 f99b 	bl	8002020 <__retarget_lock_release_recursive>
 8001cea:	4628      	mov	r0, r5
 8001cec:	bd70      	pop	{r4, r5, r6, pc}
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	da04      	bge.n	8001cfc <_puts_r+0x60>
 8001cf2:	69a2      	ldr	r2, [r4, #24]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	dc17      	bgt.n	8001d28 <_puts_r+0x8c>
 8001cf8:	290a      	cmp	r1, #10
 8001cfa:	d015      	beq.n	8001d28 <_puts_r+0x8c>
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	6022      	str	r2, [r4, #0]
 8001d02:	7019      	strb	r1, [r3, #0]
 8001d04:	68a3      	ldr	r3, [r4, #8]
 8001d06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	60a3      	str	r3, [r4, #8]
 8001d0e:	2900      	cmp	r1, #0
 8001d10:	d1ed      	bne.n	8001cee <_puts_r+0x52>
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	da11      	bge.n	8001d3a <_puts_r+0x9e>
 8001d16:	4622      	mov	r2, r4
 8001d18:	210a      	movs	r1, #10
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	f000 f871 	bl	8001e02 <__swbuf_r>
 8001d20:	3001      	adds	r0, #1
 8001d22:	d0d7      	beq.n	8001cd4 <_puts_r+0x38>
 8001d24:	250a      	movs	r5, #10
 8001d26:	e7d7      	b.n	8001cd8 <_puts_r+0x3c>
 8001d28:	4622      	mov	r2, r4
 8001d2a:	4628      	mov	r0, r5
 8001d2c:	f000 f869 	bl	8001e02 <__swbuf_r>
 8001d30:	3001      	adds	r0, #1
 8001d32:	d1e7      	bne.n	8001d04 <_puts_r+0x68>
 8001d34:	e7ce      	b.n	8001cd4 <_puts_r+0x38>
 8001d36:	3e01      	subs	r6, #1
 8001d38:	e7e4      	b.n	8001d04 <_puts_r+0x68>
 8001d3a:	6823      	ldr	r3, [r4, #0]
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	6022      	str	r2, [r4, #0]
 8001d40:	220a      	movs	r2, #10
 8001d42:	701a      	strb	r2, [r3, #0]
 8001d44:	e7ee      	b.n	8001d24 <_puts_r+0x88>
	...

08001d48 <puts>:
 8001d48:	4b02      	ldr	r3, [pc, #8]	@ (8001d54 <puts+0xc>)
 8001d4a:	4601      	mov	r1, r0
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	f7ff bfa5 	b.w	8001c9c <_puts_r>
 8001d52:	bf00      	nop
 8001d54:	20000020 	.word	0x20000020

08001d58 <iscanf>:
 8001d58:	b40f      	push	{r0, r1, r2, r3}
 8001d5a:	b507      	push	{r0, r1, r2, lr}
 8001d5c:	4906      	ldr	r1, [pc, #24]	@ (8001d78 <iscanf+0x20>)
 8001d5e:	ab04      	add	r3, sp, #16
 8001d60:	6808      	ldr	r0, [r1, #0]
 8001d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d66:	6841      	ldr	r1, [r0, #4]
 8001d68:	9301      	str	r3, [sp, #4]
 8001d6a:	f000 febf 	bl	8002aec <_vfiscanf_r>
 8001d6e:	b003      	add	sp, #12
 8001d70:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d74:	b004      	add	sp, #16
 8001d76:	4770      	bx	lr
 8001d78:	20000020 	.word	0x20000020

08001d7c <__sread>:
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	460c      	mov	r4, r1
 8001d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d84:	f000 f8fc 	bl	8001f80 <_read_r>
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	bfab      	itete	ge
 8001d8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8001d90:	181b      	addge	r3, r3, r0
 8001d92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001d96:	bfac      	ite	ge
 8001d98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001d9a:	81a3      	strhlt	r3, [r4, #12]
 8001d9c:	bd10      	pop	{r4, pc}

08001d9e <__swrite>:
 8001d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001da2:	461f      	mov	r7, r3
 8001da4:	898b      	ldrh	r3, [r1, #12]
 8001da6:	4605      	mov	r5, r0
 8001da8:	05db      	lsls	r3, r3, #23
 8001daa:	460c      	mov	r4, r1
 8001dac:	4616      	mov	r6, r2
 8001dae:	d505      	bpl.n	8001dbc <__swrite+0x1e>
 8001db0:	2302      	movs	r3, #2
 8001db2:	2200      	movs	r2, #0
 8001db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001db8:	f000 f8d0 	bl	8001f5c <_lseek_r>
 8001dbc:	89a3      	ldrh	r3, [r4, #12]
 8001dbe:	4632      	mov	r2, r6
 8001dc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dc4:	81a3      	strh	r3, [r4, #12]
 8001dc6:	4628      	mov	r0, r5
 8001dc8:	463b      	mov	r3, r7
 8001dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dd2:	f000 b8e7 	b.w	8001fa4 <_write_r>

08001dd6 <__sseek>:
 8001dd6:	b510      	push	{r4, lr}
 8001dd8:	460c      	mov	r4, r1
 8001dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dde:	f000 f8bd 	bl	8001f5c <_lseek_r>
 8001de2:	1c43      	adds	r3, r0, #1
 8001de4:	89a3      	ldrh	r3, [r4, #12]
 8001de6:	bf15      	itete	ne
 8001de8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001dea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001dee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001df2:	81a3      	strheq	r3, [r4, #12]
 8001df4:	bf18      	it	ne
 8001df6:	81a3      	strhne	r3, [r4, #12]
 8001df8:	bd10      	pop	{r4, pc}

08001dfa <__sclose>:
 8001dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dfe:	f000 b89d 	b.w	8001f3c <_close_r>

08001e02 <__swbuf_r>:
 8001e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e04:	460e      	mov	r6, r1
 8001e06:	4614      	mov	r4, r2
 8001e08:	4605      	mov	r5, r0
 8001e0a:	b118      	cbz	r0, 8001e14 <__swbuf_r+0x12>
 8001e0c:	6a03      	ldr	r3, [r0, #32]
 8001e0e:	b90b      	cbnz	r3, 8001e14 <__swbuf_r+0x12>
 8001e10:	f7ff fef4 	bl	8001bfc <__sinit>
 8001e14:	69a3      	ldr	r3, [r4, #24]
 8001e16:	60a3      	str	r3, [r4, #8]
 8001e18:	89a3      	ldrh	r3, [r4, #12]
 8001e1a:	071a      	lsls	r2, r3, #28
 8001e1c:	d501      	bpl.n	8001e22 <__swbuf_r+0x20>
 8001e1e:	6923      	ldr	r3, [r4, #16]
 8001e20:	b943      	cbnz	r3, 8001e34 <__swbuf_r+0x32>
 8001e22:	4621      	mov	r1, r4
 8001e24:	4628      	mov	r0, r5
 8001e26:	f000 f82b 	bl	8001e80 <__swsetup_r>
 8001e2a:	b118      	cbz	r0, 8001e34 <__swbuf_r+0x32>
 8001e2c:	f04f 37ff 	mov.w	r7, #4294967295
 8001e30:	4638      	mov	r0, r7
 8001e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e34:	6823      	ldr	r3, [r4, #0]
 8001e36:	6922      	ldr	r2, [r4, #16]
 8001e38:	b2f6      	uxtb	r6, r6
 8001e3a:	1a98      	subs	r0, r3, r2
 8001e3c:	6963      	ldr	r3, [r4, #20]
 8001e3e:	4637      	mov	r7, r6
 8001e40:	4283      	cmp	r3, r0
 8001e42:	dc05      	bgt.n	8001e50 <__swbuf_r+0x4e>
 8001e44:	4621      	mov	r1, r4
 8001e46:	4628      	mov	r0, r5
 8001e48:	f001 f830 	bl	8002eac <_fflush_r>
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d1ed      	bne.n	8001e2c <__swbuf_r+0x2a>
 8001e50:	68a3      	ldr	r3, [r4, #8]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	60a3      	str	r3, [r4, #8]
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	6022      	str	r2, [r4, #0]
 8001e5c:	701e      	strb	r6, [r3, #0]
 8001e5e:	6962      	ldr	r2, [r4, #20]
 8001e60:	1c43      	adds	r3, r0, #1
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d004      	beq.n	8001e70 <__swbuf_r+0x6e>
 8001e66:	89a3      	ldrh	r3, [r4, #12]
 8001e68:	07db      	lsls	r3, r3, #31
 8001e6a:	d5e1      	bpl.n	8001e30 <__swbuf_r+0x2e>
 8001e6c:	2e0a      	cmp	r6, #10
 8001e6e:	d1df      	bne.n	8001e30 <__swbuf_r+0x2e>
 8001e70:	4621      	mov	r1, r4
 8001e72:	4628      	mov	r0, r5
 8001e74:	f001 f81a 	bl	8002eac <_fflush_r>
 8001e78:	2800      	cmp	r0, #0
 8001e7a:	d0d9      	beq.n	8001e30 <__swbuf_r+0x2e>
 8001e7c:	e7d6      	b.n	8001e2c <__swbuf_r+0x2a>
	...

08001e80 <__swsetup_r>:
 8001e80:	b538      	push	{r3, r4, r5, lr}
 8001e82:	4b29      	ldr	r3, [pc, #164]	@ (8001f28 <__swsetup_r+0xa8>)
 8001e84:	4605      	mov	r5, r0
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	460c      	mov	r4, r1
 8001e8a:	b118      	cbz	r0, 8001e94 <__swsetup_r+0x14>
 8001e8c:	6a03      	ldr	r3, [r0, #32]
 8001e8e:	b90b      	cbnz	r3, 8001e94 <__swsetup_r+0x14>
 8001e90:	f7ff feb4 	bl	8001bfc <__sinit>
 8001e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e98:	0719      	lsls	r1, r3, #28
 8001e9a:	d422      	bmi.n	8001ee2 <__swsetup_r+0x62>
 8001e9c:	06da      	lsls	r2, r3, #27
 8001e9e:	d407      	bmi.n	8001eb0 <__swsetup_r+0x30>
 8001ea0:	2209      	movs	r2, #9
 8001ea2:	602a      	str	r2, [r5, #0]
 8001ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eac:	81a3      	strh	r3, [r4, #12]
 8001eae:	e033      	b.n	8001f18 <__swsetup_r+0x98>
 8001eb0:	0758      	lsls	r0, r3, #29
 8001eb2:	d512      	bpl.n	8001eda <__swsetup_r+0x5a>
 8001eb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001eb6:	b141      	cbz	r1, 8001eca <__swsetup_r+0x4a>
 8001eb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001ebc:	4299      	cmp	r1, r3
 8001ebe:	d002      	beq.n	8001ec6 <__swsetup_r+0x46>
 8001ec0:	4628      	mov	r0, r5
 8001ec2:	f000 f8af 	bl	8002024 <_free_r>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	6363      	str	r3, [r4, #52]	@ 0x34
 8001eca:	89a3      	ldrh	r3, [r4, #12]
 8001ecc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001ed0:	81a3      	strh	r3, [r4, #12]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	6063      	str	r3, [r4, #4]
 8001ed6:	6923      	ldr	r3, [r4, #16]
 8001ed8:	6023      	str	r3, [r4, #0]
 8001eda:	89a3      	ldrh	r3, [r4, #12]
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	81a3      	strh	r3, [r4, #12]
 8001ee2:	6923      	ldr	r3, [r4, #16]
 8001ee4:	b94b      	cbnz	r3, 8001efa <__swsetup_r+0x7a>
 8001ee6:	89a3      	ldrh	r3, [r4, #12]
 8001ee8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ef0:	d003      	beq.n	8001efa <__swsetup_r+0x7a>
 8001ef2:	4621      	mov	r1, r4
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	f001 f826 	bl	8002f46 <__smakebuf_r>
 8001efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001efe:	f013 0201 	ands.w	r2, r3, #1
 8001f02:	d00a      	beq.n	8001f1a <__swsetup_r+0x9a>
 8001f04:	2200      	movs	r2, #0
 8001f06:	60a2      	str	r2, [r4, #8]
 8001f08:	6962      	ldr	r2, [r4, #20]
 8001f0a:	4252      	negs	r2, r2
 8001f0c:	61a2      	str	r2, [r4, #24]
 8001f0e:	6922      	ldr	r2, [r4, #16]
 8001f10:	b942      	cbnz	r2, 8001f24 <__swsetup_r+0xa4>
 8001f12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001f16:	d1c5      	bne.n	8001ea4 <__swsetup_r+0x24>
 8001f18:	bd38      	pop	{r3, r4, r5, pc}
 8001f1a:	0799      	lsls	r1, r3, #30
 8001f1c:	bf58      	it	pl
 8001f1e:	6962      	ldrpl	r2, [r4, #20]
 8001f20:	60a2      	str	r2, [r4, #8]
 8001f22:	e7f4      	b.n	8001f0e <__swsetup_r+0x8e>
 8001f24:	2000      	movs	r0, #0
 8001f26:	e7f7      	b.n	8001f18 <__swsetup_r+0x98>
 8001f28:	20000020 	.word	0x20000020

08001f2c <memset>:
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4402      	add	r2, r0
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d100      	bne.n	8001f36 <memset+0xa>
 8001f34:	4770      	bx	lr
 8001f36:	f803 1b01 	strb.w	r1, [r3], #1
 8001f3a:	e7f9      	b.n	8001f30 <memset+0x4>

08001f3c <_close_r>:
 8001f3c:	b538      	push	{r3, r4, r5, lr}
 8001f3e:	2300      	movs	r3, #0
 8001f40:	4d05      	ldr	r5, [pc, #20]	@ (8001f58 <_close_r+0x1c>)
 8001f42:	4604      	mov	r4, r0
 8001f44:	4608      	mov	r0, r1
 8001f46:	602b      	str	r3, [r5, #0]
 8001f48:	f7ff fc08 	bl	800175c <_close>
 8001f4c:	1c43      	adds	r3, r0, #1
 8001f4e:	d102      	bne.n	8001f56 <_close_r+0x1a>
 8001f50:	682b      	ldr	r3, [r5, #0]
 8001f52:	b103      	cbz	r3, 8001f56 <_close_r+0x1a>
 8001f54:	6023      	str	r3, [r4, #0]
 8001f56:	bd38      	pop	{r3, r4, r5, pc}
 8001f58:	200002c4 	.word	0x200002c4

08001f5c <_lseek_r>:
 8001f5c:	b538      	push	{r3, r4, r5, lr}
 8001f5e:	4604      	mov	r4, r0
 8001f60:	4608      	mov	r0, r1
 8001f62:	4611      	mov	r1, r2
 8001f64:	2200      	movs	r2, #0
 8001f66:	4d05      	ldr	r5, [pc, #20]	@ (8001f7c <_lseek_r+0x20>)
 8001f68:	602a      	str	r2, [r5, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	f7ff fbb7 	bl	80016de <_lseek>
 8001f70:	1c43      	adds	r3, r0, #1
 8001f72:	d102      	bne.n	8001f7a <_lseek_r+0x1e>
 8001f74:	682b      	ldr	r3, [r5, #0]
 8001f76:	b103      	cbz	r3, 8001f7a <_lseek_r+0x1e>
 8001f78:	6023      	str	r3, [r4, #0]
 8001f7a:	bd38      	pop	{r3, r4, r5, pc}
 8001f7c:	200002c4 	.word	0x200002c4

08001f80 <_read_r>:
 8001f80:	b538      	push	{r3, r4, r5, lr}
 8001f82:	4604      	mov	r4, r0
 8001f84:	4608      	mov	r0, r1
 8001f86:	4611      	mov	r1, r2
 8001f88:	2200      	movs	r2, #0
 8001f8a:	4d05      	ldr	r5, [pc, #20]	@ (8001fa0 <_read_r+0x20>)
 8001f8c:	602a      	str	r2, [r5, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f7ff fb4f 	bl	8001632 <_read>
 8001f94:	1c43      	adds	r3, r0, #1
 8001f96:	d102      	bne.n	8001f9e <_read_r+0x1e>
 8001f98:	682b      	ldr	r3, [r5, #0]
 8001f9a:	b103      	cbz	r3, 8001f9e <_read_r+0x1e>
 8001f9c:	6023      	str	r3, [r4, #0]
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
 8001fa0:	200002c4 	.word	0x200002c4

08001fa4 <_write_r>:
 8001fa4:	b538      	push	{r3, r4, r5, lr}
 8001fa6:	4604      	mov	r4, r0
 8001fa8:	4608      	mov	r0, r1
 8001faa:	4611      	mov	r1, r2
 8001fac:	2200      	movs	r2, #0
 8001fae:	4d05      	ldr	r5, [pc, #20]	@ (8001fc4 <_write_r+0x20>)
 8001fb0:	602a      	str	r2, [r5, #0]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f7ff fba5 	bl	8001702 <_write>
 8001fb8:	1c43      	adds	r3, r0, #1
 8001fba:	d102      	bne.n	8001fc2 <_write_r+0x1e>
 8001fbc:	682b      	ldr	r3, [r5, #0]
 8001fbe:	b103      	cbz	r3, 8001fc2 <_write_r+0x1e>
 8001fc0:	6023      	str	r3, [r4, #0]
 8001fc2:	bd38      	pop	{r3, r4, r5, pc}
 8001fc4:	200002c4 	.word	0x200002c4

08001fc8 <__errno>:
 8001fc8:	4b01      	ldr	r3, [pc, #4]	@ (8001fd0 <__errno+0x8>)
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	20000020 	.word	0x20000020

08001fd4 <__libc_init_array>:
 8001fd4:	b570      	push	{r4, r5, r6, lr}
 8001fd6:	2600      	movs	r6, #0
 8001fd8:	4d0c      	ldr	r5, [pc, #48]	@ (800200c <__libc_init_array+0x38>)
 8001fda:	4c0d      	ldr	r4, [pc, #52]	@ (8002010 <__libc_init_array+0x3c>)
 8001fdc:	1b64      	subs	r4, r4, r5
 8001fde:	10a4      	asrs	r4, r4, #2
 8001fe0:	42a6      	cmp	r6, r4
 8001fe2:	d109      	bne.n	8001ff8 <__libc_init_array+0x24>
 8001fe4:	f001 fb02 	bl	80035ec <_init>
 8001fe8:	2600      	movs	r6, #0
 8001fea:	4d0a      	ldr	r5, [pc, #40]	@ (8002014 <__libc_init_array+0x40>)
 8001fec:	4c0a      	ldr	r4, [pc, #40]	@ (8002018 <__libc_init_array+0x44>)
 8001fee:	1b64      	subs	r4, r4, r5
 8001ff0:	10a4      	asrs	r4, r4, #2
 8001ff2:	42a6      	cmp	r6, r4
 8001ff4:	d105      	bne.n	8002002 <__libc_init_array+0x2e>
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}
 8001ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ffc:	4798      	blx	r3
 8001ffe:	3601      	adds	r6, #1
 8002000:	e7ee      	b.n	8001fe0 <__libc_init_array+0xc>
 8002002:	f855 3b04 	ldr.w	r3, [r5], #4
 8002006:	4798      	blx	r3
 8002008:	3601      	adds	r6, #1
 800200a:	e7f2      	b.n	8001ff2 <__libc_init_array+0x1e>
 800200c:	080037e4 	.word	0x080037e4
 8002010:	080037e4 	.word	0x080037e4
 8002014:	080037e4 	.word	0x080037e4
 8002018:	080037e8 	.word	0x080037e8

0800201c <__retarget_lock_init_recursive>:
 800201c:	4770      	bx	lr

0800201e <__retarget_lock_acquire_recursive>:
 800201e:	4770      	bx	lr

08002020 <__retarget_lock_release_recursive>:
 8002020:	4770      	bx	lr
	...

08002024 <_free_r>:
 8002024:	b538      	push	{r3, r4, r5, lr}
 8002026:	4605      	mov	r5, r0
 8002028:	2900      	cmp	r1, #0
 800202a:	d040      	beq.n	80020ae <_free_r+0x8a>
 800202c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002030:	1f0c      	subs	r4, r1, #4
 8002032:	2b00      	cmp	r3, #0
 8002034:	bfb8      	it	lt
 8002036:	18e4      	addlt	r4, r4, r3
 8002038:	f000 f8de 	bl	80021f8 <__malloc_lock>
 800203c:	4a1c      	ldr	r2, [pc, #112]	@ (80020b0 <_free_r+0x8c>)
 800203e:	6813      	ldr	r3, [r2, #0]
 8002040:	b933      	cbnz	r3, 8002050 <_free_r+0x2c>
 8002042:	6063      	str	r3, [r4, #4]
 8002044:	6014      	str	r4, [r2, #0]
 8002046:	4628      	mov	r0, r5
 8002048:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800204c:	f000 b8da 	b.w	8002204 <__malloc_unlock>
 8002050:	42a3      	cmp	r3, r4
 8002052:	d908      	bls.n	8002066 <_free_r+0x42>
 8002054:	6820      	ldr	r0, [r4, #0]
 8002056:	1821      	adds	r1, r4, r0
 8002058:	428b      	cmp	r3, r1
 800205a:	bf01      	itttt	eq
 800205c:	6819      	ldreq	r1, [r3, #0]
 800205e:	685b      	ldreq	r3, [r3, #4]
 8002060:	1809      	addeq	r1, r1, r0
 8002062:	6021      	streq	r1, [r4, #0]
 8002064:	e7ed      	b.n	8002042 <_free_r+0x1e>
 8002066:	461a      	mov	r2, r3
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	b10b      	cbz	r3, 8002070 <_free_r+0x4c>
 800206c:	42a3      	cmp	r3, r4
 800206e:	d9fa      	bls.n	8002066 <_free_r+0x42>
 8002070:	6811      	ldr	r1, [r2, #0]
 8002072:	1850      	adds	r0, r2, r1
 8002074:	42a0      	cmp	r0, r4
 8002076:	d10b      	bne.n	8002090 <_free_r+0x6c>
 8002078:	6820      	ldr	r0, [r4, #0]
 800207a:	4401      	add	r1, r0
 800207c:	1850      	adds	r0, r2, r1
 800207e:	4283      	cmp	r3, r0
 8002080:	6011      	str	r1, [r2, #0]
 8002082:	d1e0      	bne.n	8002046 <_free_r+0x22>
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4408      	add	r0, r1
 800208a:	6010      	str	r0, [r2, #0]
 800208c:	6053      	str	r3, [r2, #4]
 800208e:	e7da      	b.n	8002046 <_free_r+0x22>
 8002090:	d902      	bls.n	8002098 <_free_r+0x74>
 8002092:	230c      	movs	r3, #12
 8002094:	602b      	str	r3, [r5, #0]
 8002096:	e7d6      	b.n	8002046 <_free_r+0x22>
 8002098:	6820      	ldr	r0, [r4, #0]
 800209a:	1821      	adds	r1, r4, r0
 800209c:	428b      	cmp	r3, r1
 800209e:	bf01      	itttt	eq
 80020a0:	6819      	ldreq	r1, [r3, #0]
 80020a2:	685b      	ldreq	r3, [r3, #4]
 80020a4:	1809      	addeq	r1, r1, r0
 80020a6:	6021      	streq	r1, [r4, #0]
 80020a8:	6063      	str	r3, [r4, #4]
 80020aa:	6054      	str	r4, [r2, #4]
 80020ac:	e7cb      	b.n	8002046 <_free_r+0x22>
 80020ae:	bd38      	pop	{r3, r4, r5, pc}
 80020b0:	200002d0 	.word	0x200002d0

080020b4 <sbrk_aligned>:
 80020b4:	b570      	push	{r4, r5, r6, lr}
 80020b6:	4e0f      	ldr	r6, [pc, #60]	@ (80020f4 <sbrk_aligned+0x40>)
 80020b8:	460c      	mov	r4, r1
 80020ba:	6831      	ldr	r1, [r6, #0]
 80020bc:	4605      	mov	r5, r0
 80020be:	b911      	cbnz	r1, 80020c6 <sbrk_aligned+0x12>
 80020c0:	f001 f946 	bl	8003350 <_sbrk_r>
 80020c4:	6030      	str	r0, [r6, #0]
 80020c6:	4621      	mov	r1, r4
 80020c8:	4628      	mov	r0, r5
 80020ca:	f001 f941 	bl	8003350 <_sbrk_r>
 80020ce:	1c43      	adds	r3, r0, #1
 80020d0:	d103      	bne.n	80020da <sbrk_aligned+0x26>
 80020d2:	f04f 34ff 	mov.w	r4, #4294967295
 80020d6:	4620      	mov	r0, r4
 80020d8:	bd70      	pop	{r4, r5, r6, pc}
 80020da:	1cc4      	adds	r4, r0, #3
 80020dc:	f024 0403 	bic.w	r4, r4, #3
 80020e0:	42a0      	cmp	r0, r4
 80020e2:	d0f8      	beq.n	80020d6 <sbrk_aligned+0x22>
 80020e4:	1a21      	subs	r1, r4, r0
 80020e6:	4628      	mov	r0, r5
 80020e8:	f001 f932 	bl	8003350 <_sbrk_r>
 80020ec:	3001      	adds	r0, #1
 80020ee:	d1f2      	bne.n	80020d6 <sbrk_aligned+0x22>
 80020f0:	e7ef      	b.n	80020d2 <sbrk_aligned+0x1e>
 80020f2:	bf00      	nop
 80020f4:	200002cc 	.word	0x200002cc

080020f8 <_malloc_r>:
 80020f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020fc:	1ccd      	adds	r5, r1, #3
 80020fe:	f025 0503 	bic.w	r5, r5, #3
 8002102:	3508      	adds	r5, #8
 8002104:	2d0c      	cmp	r5, #12
 8002106:	bf38      	it	cc
 8002108:	250c      	movcc	r5, #12
 800210a:	2d00      	cmp	r5, #0
 800210c:	4606      	mov	r6, r0
 800210e:	db01      	blt.n	8002114 <_malloc_r+0x1c>
 8002110:	42a9      	cmp	r1, r5
 8002112:	d904      	bls.n	800211e <_malloc_r+0x26>
 8002114:	230c      	movs	r3, #12
 8002116:	6033      	str	r3, [r6, #0]
 8002118:	2000      	movs	r0, #0
 800211a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800211e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80021f4 <_malloc_r+0xfc>
 8002122:	f000 f869 	bl	80021f8 <__malloc_lock>
 8002126:	f8d8 3000 	ldr.w	r3, [r8]
 800212a:	461c      	mov	r4, r3
 800212c:	bb44      	cbnz	r4, 8002180 <_malloc_r+0x88>
 800212e:	4629      	mov	r1, r5
 8002130:	4630      	mov	r0, r6
 8002132:	f7ff ffbf 	bl	80020b4 <sbrk_aligned>
 8002136:	1c43      	adds	r3, r0, #1
 8002138:	4604      	mov	r4, r0
 800213a:	d158      	bne.n	80021ee <_malloc_r+0xf6>
 800213c:	f8d8 4000 	ldr.w	r4, [r8]
 8002140:	4627      	mov	r7, r4
 8002142:	2f00      	cmp	r7, #0
 8002144:	d143      	bne.n	80021ce <_malloc_r+0xd6>
 8002146:	2c00      	cmp	r4, #0
 8002148:	d04b      	beq.n	80021e2 <_malloc_r+0xea>
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	4639      	mov	r1, r7
 800214e:	4630      	mov	r0, r6
 8002150:	eb04 0903 	add.w	r9, r4, r3
 8002154:	f001 f8fc 	bl	8003350 <_sbrk_r>
 8002158:	4581      	cmp	r9, r0
 800215a:	d142      	bne.n	80021e2 <_malloc_r+0xea>
 800215c:	6821      	ldr	r1, [r4, #0]
 800215e:	4630      	mov	r0, r6
 8002160:	1a6d      	subs	r5, r5, r1
 8002162:	4629      	mov	r1, r5
 8002164:	f7ff ffa6 	bl	80020b4 <sbrk_aligned>
 8002168:	3001      	adds	r0, #1
 800216a:	d03a      	beq.n	80021e2 <_malloc_r+0xea>
 800216c:	6823      	ldr	r3, [r4, #0]
 800216e:	442b      	add	r3, r5
 8002170:	6023      	str	r3, [r4, #0]
 8002172:	f8d8 3000 	ldr.w	r3, [r8]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	bb62      	cbnz	r2, 80021d4 <_malloc_r+0xdc>
 800217a:	f8c8 7000 	str.w	r7, [r8]
 800217e:	e00f      	b.n	80021a0 <_malloc_r+0xa8>
 8002180:	6822      	ldr	r2, [r4, #0]
 8002182:	1b52      	subs	r2, r2, r5
 8002184:	d420      	bmi.n	80021c8 <_malloc_r+0xd0>
 8002186:	2a0b      	cmp	r2, #11
 8002188:	d917      	bls.n	80021ba <_malloc_r+0xc2>
 800218a:	1961      	adds	r1, r4, r5
 800218c:	42a3      	cmp	r3, r4
 800218e:	6025      	str	r5, [r4, #0]
 8002190:	bf18      	it	ne
 8002192:	6059      	strne	r1, [r3, #4]
 8002194:	6863      	ldr	r3, [r4, #4]
 8002196:	bf08      	it	eq
 8002198:	f8c8 1000 	streq.w	r1, [r8]
 800219c:	5162      	str	r2, [r4, r5]
 800219e:	604b      	str	r3, [r1, #4]
 80021a0:	4630      	mov	r0, r6
 80021a2:	f000 f82f 	bl	8002204 <__malloc_unlock>
 80021a6:	f104 000b 	add.w	r0, r4, #11
 80021aa:	1d23      	adds	r3, r4, #4
 80021ac:	f020 0007 	bic.w	r0, r0, #7
 80021b0:	1ac2      	subs	r2, r0, r3
 80021b2:	bf1c      	itt	ne
 80021b4:	1a1b      	subne	r3, r3, r0
 80021b6:	50a3      	strne	r3, [r4, r2]
 80021b8:	e7af      	b.n	800211a <_malloc_r+0x22>
 80021ba:	6862      	ldr	r2, [r4, #4]
 80021bc:	42a3      	cmp	r3, r4
 80021be:	bf0c      	ite	eq
 80021c0:	f8c8 2000 	streq.w	r2, [r8]
 80021c4:	605a      	strne	r2, [r3, #4]
 80021c6:	e7eb      	b.n	80021a0 <_malloc_r+0xa8>
 80021c8:	4623      	mov	r3, r4
 80021ca:	6864      	ldr	r4, [r4, #4]
 80021cc:	e7ae      	b.n	800212c <_malloc_r+0x34>
 80021ce:	463c      	mov	r4, r7
 80021d0:	687f      	ldr	r7, [r7, #4]
 80021d2:	e7b6      	b.n	8002142 <_malloc_r+0x4a>
 80021d4:	461a      	mov	r2, r3
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	42a3      	cmp	r3, r4
 80021da:	d1fb      	bne.n	80021d4 <_malloc_r+0xdc>
 80021dc:	2300      	movs	r3, #0
 80021de:	6053      	str	r3, [r2, #4]
 80021e0:	e7de      	b.n	80021a0 <_malloc_r+0xa8>
 80021e2:	230c      	movs	r3, #12
 80021e4:	4630      	mov	r0, r6
 80021e6:	6033      	str	r3, [r6, #0]
 80021e8:	f000 f80c 	bl	8002204 <__malloc_unlock>
 80021ec:	e794      	b.n	8002118 <_malloc_r+0x20>
 80021ee:	6005      	str	r5, [r0, #0]
 80021f0:	e7d6      	b.n	80021a0 <_malloc_r+0xa8>
 80021f2:	bf00      	nop
 80021f4:	200002d0 	.word	0x200002d0

080021f8 <__malloc_lock>:
 80021f8:	4801      	ldr	r0, [pc, #4]	@ (8002200 <__malloc_lock+0x8>)
 80021fa:	f7ff bf10 	b.w	800201e <__retarget_lock_acquire_recursive>
 80021fe:	bf00      	nop
 8002200:	200002c8 	.word	0x200002c8

08002204 <__malloc_unlock>:
 8002204:	4801      	ldr	r0, [pc, #4]	@ (800220c <__malloc_unlock+0x8>)
 8002206:	f7ff bf0b 	b.w	8002020 <__retarget_lock_release_recursive>
 800220a:	bf00      	nop
 800220c:	200002c8 	.word	0x200002c8

08002210 <__sfputc_r>:
 8002210:	6893      	ldr	r3, [r2, #8]
 8002212:	b410      	push	{r4}
 8002214:	3b01      	subs	r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	6093      	str	r3, [r2, #8]
 800221a:	da07      	bge.n	800222c <__sfputc_r+0x1c>
 800221c:	6994      	ldr	r4, [r2, #24]
 800221e:	42a3      	cmp	r3, r4
 8002220:	db01      	blt.n	8002226 <__sfputc_r+0x16>
 8002222:	290a      	cmp	r1, #10
 8002224:	d102      	bne.n	800222c <__sfputc_r+0x1c>
 8002226:	bc10      	pop	{r4}
 8002228:	f7ff bdeb 	b.w	8001e02 <__swbuf_r>
 800222c:	6813      	ldr	r3, [r2, #0]
 800222e:	1c58      	adds	r0, r3, #1
 8002230:	6010      	str	r0, [r2, #0]
 8002232:	7019      	strb	r1, [r3, #0]
 8002234:	4608      	mov	r0, r1
 8002236:	bc10      	pop	{r4}
 8002238:	4770      	bx	lr

0800223a <__sfputs_r>:
 800223a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800223c:	4606      	mov	r6, r0
 800223e:	460f      	mov	r7, r1
 8002240:	4614      	mov	r4, r2
 8002242:	18d5      	adds	r5, r2, r3
 8002244:	42ac      	cmp	r4, r5
 8002246:	d101      	bne.n	800224c <__sfputs_r+0x12>
 8002248:	2000      	movs	r0, #0
 800224a:	e007      	b.n	800225c <__sfputs_r+0x22>
 800224c:	463a      	mov	r2, r7
 800224e:	4630      	mov	r0, r6
 8002250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002254:	f7ff ffdc 	bl	8002210 <__sfputc_r>
 8002258:	1c43      	adds	r3, r0, #1
 800225a:	d1f3      	bne.n	8002244 <__sfputs_r+0xa>
 800225c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002260 <_vfiprintf_r>:
 8002260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002264:	460d      	mov	r5, r1
 8002266:	4614      	mov	r4, r2
 8002268:	4698      	mov	r8, r3
 800226a:	4606      	mov	r6, r0
 800226c:	b09d      	sub	sp, #116	@ 0x74
 800226e:	b118      	cbz	r0, 8002278 <_vfiprintf_r+0x18>
 8002270:	6a03      	ldr	r3, [r0, #32]
 8002272:	b90b      	cbnz	r3, 8002278 <_vfiprintf_r+0x18>
 8002274:	f7ff fcc2 	bl	8001bfc <__sinit>
 8002278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800227a:	07d9      	lsls	r1, r3, #31
 800227c:	d405      	bmi.n	800228a <_vfiprintf_r+0x2a>
 800227e:	89ab      	ldrh	r3, [r5, #12]
 8002280:	059a      	lsls	r2, r3, #22
 8002282:	d402      	bmi.n	800228a <_vfiprintf_r+0x2a>
 8002284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002286:	f7ff feca 	bl	800201e <__retarget_lock_acquire_recursive>
 800228a:	89ab      	ldrh	r3, [r5, #12]
 800228c:	071b      	lsls	r3, r3, #28
 800228e:	d501      	bpl.n	8002294 <_vfiprintf_r+0x34>
 8002290:	692b      	ldr	r3, [r5, #16]
 8002292:	b99b      	cbnz	r3, 80022bc <_vfiprintf_r+0x5c>
 8002294:	4629      	mov	r1, r5
 8002296:	4630      	mov	r0, r6
 8002298:	f7ff fdf2 	bl	8001e80 <__swsetup_r>
 800229c:	b170      	cbz	r0, 80022bc <_vfiprintf_r+0x5c>
 800229e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80022a0:	07dc      	lsls	r4, r3, #31
 80022a2:	d504      	bpl.n	80022ae <_vfiprintf_r+0x4e>
 80022a4:	f04f 30ff 	mov.w	r0, #4294967295
 80022a8:	b01d      	add	sp, #116	@ 0x74
 80022aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022ae:	89ab      	ldrh	r3, [r5, #12]
 80022b0:	0598      	lsls	r0, r3, #22
 80022b2:	d4f7      	bmi.n	80022a4 <_vfiprintf_r+0x44>
 80022b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80022b6:	f7ff feb3 	bl	8002020 <__retarget_lock_release_recursive>
 80022ba:	e7f3      	b.n	80022a4 <_vfiprintf_r+0x44>
 80022bc:	2300      	movs	r3, #0
 80022be:	9309      	str	r3, [sp, #36]	@ 0x24
 80022c0:	2320      	movs	r3, #32
 80022c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80022c6:	2330      	movs	r3, #48	@ 0x30
 80022c8:	f04f 0901 	mov.w	r9, #1
 80022cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80022d0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800247c <_vfiprintf_r+0x21c>
 80022d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80022d8:	4623      	mov	r3, r4
 80022da:	469a      	mov	sl, r3
 80022dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80022e0:	b10a      	cbz	r2, 80022e6 <_vfiprintf_r+0x86>
 80022e2:	2a25      	cmp	r2, #37	@ 0x25
 80022e4:	d1f9      	bne.n	80022da <_vfiprintf_r+0x7a>
 80022e6:	ebba 0b04 	subs.w	fp, sl, r4
 80022ea:	d00b      	beq.n	8002304 <_vfiprintf_r+0xa4>
 80022ec:	465b      	mov	r3, fp
 80022ee:	4622      	mov	r2, r4
 80022f0:	4629      	mov	r1, r5
 80022f2:	4630      	mov	r0, r6
 80022f4:	f7ff ffa1 	bl	800223a <__sfputs_r>
 80022f8:	3001      	adds	r0, #1
 80022fa:	f000 80a7 	beq.w	800244c <_vfiprintf_r+0x1ec>
 80022fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002300:	445a      	add	r2, fp
 8002302:	9209      	str	r2, [sp, #36]	@ 0x24
 8002304:	f89a 3000 	ldrb.w	r3, [sl]
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 809f 	beq.w	800244c <_vfiprintf_r+0x1ec>
 800230e:	2300      	movs	r3, #0
 8002310:	f04f 32ff 	mov.w	r2, #4294967295
 8002314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002318:	f10a 0a01 	add.w	sl, sl, #1
 800231c:	9304      	str	r3, [sp, #16]
 800231e:	9307      	str	r3, [sp, #28]
 8002320:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002324:	931a      	str	r3, [sp, #104]	@ 0x68
 8002326:	4654      	mov	r4, sl
 8002328:	2205      	movs	r2, #5
 800232a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800232e:	4853      	ldr	r0, [pc, #332]	@ (800247c <_vfiprintf_r+0x21c>)
 8002330:	f001 f81e 	bl	8003370 <memchr>
 8002334:	9a04      	ldr	r2, [sp, #16]
 8002336:	b9d8      	cbnz	r0, 8002370 <_vfiprintf_r+0x110>
 8002338:	06d1      	lsls	r1, r2, #27
 800233a:	bf44      	itt	mi
 800233c:	2320      	movmi	r3, #32
 800233e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002342:	0713      	lsls	r3, r2, #28
 8002344:	bf44      	itt	mi
 8002346:	232b      	movmi	r3, #43	@ 0x2b
 8002348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800234c:	f89a 3000 	ldrb.w	r3, [sl]
 8002350:	2b2a      	cmp	r3, #42	@ 0x2a
 8002352:	d015      	beq.n	8002380 <_vfiprintf_r+0x120>
 8002354:	4654      	mov	r4, sl
 8002356:	2000      	movs	r0, #0
 8002358:	f04f 0c0a 	mov.w	ip, #10
 800235c:	9a07      	ldr	r2, [sp, #28]
 800235e:	4621      	mov	r1, r4
 8002360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002364:	3b30      	subs	r3, #48	@ 0x30
 8002366:	2b09      	cmp	r3, #9
 8002368:	d94b      	bls.n	8002402 <_vfiprintf_r+0x1a2>
 800236a:	b1b0      	cbz	r0, 800239a <_vfiprintf_r+0x13a>
 800236c:	9207      	str	r2, [sp, #28]
 800236e:	e014      	b.n	800239a <_vfiprintf_r+0x13a>
 8002370:	eba0 0308 	sub.w	r3, r0, r8
 8002374:	fa09 f303 	lsl.w	r3, r9, r3
 8002378:	4313      	orrs	r3, r2
 800237a:	46a2      	mov	sl, r4
 800237c:	9304      	str	r3, [sp, #16]
 800237e:	e7d2      	b.n	8002326 <_vfiprintf_r+0xc6>
 8002380:	9b03      	ldr	r3, [sp, #12]
 8002382:	1d19      	adds	r1, r3, #4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	9103      	str	r1, [sp, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	bfbb      	ittet	lt
 800238c:	425b      	neglt	r3, r3
 800238e:	f042 0202 	orrlt.w	r2, r2, #2
 8002392:	9307      	strge	r3, [sp, #28]
 8002394:	9307      	strlt	r3, [sp, #28]
 8002396:	bfb8      	it	lt
 8002398:	9204      	strlt	r2, [sp, #16]
 800239a:	7823      	ldrb	r3, [r4, #0]
 800239c:	2b2e      	cmp	r3, #46	@ 0x2e
 800239e:	d10a      	bne.n	80023b6 <_vfiprintf_r+0x156>
 80023a0:	7863      	ldrb	r3, [r4, #1]
 80023a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80023a4:	d132      	bne.n	800240c <_vfiprintf_r+0x1ac>
 80023a6:	9b03      	ldr	r3, [sp, #12]
 80023a8:	3402      	adds	r4, #2
 80023aa:	1d1a      	adds	r2, r3, #4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	9203      	str	r2, [sp, #12]
 80023b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80023b4:	9305      	str	r3, [sp, #20]
 80023b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002480 <_vfiprintf_r+0x220>
 80023ba:	2203      	movs	r2, #3
 80023bc:	4650      	mov	r0, sl
 80023be:	7821      	ldrb	r1, [r4, #0]
 80023c0:	f000 ffd6 	bl	8003370 <memchr>
 80023c4:	b138      	cbz	r0, 80023d6 <_vfiprintf_r+0x176>
 80023c6:	2240      	movs	r2, #64	@ 0x40
 80023c8:	9b04      	ldr	r3, [sp, #16]
 80023ca:	eba0 000a 	sub.w	r0, r0, sl
 80023ce:	4082      	lsls	r2, r0
 80023d0:	4313      	orrs	r3, r2
 80023d2:	3401      	adds	r4, #1
 80023d4:	9304      	str	r3, [sp, #16]
 80023d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023da:	2206      	movs	r2, #6
 80023dc:	4829      	ldr	r0, [pc, #164]	@ (8002484 <_vfiprintf_r+0x224>)
 80023de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80023e2:	f000 ffc5 	bl	8003370 <memchr>
 80023e6:	2800      	cmp	r0, #0
 80023e8:	d03f      	beq.n	800246a <_vfiprintf_r+0x20a>
 80023ea:	4b27      	ldr	r3, [pc, #156]	@ (8002488 <_vfiprintf_r+0x228>)
 80023ec:	bb1b      	cbnz	r3, 8002436 <_vfiprintf_r+0x1d6>
 80023ee:	9b03      	ldr	r3, [sp, #12]
 80023f0:	3307      	adds	r3, #7
 80023f2:	f023 0307 	bic.w	r3, r3, #7
 80023f6:	3308      	adds	r3, #8
 80023f8:	9303      	str	r3, [sp, #12]
 80023fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80023fc:	443b      	add	r3, r7
 80023fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8002400:	e76a      	b.n	80022d8 <_vfiprintf_r+0x78>
 8002402:	460c      	mov	r4, r1
 8002404:	2001      	movs	r0, #1
 8002406:	fb0c 3202 	mla	r2, ip, r2, r3
 800240a:	e7a8      	b.n	800235e <_vfiprintf_r+0xfe>
 800240c:	2300      	movs	r3, #0
 800240e:	f04f 0c0a 	mov.w	ip, #10
 8002412:	4619      	mov	r1, r3
 8002414:	3401      	adds	r4, #1
 8002416:	9305      	str	r3, [sp, #20]
 8002418:	4620      	mov	r0, r4
 800241a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800241e:	3a30      	subs	r2, #48	@ 0x30
 8002420:	2a09      	cmp	r2, #9
 8002422:	d903      	bls.n	800242c <_vfiprintf_r+0x1cc>
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0c6      	beq.n	80023b6 <_vfiprintf_r+0x156>
 8002428:	9105      	str	r1, [sp, #20]
 800242a:	e7c4      	b.n	80023b6 <_vfiprintf_r+0x156>
 800242c:	4604      	mov	r4, r0
 800242e:	2301      	movs	r3, #1
 8002430:	fb0c 2101 	mla	r1, ip, r1, r2
 8002434:	e7f0      	b.n	8002418 <_vfiprintf_r+0x1b8>
 8002436:	ab03      	add	r3, sp, #12
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	462a      	mov	r2, r5
 800243c:	4630      	mov	r0, r6
 800243e:	4b13      	ldr	r3, [pc, #76]	@ (800248c <_vfiprintf_r+0x22c>)
 8002440:	a904      	add	r1, sp, #16
 8002442:	f3af 8000 	nop.w
 8002446:	4607      	mov	r7, r0
 8002448:	1c78      	adds	r0, r7, #1
 800244a:	d1d6      	bne.n	80023fa <_vfiprintf_r+0x19a>
 800244c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800244e:	07d9      	lsls	r1, r3, #31
 8002450:	d405      	bmi.n	800245e <_vfiprintf_r+0x1fe>
 8002452:	89ab      	ldrh	r3, [r5, #12]
 8002454:	059a      	lsls	r2, r3, #22
 8002456:	d402      	bmi.n	800245e <_vfiprintf_r+0x1fe>
 8002458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800245a:	f7ff fde1 	bl	8002020 <__retarget_lock_release_recursive>
 800245e:	89ab      	ldrh	r3, [r5, #12]
 8002460:	065b      	lsls	r3, r3, #25
 8002462:	f53f af1f 	bmi.w	80022a4 <_vfiprintf_r+0x44>
 8002466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002468:	e71e      	b.n	80022a8 <_vfiprintf_r+0x48>
 800246a:	ab03      	add	r3, sp, #12
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	462a      	mov	r2, r5
 8002470:	4630      	mov	r0, r6
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <_vfiprintf_r+0x22c>)
 8002474:	a904      	add	r1, sp, #16
 8002476:	f000 f87d 	bl	8002574 <_printf_i>
 800247a:	e7e4      	b.n	8002446 <_vfiprintf_r+0x1e6>
 800247c:	0800368c 	.word	0x0800368c
 8002480:	08003692 	.word	0x08003692
 8002484:	08003696 	.word	0x08003696
 8002488:	00000000 	.word	0x00000000
 800248c:	0800223b 	.word	0x0800223b

08002490 <_printf_common>:
 8002490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002494:	4616      	mov	r6, r2
 8002496:	4698      	mov	r8, r3
 8002498:	688a      	ldr	r2, [r1, #8]
 800249a:	690b      	ldr	r3, [r1, #16]
 800249c:	4607      	mov	r7, r0
 800249e:	4293      	cmp	r3, r2
 80024a0:	bfb8      	it	lt
 80024a2:	4613      	movlt	r3, r2
 80024a4:	6033      	str	r3, [r6, #0]
 80024a6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80024aa:	460c      	mov	r4, r1
 80024ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80024b0:	b10a      	cbz	r2, 80024b6 <_printf_common+0x26>
 80024b2:	3301      	adds	r3, #1
 80024b4:	6033      	str	r3, [r6, #0]
 80024b6:	6823      	ldr	r3, [r4, #0]
 80024b8:	0699      	lsls	r1, r3, #26
 80024ba:	bf42      	ittt	mi
 80024bc:	6833      	ldrmi	r3, [r6, #0]
 80024be:	3302      	addmi	r3, #2
 80024c0:	6033      	strmi	r3, [r6, #0]
 80024c2:	6825      	ldr	r5, [r4, #0]
 80024c4:	f015 0506 	ands.w	r5, r5, #6
 80024c8:	d106      	bne.n	80024d8 <_printf_common+0x48>
 80024ca:	f104 0a19 	add.w	sl, r4, #25
 80024ce:	68e3      	ldr	r3, [r4, #12]
 80024d0:	6832      	ldr	r2, [r6, #0]
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	42ab      	cmp	r3, r5
 80024d6:	dc2b      	bgt.n	8002530 <_printf_common+0xa0>
 80024d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80024dc:	6822      	ldr	r2, [r4, #0]
 80024de:	3b00      	subs	r3, #0
 80024e0:	bf18      	it	ne
 80024e2:	2301      	movne	r3, #1
 80024e4:	0692      	lsls	r2, r2, #26
 80024e6:	d430      	bmi.n	800254a <_printf_common+0xba>
 80024e8:	4641      	mov	r1, r8
 80024ea:	4638      	mov	r0, r7
 80024ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80024f0:	47c8      	blx	r9
 80024f2:	3001      	adds	r0, #1
 80024f4:	d023      	beq.n	800253e <_printf_common+0xae>
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	6922      	ldr	r2, [r4, #16]
 80024fa:	f003 0306 	and.w	r3, r3, #6
 80024fe:	2b04      	cmp	r3, #4
 8002500:	bf14      	ite	ne
 8002502:	2500      	movne	r5, #0
 8002504:	6833      	ldreq	r3, [r6, #0]
 8002506:	f04f 0600 	mov.w	r6, #0
 800250a:	bf08      	it	eq
 800250c:	68e5      	ldreq	r5, [r4, #12]
 800250e:	f104 041a 	add.w	r4, r4, #26
 8002512:	bf08      	it	eq
 8002514:	1aed      	subeq	r5, r5, r3
 8002516:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800251a:	bf08      	it	eq
 800251c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002520:	4293      	cmp	r3, r2
 8002522:	bfc4      	itt	gt
 8002524:	1a9b      	subgt	r3, r3, r2
 8002526:	18ed      	addgt	r5, r5, r3
 8002528:	42b5      	cmp	r5, r6
 800252a:	d11a      	bne.n	8002562 <_printf_common+0xd2>
 800252c:	2000      	movs	r0, #0
 800252e:	e008      	b.n	8002542 <_printf_common+0xb2>
 8002530:	2301      	movs	r3, #1
 8002532:	4652      	mov	r2, sl
 8002534:	4641      	mov	r1, r8
 8002536:	4638      	mov	r0, r7
 8002538:	47c8      	blx	r9
 800253a:	3001      	adds	r0, #1
 800253c:	d103      	bne.n	8002546 <_printf_common+0xb6>
 800253e:	f04f 30ff 	mov.w	r0, #4294967295
 8002542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002546:	3501      	adds	r5, #1
 8002548:	e7c1      	b.n	80024ce <_printf_common+0x3e>
 800254a:	2030      	movs	r0, #48	@ 0x30
 800254c:	18e1      	adds	r1, r4, r3
 800254e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002558:	4422      	add	r2, r4
 800255a:	3302      	adds	r3, #2
 800255c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002560:	e7c2      	b.n	80024e8 <_printf_common+0x58>
 8002562:	2301      	movs	r3, #1
 8002564:	4622      	mov	r2, r4
 8002566:	4641      	mov	r1, r8
 8002568:	4638      	mov	r0, r7
 800256a:	47c8      	blx	r9
 800256c:	3001      	adds	r0, #1
 800256e:	d0e6      	beq.n	800253e <_printf_common+0xae>
 8002570:	3601      	adds	r6, #1
 8002572:	e7d9      	b.n	8002528 <_printf_common+0x98>

08002574 <_printf_i>:
 8002574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002578:	7e0f      	ldrb	r7, [r1, #24]
 800257a:	4691      	mov	r9, r2
 800257c:	2f78      	cmp	r7, #120	@ 0x78
 800257e:	4680      	mov	r8, r0
 8002580:	460c      	mov	r4, r1
 8002582:	469a      	mov	sl, r3
 8002584:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002586:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800258a:	d807      	bhi.n	800259c <_printf_i+0x28>
 800258c:	2f62      	cmp	r7, #98	@ 0x62
 800258e:	d80a      	bhi.n	80025a6 <_printf_i+0x32>
 8002590:	2f00      	cmp	r7, #0
 8002592:	f000 80d3 	beq.w	800273c <_printf_i+0x1c8>
 8002596:	2f58      	cmp	r7, #88	@ 0x58
 8002598:	f000 80ba 	beq.w	8002710 <_printf_i+0x19c>
 800259c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80025a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80025a4:	e03a      	b.n	800261c <_printf_i+0xa8>
 80025a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80025aa:	2b15      	cmp	r3, #21
 80025ac:	d8f6      	bhi.n	800259c <_printf_i+0x28>
 80025ae:	a101      	add	r1, pc, #4	@ (adr r1, 80025b4 <_printf_i+0x40>)
 80025b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80025b4:	0800260d 	.word	0x0800260d
 80025b8:	08002621 	.word	0x08002621
 80025bc:	0800259d 	.word	0x0800259d
 80025c0:	0800259d 	.word	0x0800259d
 80025c4:	0800259d 	.word	0x0800259d
 80025c8:	0800259d 	.word	0x0800259d
 80025cc:	08002621 	.word	0x08002621
 80025d0:	0800259d 	.word	0x0800259d
 80025d4:	0800259d 	.word	0x0800259d
 80025d8:	0800259d 	.word	0x0800259d
 80025dc:	0800259d 	.word	0x0800259d
 80025e0:	08002723 	.word	0x08002723
 80025e4:	0800264b 	.word	0x0800264b
 80025e8:	080026dd 	.word	0x080026dd
 80025ec:	0800259d 	.word	0x0800259d
 80025f0:	0800259d 	.word	0x0800259d
 80025f4:	08002745 	.word	0x08002745
 80025f8:	0800259d 	.word	0x0800259d
 80025fc:	0800264b 	.word	0x0800264b
 8002600:	0800259d 	.word	0x0800259d
 8002604:	0800259d 	.word	0x0800259d
 8002608:	080026e5 	.word	0x080026e5
 800260c:	6833      	ldr	r3, [r6, #0]
 800260e:	1d1a      	adds	r2, r3, #4
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6032      	str	r2, [r6, #0]
 8002614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002618:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800261c:	2301      	movs	r3, #1
 800261e:	e09e      	b.n	800275e <_printf_i+0x1ea>
 8002620:	6833      	ldr	r3, [r6, #0]
 8002622:	6820      	ldr	r0, [r4, #0]
 8002624:	1d19      	adds	r1, r3, #4
 8002626:	6031      	str	r1, [r6, #0]
 8002628:	0606      	lsls	r6, r0, #24
 800262a:	d501      	bpl.n	8002630 <_printf_i+0xbc>
 800262c:	681d      	ldr	r5, [r3, #0]
 800262e:	e003      	b.n	8002638 <_printf_i+0xc4>
 8002630:	0645      	lsls	r5, r0, #25
 8002632:	d5fb      	bpl.n	800262c <_printf_i+0xb8>
 8002634:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002638:	2d00      	cmp	r5, #0
 800263a:	da03      	bge.n	8002644 <_printf_i+0xd0>
 800263c:	232d      	movs	r3, #45	@ 0x2d
 800263e:	426d      	negs	r5, r5
 8002640:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002644:	230a      	movs	r3, #10
 8002646:	4859      	ldr	r0, [pc, #356]	@ (80027ac <_printf_i+0x238>)
 8002648:	e011      	b.n	800266e <_printf_i+0xfa>
 800264a:	6821      	ldr	r1, [r4, #0]
 800264c:	6833      	ldr	r3, [r6, #0]
 800264e:	0608      	lsls	r0, r1, #24
 8002650:	f853 5b04 	ldr.w	r5, [r3], #4
 8002654:	d402      	bmi.n	800265c <_printf_i+0xe8>
 8002656:	0649      	lsls	r1, r1, #25
 8002658:	bf48      	it	mi
 800265a:	b2ad      	uxthmi	r5, r5
 800265c:	2f6f      	cmp	r7, #111	@ 0x6f
 800265e:	6033      	str	r3, [r6, #0]
 8002660:	bf14      	ite	ne
 8002662:	230a      	movne	r3, #10
 8002664:	2308      	moveq	r3, #8
 8002666:	4851      	ldr	r0, [pc, #324]	@ (80027ac <_printf_i+0x238>)
 8002668:	2100      	movs	r1, #0
 800266a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800266e:	6866      	ldr	r6, [r4, #4]
 8002670:	2e00      	cmp	r6, #0
 8002672:	bfa8      	it	ge
 8002674:	6821      	ldrge	r1, [r4, #0]
 8002676:	60a6      	str	r6, [r4, #8]
 8002678:	bfa4      	itt	ge
 800267a:	f021 0104 	bicge.w	r1, r1, #4
 800267e:	6021      	strge	r1, [r4, #0]
 8002680:	b90d      	cbnz	r5, 8002686 <_printf_i+0x112>
 8002682:	2e00      	cmp	r6, #0
 8002684:	d04b      	beq.n	800271e <_printf_i+0x1aa>
 8002686:	4616      	mov	r6, r2
 8002688:	fbb5 f1f3 	udiv	r1, r5, r3
 800268c:	fb03 5711 	mls	r7, r3, r1, r5
 8002690:	5dc7      	ldrb	r7, [r0, r7]
 8002692:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002696:	462f      	mov	r7, r5
 8002698:	42bb      	cmp	r3, r7
 800269a:	460d      	mov	r5, r1
 800269c:	d9f4      	bls.n	8002688 <_printf_i+0x114>
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d10b      	bne.n	80026ba <_printf_i+0x146>
 80026a2:	6823      	ldr	r3, [r4, #0]
 80026a4:	07df      	lsls	r7, r3, #31
 80026a6:	d508      	bpl.n	80026ba <_printf_i+0x146>
 80026a8:	6923      	ldr	r3, [r4, #16]
 80026aa:	6861      	ldr	r1, [r4, #4]
 80026ac:	4299      	cmp	r1, r3
 80026ae:	bfde      	ittt	le
 80026b0:	2330      	movle	r3, #48	@ 0x30
 80026b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80026b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80026ba:	1b92      	subs	r2, r2, r6
 80026bc:	6122      	str	r2, [r4, #16]
 80026be:	464b      	mov	r3, r9
 80026c0:	4621      	mov	r1, r4
 80026c2:	4640      	mov	r0, r8
 80026c4:	f8cd a000 	str.w	sl, [sp]
 80026c8:	aa03      	add	r2, sp, #12
 80026ca:	f7ff fee1 	bl	8002490 <_printf_common>
 80026ce:	3001      	adds	r0, #1
 80026d0:	d14a      	bne.n	8002768 <_printf_i+0x1f4>
 80026d2:	f04f 30ff 	mov.w	r0, #4294967295
 80026d6:	b004      	add	sp, #16
 80026d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026dc:	6823      	ldr	r3, [r4, #0]
 80026de:	f043 0320 	orr.w	r3, r3, #32
 80026e2:	6023      	str	r3, [r4, #0]
 80026e4:	2778      	movs	r7, #120	@ 0x78
 80026e6:	4832      	ldr	r0, [pc, #200]	@ (80027b0 <_printf_i+0x23c>)
 80026e8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80026ec:	6823      	ldr	r3, [r4, #0]
 80026ee:	6831      	ldr	r1, [r6, #0]
 80026f0:	061f      	lsls	r7, r3, #24
 80026f2:	f851 5b04 	ldr.w	r5, [r1], #4
 80026f6:	d402      	bmi.n	80026fe <_printf_i+0x18a>
 80026f8:	065f      	lsls	r7, r3, #25
 80026fa:	bf48      	it	mi
 80026fc:	b2ad      	uxthmi	r5, r5
 80026fe:	6031      	str	r1, [r6, #0]
 8002700:	07d9      	lsls	r1, r3, #31
 8002702:	bf44      	itt	mi
 8002704:	f043 0320 	orrmi.w	r3, r3, #32
 8002708:	6023      	strmi	r3, [r4, #0]
 800270a:	b11d      	cbz	r5, 8002714 <_printf_i+0x1a0>
 800270c:	2310      	movs	r3, #16
 800270e:	e7ab      	b.n	8002668 <_printf_i+0xf4>
 8002710:	4826      	ldr	r0, [pc, #152]	@ (80027ac <_printf_i+0x238>)
 8002712:	e7e9      	b.n	80026e8 <_printf_i+0x174>
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	f023 0320 	bic.w	r3, r3, #32
 800271a:	6023      	str	r3, [r4, #0]
 800271c:	e7f6      	b.n	800270c <_printf_i+0x198>
 800271e:	4616      	mov	r6, r2
 8002720:	e7bd      	b.n	800269e <_printf_i+0x12a>
 8002722:	6833      	ldr	r3, [r6, #0]
 8002724:	6825      	ldr	r5, [r4, #0]
 8002726:	1d18      	adds	r0, r3, #4
 8002728:	6961      	ldr	r1, [r4, #20]
 800272a:	6030      	str	r0, [r6, #0]
 800272c:	062e      	lsls	r6, r5, #24
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	d501      	bpl.n	8002736 <_printf_i+0x1c2>
 8002732:	6019      	str	r1, [r3, #0]
 8002734:	e002      	b.n	800273c <_printf_i+0x1c8>
 8002736:	0668      	lsls	r0, r5, #25
 8002738:	d5fb      	bpl.n	8002732 <_printf_i+0x1be>
 800273a:	8019      	strh	r1, [r3, #0]
 800273c:	2300      	movs	r3, #0
 800273e:	4616      	mov	r6, r2
 8002740:	6123      	str	r3, [r4, #16]
 8002742:	e7bc      	b.n	80026be <_printf_i+0x14a>
 8002744:	6833      	ldr	r3, [r6, #0]
 8002746:	2100      	movs	r1, #0
 8002748:	1d1a      	adds	r2, r3, #4
 800274a:	6032      	str	r2, [r6, #0]
 800274c:	681e      	ldr	r6, [r3, #0]
 800274e:	6862      	ldr	r2, [r4, #4]
 8002750:	4630      	mov	r0, r6
 8002752:	f000 fe0d 	bl	8003370 <memchr>
 8002756:	b108      	cbz	r0, 800275c <_printf_i+0x1e8>
 8002758:	1b80      	subs	r0, r0, r6
 800275a:	6060      	str	r0, [r4, #4]
 800275c:	6863      	ldr	r3, [r4, #4]
 800275e:	6123      	str	r3, [r4, #16]
 8002760:	2300      	movs	r3, #0
 8002762:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002766:	e7aa      	b.n	80026be <_printf_i+0x14a>
 8002768:	4632      	mov	r2, r6
 800276a:	4649      	mov	r1, r9
 800276c:	4640      	mov	r0, r8
 800276e:	6923      	ldr	r3, [r4, #16]
 8002770:	47d0      	blx	sl
 8002772:	3001      	adds	r0, #1
 8002774:	d0ad      	beq.n	80026d2 <_printf_i+0x15e>
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	079b      	lsls	r3, r3, #30
 800277a:	d413      	bmi.n	80027a4 <_printf_i+0x230>
 800277c:	68e0      	ldr	r0, [r4, #12]
 800277e:	9b03      	ldr	r3, [sp, #12]
 8002780:	4298      	cmp	r0, r3
 8002782:	bfb8      	it	lt
 8002784:	4618      	movlt	r0, r3
 8002786:	e7a6      	b.n	80026d6 <_printf_i+0x162>
 8002788:	2301      	movs	r3, #1
 800278a:	4632      	mov	r2, r6
 800278c:	4649      	mov	r1, r9
 800278e:	4640      	mov	r0, r8
 8002790:	47d0      	blx	sl
 8002792:	3001      	adds	r0, #1
 8002794:	d09d      	beq.n	80026d2 <_printf_i+0x15e>
 8002796:	3501      	adds	r5, #1
 8002798:	68e3      	ldr	r3, [r4, #12]
 800279a:	9903      	ldr	r1, [sp, #12]
 800279c:	1a5b      	subs	r3, r3, r1
 800279e:	42ab      	cmp	r3, r5
 80027a0:	dcf2      	bgt.n	8002788 <_printf_i+0x214>
 80027a2:	e7eb      	b.n	800277c <_printf_i+0x208>
 80027a4:	2500      	movs	r5, #0
 80027a6:	f104 0619 	add.w	r6, r4, #25
 80027aa:	e7f5      	b.n	8002798 <_printf_i+0x224>
 80027ac:	0800369d 	.word	0x0800369d
 80027b0:	080036ae 	.word	0x080036ae

080027b4 <__svfiscanf_r>:
 80027b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b8:	461d      	mov	r5, r3
 80027ba:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80027bc:	4606      	mov	r6, r0
 80027be:	07df      	lsls	r7, r3, #31
 80027c0:	460c      	mov	r4, r1
 80027c2:	4691      	mov	r9, r2
 80027c4:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80027c8:	d405      	bmi.n	80027d6 <__svfiscanf_r+0x22>
 80027ca:	898b      	ldrh	r3, [r1, #12]
 80027cc:	0598      	lsls	r0, r3, #22
 80027ce:	d402      	bmi.n	80027d6 <__svfiscanf_r+0x22>
 80027d0:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 80027d2:	f7ff fc24 	bl	800201e <__retarget_lock_acquire_recursive>
 80027d6:	2300      	movs	r3, #0
 80027d8:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 80027dc:	4ba7      	ldr	r3, [pc, #668]	@ (8002a7c <__svfiscanf_r+0x2c8>)
 80027de:	f10d 0804 	add.w	r8, sp, #4
 80027e2:	93a0      	str	r3, [sp, #640]	@ 0x280
 80027e4:	4ba6      	ldr	r3, [pc, #664]	@ (8002a80 <__svfiscanf_r+0x2cc>)
 80027e6:	4fa7      	ldr	r7, [pc, #668]	@ (8002a84 <__svfiscanf_r+0x2d0>)
 80027e8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80027ec:	93a1      	str	r3, [sp, #644]	@ 0x284
 80027ee:	9500      	str	r5, [sp, #0]
 80027f0:	f899 3000 	ldrb.w	r3, [r9]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 816c 	beq.w	8002ad2 <__svfiscanf_r+0x31e>
 80027fa:	5cf9      	ldrb	r1, [r7, r3]
 80027fc:	f109 0501 	add.w	r5, r9, #1
 8002800:	f011 0108 	ands.w	r1, r1, #8
 8002804:	d019      	beq.n	800283a <__svfiscanf_r+0x86>
 8002806:	6863      	ldr	r3, [r4, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	dd0f      	ble.n	800282c <__svfiscanf_r+0x78>
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	5cba      	ldrb	r2, [r7, r2]
 8002812:	0711      	lsls	r1, r2, #28
 8002814:	d401      	bmi.n	800281a <__svfiscanf_r+0x66>
 8002816:	46a9      	mov	r9, r5
 8002818:	e7ea      	b.n	80027f0 <__svfiscanf_r+0x3c>
 800281a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800281c:	3301      	adds	r3, #1
 800281e:	3201      	adds	r2, #1
 8002820:	9245      	str	r2, [sp, #276]	@ 0x114
 8002822:	6862      	ldr	r2, [r4, #4]
 8002824:	6023      	str	r3, [r4, #0]
 8002826:	3a01      	subs	r2, #1
 8002828:	6062      	str	r2, [r4, #4]
 800282a:	e7ec      	b.n	8002806 <__svfiscanf_r+0x52>
 800282c:	4621      	mov	r1, r4
 800282e:	4630      	mov	r0, r6
 8002830:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002832:	4798      	blx	r3
 8002834:	2800      	cmp	r0, #0
 8002836:	d0e9      	beq.n	800280c <__svfiscanf_r+0x58>
 8002838:	e7ed      	b.n	8002816 <__svfiscanf_r+0x62>
 800283a:	2b25      	cmp	r3, #37	@ 0x25
 800283c:	d012      	beq.n	8002864 <__svfiscanf_r+0xb0>
 800283e:	4699      	mov	r9, r3
 8002840:	6863      	ldr	r3, [r4, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f340 8095 	ble.w	8002972 <__svfiscanf_r+0x1be>
 8002848:	6822      	ldr	r2, [r4, #0]
 800284a:	7813      	ldrb	r3, [r2, #0]
 800284c:	454b      	cmp	r3, r9
 800284e:	f040 8140 	bne.w	8002ad2 <__svfiscanf_r+0x31e>
 8002852:	6863      	ldr	r3, [r4, #4]
 8002854:	3201      	adds	r2, #1
 8002856:	3b01      	subs	r3, #1
 8002858:	6063      	str	r3, [r4, #4]
 800285a:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800285c:	6022      	str	r2, [r4, #0]
 800285e:	3301      	adds	r3, #1
 8002860:	9345      	str	r3, [sp, #276]	@ 0x114
 8002862:	e7d8      	b.n	8002816 <__svfiscanf_r+0x62>
 8002864:	9141      	str	r1, [sp, #260]	@ 0x104
 8002866:	9143      	str	r1, [sp, #268]	@ 0x10c
 8002868:	f899 3001 	ldrb.w	r3, [r9, #1]
 800286c:	220a      	movs	r2, #10
 800286e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002870:	bf02      	ittt	eq
 8002872:	2310      	moveq	r3, #16
 8002874:	f109 0502 	addeq.w	r5, r9, #2
 8002878:	9341      	streq	r3, [sp, #260]	@ 0x104
 800287a:	46a9      	mov	r9, r5
 800287c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8002880:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8002884:	2b09      	cmp	r3, #9
 8002886:	d91f      	bls.n	80028c8 <__svfiscanf_r+0x114>
 8002888:	f8df a1fc 	ldr.w	sl, [pc, #508]	@ 8002a88 <__svfiscanf_r+0x2d4>
 800288c:	2203      	movs	r2, #3
 800288e:	4650      	mov	r0, sl
 8002890:	f000 fd6e 	bl	8003370 <memchr>
 8002894:	b138      	cbz	r0, 80028a6 <__svfiscanf_r+0xf2>
 8002896:	2301      	movs	r3, #1
 8002898:	464d      	mov	r5, r9
 800289a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800289c:	eba0 000a 	sub.w	r0, r0, sl
 80028a0:	4083      	lsls	r3, r0
 80028a2:	4313      	orrs	r3, r2
 80028a4:	9341      	str	r3, [sp, #260]	@ 0x104
 80028a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80028aa:	2b78      	cmp	r3, #120	@ 0x78
 80028ac:	d807      	bhi.n	80028be <__svfiscanf_r+0x10a>
 80028ae:	2b57      	cmp	r3, #87	@ 0x57
 80028b0:	d811      	bhi.n	80028d6 <__svfiscanf_r+0x122>
 80028b2:	2b25      	cmp	r3, #37	@ 0x25
 80028b4:	d0c3      	beq.n	800283e <__svfiscanf_r+0x8a>
 80028b6:	d857      	bhi.n	8002968 <__svfiscanf_r+0x1b4>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80c1 	beq.w	8002a40 <__svfiscanf_r+0x28c>
 80028be:	2303      	movs	r3, #3
 80028c0:	9347      	str	r3, [sp, #284]	@ 0x11c
 80028c2:	230a      	movs	r3, #10
 80028c4:	9342      	str	r3, [sp, #264]	@ 0x108
 80028c6:	e07e      	b.n	80029c6 <__svfiscanf_r+0x212>
 80028c8:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80028ca:	464d      	mov	r5, r9
 80028cc:	fb02 1103 	mla	r1, r2, r3, r1
 80028d0:	3930      	subs	r1, #48	@ 0x30
 80028d2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80028d4:	e7d1      	b.n	800287a <__svfiscanf_r+0xc6>
 80028d6:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80028da:	2a20      	cmp	r2, #32
 80028dc:	d8ef      	bhi.n	80028be <__svfiscanf_r+0x10a>
 80028de:	a101      	add	r1, pc, #4	@ (adr r1, 80028e4 <__svfiscanf_r+0x130>)
 80028e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80028e4:	080029a5 	.word	0x080029a5
 80028e8:	080028bf 	.word	0x080028bf
 80028ec:	080028bf 	.word	0x080028bf
 80028f0:	080029ff 	.word	0x080029ff
 80028f4:	080028bf 	.word	0x080028bf
 80028f8:	080028bf 	.word	0x080028bf
 80028fc:	080028bf 	.word	0x080028bf
 8002900:	080028bf 	.word	0x080028bf
 8002904:	080028bf 	.word	0x080028bf
 8002908:	080028bf 	.word	0x080028bf
 800290c:	080028bf 	.word	0x080028bf
 8002910:	08002a15 	.word	0x08002a15
 8002914:	080029fb 	.word	0x080029fb
 8002918:	0800296f 	.word	0x0800296f
 800291c:	0800296f 	.word	0x0800296f
 8002920:	0800296f 	.word	0x0800296f
 8002924:	080028bf 	.word	0x080028bf
 8002928:	080029b7 	.word	0x080029b7
 800292c:	080028bf 	.word	0x080028bf
 8002930:	080028bf 	.word	0x080028bf
 8002934:	080028bf 	.word	0x080028bf
 8002938:	080028bf 	.word	0x080028bf
 800293c:	08002a25 	.word	0x08002a25
 8002940:	080029bf 	.word	0x080029bf
 8002944:	0800299d 	.word	0x0800299d
 8002948:	080028bf 	.word	0x080028bf
 800294c:	080028bf 	.word	0x080028bf
 8002950:	08002a21 	.word	0x08002a21
 8002954:	080028bf 	.word	0x080028bf
 8002958:	080029fb 	.word	0x080029fb
 800295c:	080028bf 	.word	0x080028bf
 8002960:	080028bf 	.word	0x080028bf
 8002964:	080029a5 	.word	0x080029a5
 8002968:	3b45      	subs	r3, #69	@ 0x45
 800296a:	2b02      	cmp	r3, #2
 800296c:	d8a7      	bhi.n	80028be <__svfiscanf_r+0x10a>
 800296e:	2305      	movs	r3, #5
 8002970:	e028      	b.n	80029c4 <__svfiscanf_r+0x210>
 8002972:	4621      	mov	r1, r4
 8002974:	4630      	mov	r0, r6
 8002976:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002978:	4798      	blx	r3
 800297a:	2800      	cmp	r0, #0
 800297c:	f43f af64 	beq.w	8002848 <__svfiscanf_r+0x94>
 8002980:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002982:	07da      	lsls	r2, r3, #31
 8002984:	f140 809d 	bpl.w	8002ac2 <__svfiscanf_r+0x30e>
 8002988:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800298a:	2800      	cmp	r0, #0
 800298c:	d061      	beq.n	8002a52 <__svfiscanf_r+0x29e>
 800298e:	89a3      	ldrh	r3, [r4, #12]
 8002990:	0659      	lsls	r1, r3, #25
 8002992:	d45e      	bmi.n	8002a52 <__svfiscanf_r+0x29e>
 8002994:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8002998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800299c:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800299e:	f042 0220 	orr.w	r2, r2, #32
 80029a2:	9241      	str	r2, [sp, #260]	@ 0x104
 80029a4:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80029a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029aa:	9241      	str	r2, [sp, #260]	@ 0x104
 80029ac:	2210      	movs	r2, #16
 80029ae:	2b6e      	cmp	r3, #110	@ 0x6e
 80029b0:	9242      	str	r2, [sp, #264]	@ 0x108
 80029b2:	d902      	bls.n	80029ba <__svfiscanf_r+0x206>
 80029b4:	e005      	b.n	80029c2 <__svfiscanf_r+0x20e>
 80029b6:	2300      	movs	r3, #0
 80029b8:	9342      	str	r3, [sp, #264]	@ 0x108
 80029ba:	2303      	movs	r3, #3
 80029bc:	e002      	b.n	80029c4 <__svfiscanf_r+0x210>
 80029be:	2308      	movs	r3, #8
 80029c0:	9342      	str	r3, [sp, #264]	@ 0x108
 80029c2:	2304      	movs	r3, #4
 80029c4:	9347      	str	r3, [sp, #284]	@ 0x11c
 80029c6:	6863      	ldr	r3, [r4, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	dd45      	ble.n	8002a58 <__svfiscanf_r+0x2a4>
 80029cc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80029ce:	0659      	lsls	r1, r3, #25
 80029d0:	d404      	bmi.n	80029dc <__svfiscanf_r+0x228>
 80029d2:	6823      	ldr	r3, [r4, #0]
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	5cba      	ldrb	r2, [r7, r2]
 80029d8:	0712      	lsls	r2, r2, #28
 80029da:	d444      	bmi.n	8002a66 <__svfiscanf_r+0x2b2>
 80029dc:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80029de:	2b02      	cmp	r3, #2
 80029e0:	dc5b      	bgt.n	8002a9a <__svfiscanf_r+0x2e6>
 80029e2:	466b      	mov	r3, sp
 80029e4:	4622      	mov	r2, r4
 80029e6:	4630      	mov	r0, r6
 80029e8:	a941      	add	r1, sp, #260	@ 0x104
 80029ea:	f000 f893 	bl	8002b14 <_scanf_chars>
 80029ee:	2801      	cmp	r0, #1
 80029f0:	d06f      	beq.n	8002ad2 <__svfiscanf_r+0x31e>
 80029f2:	2802      	cmp	r0, #2
 80029f4:	f47f af0f 	bne.w	8002816 <__svfiscanf_r+0x62>
 80029f8:	e7c2      	b.n	8002980 <__svfiscanf_r+0x1cc>
 80029fa:	220a      	movs	r2, #10
 80029fc:	e7d7      	b.n	80029ae <__svfiscanf_r+0x1fa>
 80029fe:	4629      	mov	r1, r5
 8002a00:	4640      	mov	r0, r8
 8002a02:	f000 fb93 	bl	800312c <__sccl>
 8002a06:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8002a08:	4605      	mov	r5, r0
 8002a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a0e:	9341      	str	r3, [sp, #260]	@ 0x104
 8002a10:	2301      	movs	r3, #1
 8002a12:	e7d7      	b.n	80029c4 <__svfiscanf_r+0x210>
 8002a14:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8002a16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a1a:	9341      	str	r3, [sp, #260]	@ 0x104
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	e7d1      	b.n	80029c4 <__svfiscanf_r+0x210>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e7cf      	b.n	80029c4 <__svfiscanf_r+0x210>
 8002a24:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8002a26:	06c3      	lsls	r3, r0, #27
 8002a28:	f53f aef5 	bmi.w	8002816 <__svfiscanf_r+0x62>
 8002a2c:	9b00      	ldr	r3, [sp, #0]
 8002a2e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002a30:	1d19      	adds	r1, r3, #4
 8002a32:	9100      	str	r1, [sp, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	07c0      	lsls	r0, r0, #31
 8002a38:	bf4c      	ite	mi
 8002a3a:	801a      	strhmi	r2, [r3, #0]
 8002a3c:	601a      	strpl	r2, [r3, #0]
 8002a3e:	e6ea      	b.n	8002816 <__svfiscanf_r+0x62>
 8002a40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002a42:	07de      	lsls	r6, r3, #31
 8002a44:	d405      	bmi.n	8002a52 <__svfiscanf_r+0x29e>
 8002a46:	89a3      	ldrh	r3, [r4, #12]
 8002a48:	059d      	lsls	r5, r3, #22
 8002a4a:	d402      	bmi.n	8002a52 <__svfiscanf_r+0x29e>
 8002a4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a4e:	f7ff fae7 	bl	8002020 <__retarget_lock_release_recursive>
 8002a52:	f04f 30ff 	mov.w	r0, #4294967295
 8002a56:	e79d      	b.n	8002994 <__svfiscanf_r+0x1e0>
 8002a58:	4621      	mov	r1, r4
 8002a5a:	4630      	mov	r0, r6
 8002a5c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002a5e:	4798      	blx	r3
 8002a60:	2800      	cmp	r0, #0
 8002a62:	d0b3      	beq.n	80029cc <__svfiscanf_r+0x218>
 8002a64:	e78c      	b.n	8002980 <__svfiscanf_r+0x1cc>
 8002a66:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8002a68:	3201      	adds	r2, #1
 8002a6a:	9245      	str	r2, [sp, #276]	@ 0x114
 8002a6c:	6862      	ldr	r2, [r4, #4]
 8002a6e:	3a01      	subs	r2, #1
 8002a70:	2a00      	cmp	r2, #0
 8002a72:	6062      	str	r2, [r4, #4]
 8002a74:	dd0a      	ble.n	8002a8c <__svfiscanf_r+0x2d8>
 8002a76:	3301      	adds	r3, #1
 8002a78:	6023      	str	r3, [r4, #0]
 8002a7a:	e7aa      	b.n	80029d2 <__svfiscanf_r+0x21e>
 8002a7c:	0800320f 	.word	0x0800320f
 8002a80:	08003045 	.word	0x08003045
 8002a84:	080036db 	.word	0x080036db
 8002a88:	08003692 	.word	0x08003692
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	4630      	mov	r0, r6
 8002a90:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8002a92:	4798      	blx	r3
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d09c      	beq.n	80029d2 <__svfiscanf_r+0x21e>
 8002a98:	e772      	b.n	8002980 <__svfiscanf_r+0x1cc>
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	dc06      	bgt.n	8002aac <__svfiscanf_r+0x2f8>
 8002a9e:	466b      	mov	r3, sp
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	a941      	add	r1, sp, #260	@ 0x104
 8002aa6:	f000 f88f 	bl	8002bc8 <_scanf_i>
 8002aaa:	e7a0      	b.n	80029ee <__svfiscanf_r+0x23a>
 8002aac:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <__svfiscanf_r+0x334>)
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f43f aeb1 	beq.w	8002816 <__svfiscanf_r+0x62>
 8002ab4:	466b      	mov	r3, sp
 8002ab6:	4622      	mov	r2, r4
 8002ab8:	4630      	mov	r0, r6
 8002aba:	a941      	add	r1, sp, #260	@ 0x104
 8002abc:	f3af 8000 	nop.w
 8002ac0:	e795      	b.n	80029ee <__svfiscanf_r+0x23a>
 8002ac2:	89a3      	ldrh	r3, [r4, #12]
 8002ac4:	0598      	lsls	r0, r3, #22
 8002ac6:	f53f af5f 	bmi.w	8002988 <__svfiscanf_r+0x1d4>
 8002aca:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002acc:	f7ff faa8 	bl	8002020 <__retarget_lock_release_recursive>
 8002ad0:	e75a      	b.n	8002988 <__svfiscanf_r+0x1d4>
 8002ad2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ad4:	07da      	lsls	r2, r3, #31
 8002ad6:	d405      	bmi.n	8002ae4 <__svfiscanf_r+0x330>
 8002ad8:	89a3      	ldrh	r3, [r4, #12]
 8002ada:	059b      	lsls	r3, r3, #22
 8002adc:	d402      	bmi.n	8002ae4 <__svfiscanf_r+0x330>
 8002ade:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ae0:	f7ff fa9e 	bl	8002020 <__retarget_lock_release_recursive>
 8002ae4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8002ae6:	e755      	b.n	8002994 <__svfiscanf_r+0x1e0>
 8002ae8:	00000000 	.word	0x00000000

08002aec <_vfiscanf_r>:
 8002aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002af0:	460d      	mov	r5, r1
 8002af2:	4616      	mov	r6, r2
 8002af4:	461f      	mov	r7, r3
 8002af6:	4604      	mov	r4, r0
 8002af8:	b118      	cbz	r0, 8002b02 <_vfiscanf_r+0x16>
 8002afa:	6a03      	ldr	r3, [r0, #32]
 8002afc:	b90b      	cbnz	r3, 8002b02 <_vfiscanf_r+0x16>
 8002afe:	f7ff f87d 	bl	8001bfc <__sinit>
 8002b02:	463b      	mov	r3, r7
 8002b04:	4632      	mov	r2, r6
 8002b06:	4629      	mov	r1, r5
 8002b08:	4620      	mov	r0, r4
 8002b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b0e:	f7ff be51 	b.w	80027b4 <__svfiscanf_r>
	...

08002b14 <_scanf_chars>:
 8002b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b18:	4615      	mov	r5, r2
 8002b1a:	688a      	ldr	r2, [r1, #8]
 8002b1c:	4680      	mov	r8, r0
 8002b1e:	460c      	mov	r4, r1
 8002b20:	b932      	cbnz	r2, 8002b30 <_scanf_chars+0x1c>
 8002b22:	698a      	ldr	r2, [r1, #24]
 8002b24:	2a00      	cmp	r2, #0
 8002b26:	bf14      	ite	ne
 8002b28:	f04f 32ff 	movne.w	r2, #4294967295
 8002b2c:	2201      	moveq	r2, #1
 8002b2e:	608a      	str	r2, [r1, #8]
 8002b30:	2700      	movs	r7, #0
 8002b32:	6822      	ldr	r2, [r4, #0]
 8002b34:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8002bc4 <_scanf_chars+0xb0>
 8002b38:	06d1      	lsls	r1, r2, #27
 8002b3a:	bf5f      	itttt	pl
 8002b3c:	681a      	ldrpl	r2, [r3, #0]
 8002b3e:	1d11      	addpl	r1, r2, #4
 8002b40:	6019      	strpl	r1, [r3, #0]
 8002b42:	6816      	ldrpl	r6, [r2, #0]
 8002b44:	69a0      	ldr	r0, [r4, #24]
 8002b46:	b188      	cbz	r0, 8002b6c <_scanf_chars+0x58>
 8002b48:	2801      	cmp	r0, #1
 8002b4a:	d107      	bne.n	8002b5c <_scanf_chars+0x48>
 8002b4c:	682b      	ldr	r3, [r5, #0]
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	6963      	ldr	r3, [r4, #20]
 8002b52:	5c9b      	ldrb	r3, [r3, r2]
 8002b54:	b953      	cbnz	r3, 8002b6c <_scanf_chars+0x58>
 8002b56:	2f00      	cmp	r7, #0
 8002b58:	d031      	beq.n	8002bbe <_scanf_chars+0xaa>
 8002b5a:	e022      	b.n	8002ba2 <_scanf_chars+0x8e>
 8002b5c:	2802      	cmp	r0, #2
 8002b5e:	d120      	bne.n	8002ba2 <_scanf_chars+0x8e>
 8002b60:	682b      	ldr	r3, [r5, #0]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	f819 3003 	ldrb.w	r3, [r9, r3]
 8002b68:	071b      	lsls	r3, r3, #28
 8002b6a:	d41a      	bmi.n	8002ba2 <_scanf_chars+0x8e>
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	3701      	adds	r7, #1
 8002b70:	06da      	lsls	r2, r3, #27
 8002b72:	bf5e      	ittt	pl
 8002b74:	682b      	ldrpl	r3, [r5, #0]
 8002b76:	781b      	ldrbpl	r3, [r3, #0]
 8002b78:	f806 3b01 	strbpl.w	r3, [r6], #1
 8002b7c:	682a      	ldr	r2, [r5, #0]
 8002b7e:	686b      	ldr	r3, [r5, #4]
 8002b80:	3201      	adds	r2, #1
 8002b82:	602a      	str	r2, [r5, #0]
 8002b84:	68a2      	ldr	r2, [r4, #8]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	606b      	str	r3, [r5, #4]
 8002b8c:	60a2      	str	r2, [r4, #8]
 8002b8e:	b142      	cbz	r2, 8002ba2 <_scanf_chars+0x8e>
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	dcd7      	bgt.n	8002b44 <_scanf_chars+0x30>
 8002b94:	4629      	mov	r1, r5
 8002b96:	4640      	mov	r0, r8
 8002b98:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002b9c:	4798      	blx	r3
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d0d0      	beq.n	8002b44 <_scanf_chars+0x30>
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	f013 0310 	ands.w	r3, r3, #16
 8002ba8:	d105      	bne.n	8002bb6 <_scanf_chars+0xa2>
 8002baa:	68e2      	ldr	r2, [r4, #12]
 8002bac:	3201      	adds	r2, #1
 8002bae:	60e2      	str	r2, [r4, #12]
 8002bb0:	69a2      	ldr	r2, [r4, #24]
 8002bb2:	b102      	cbz	r2, 8002bb6 <_scanf_chars+0xa2>
 8002bb4:	7033      	strb	r3, [r6, #0]
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	6923      	ldr	r3, [r4, #16]
 8002bba:	443b      	add	r3, r7
 8002bbc:	6123      	str	r3, [r4, #16]
 8002bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bc2:	bf00      	nop
 8002bc4:	080036db 	.word	0x080036db

08002bc8 <_scanf_i>:
 8002bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bcc:	460c      	mov	r4, r1
 8002bce:	4698      	mov	r8, r3
 8002bd0:	4b72      	ldr	r3, [pc, #456]	@ (8002d9c <_scanf_i+0x1d4>)
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	4682      	mov	sl, r0
 8002bd6:	4616      	mov	r6, r2
 8002bd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bdc:	ab03      	add	r3, sp, #12
 8002bde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002be2:	4b6f      	ldr	r3, [pc, #444]	@ (8002da0 <_scanf_i+0x1d8>)
 8002be4:	69a1      	ldr	r1, [r4, #24]
 8002be6:	4a6f      	ldr	r2, [pc, #444]	@ (8002da4 <_scanf_i+0x1dc>)
 8002be8:	4627      	mov	r7, r4
 8002bea:	2903      	cmp	r1, #3
 8002bec:	bf08      	it	eq
 8002bee:	461a      	moveq	r2, r3
 8002bf0:	68a3      	ldr	r3, [r4, #8]
 8002bf2:	9201      	str	r2, [sp, #4]
 8002bf4:	1e5a      	subs	r2, r3, #1
 8002bf6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8002bfa:	bf81      	itttt	hi
 8002bfc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8002c00:	eb03 0905 	addhi.w	r9, r3, r5
 8002c04:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8002c08:	60a3      	strhi	r3, [r4, #8]
 8002c0a:	f857 3b1c 	ldr.w	r3, [r7], #28
 8002c0e:	bf98      	it	ls
 8002c10:	f04f 0900 	movls.w	r9, #0
 8002c14:	463d      	mov	r5, r7
 8002c16:	f04f 0b00 	mov.w	fp, #0
 8002c1a:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8002c1e:	6023      	str	r3, [r4, #0]
 8002c20:	6831      	ldr	r1, [r6, #0]
 8002c22:	ab03      	add	r3, sp, #12
 8002c24:	2202      	movs	r2, #2
 8002c26:	7809      	ldrb	r1, [r1, #0]
 8002c28:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8002c2c:	f000 fba0 	bl	8003370 <memchr>
 8002c30:	b328      	cbz	r0, 8002c7e <_scanf_i+0xb6>
 8002c32:	f1bb 0f01 	cmp.w	fp, #1
 8002c36:	d159      	bne.n	8002cec <_scanf_i+0x124>
 8002c38:	6862      	ldr	r2, [r4, #4]
 8002c3a:	b92a      	cbnz	r2, 8002c48 <_scanf_i+0x80>
 8002c3c:	2108      	movs	r1, #8
 8002c3e:	6822      	ldr	r2, [r4, #0]
 8002c40:	6061      	str	r1, [r4, #4]
 8002c42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c46:	6022      	str	r2, [r4, #0]
 8002c48:	6822      	ldr	r2, [r4, #0]
 8002c4a:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8002c4e:	6022      	str	r2, [r4, #0]
 8002c50:	68a2      	ldr	r2, [r4, #8]
 8002c52:	1e51      	subs	r1, r2, #1
 8002c54:	60a1      	str	r1, [r4, #8]
 8002c56:	b192      	cbz	r2, 8002c7e <_scanf_i+0xb6>
 8002c58:	6832      	ldr	r2, [r6, #0]
 8002c5a:	1c51      	adds	r1, r2, #1
 8002c5c:	6031      	str	r1, [r6, #0]
 8002c5e:	7812      	ldrb	r2, [r2, #0]
 8002c60:	f805 2b01 	strb.w	r2, [r5], #1
 8002c64:	6872      	ldr	r2, [r6, #4]
 8002c66:	3a01      	subs	r2, #1
 8002c68:	2a00      	cmp	r2, #0
 8002c6a:	6072      	str	r2, [r6, #4]
 8002c6c:	dc07      	bgt.n	8002c7e <_scanf_i+0xb6>
 8002c6e:	4631      	mov	r1, r6
 8002c70:	4650      	mov	r0, sl
 8002c72:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8002c76:	4790      	blx	r2
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	f040 8085 	bne.w	8002d88 <_scanf_i+0x1c0>
 8002c7e:	f10b 0b01 	add.w	fp, fp, #1
 8002c82:	f1bb 0f03 	cmp.w	fp, #3
 8002c86:	d1cb      	bne.n	8002c20 <_scanf_i+0x58>
 8002c88:	6863      	ldr	r3, [r4, #4]
 8002c8a:	b90b      	cbnz	r3, 8002c90 <_scanf_i+0xc8>
 8002c8c:	230a      	movs	r3, #10
 8002c8e:	6063      	str	r3, [r4, #4]
 8002c90:	6863      	ldr	r3, [r4, #4]
 8002c92:	4945      	ldr	r1, [pc, #276]	@ (8002da8 <_scanf_i+0x1e0>)
 8002c94:	6960      	ldr	r0, [r4, #20]
 8002c96:	1ac9      	subs	r1, r1, r3
 8002c98:	f000 fa48 	bl	800312c <__sccl>
 8002c9c:	f04f 0b00 	mov.w	fp, #0
 8002ca0:	68a3      	ldr	r3, [r4, #8]
 8002ca2:	6822      	ldr	r2, [r4, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d03d      	beq.n	8002d24 <_scanf_i+0x15c>
 8002ca8:	6831      	ldr	r1, [r6, #0]
 8002caa:	6960      	ldr	r0, [r4, #20]
 8002cac:	f891 c000 	ldrb.w	ip, [r1]
 8002cb0:	f810 000c 	ldrb.w	r0, [r0, ip]
 8002cb4:	2800      	cmp	r0, #0
 8002cb6:	d035      	beq.n	8002d24 <_scanf_i+0x15c>
 8002cb8:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8002cbc:	d124      	bne.n	8002d08 <_scanf_i+0x140>
 8002cbe:	0510      	lsls	r0, r2, #20
 8002cc0:	d522      	bpl.n	8002d08 <_scanf_i+0x140>
 8002cc2:	f10b 0b01 	add.w	fp, fp, #1
 8002cc6:	f1b9 0f00 	cmp.w	r9, #0
 8002cca:	d003      	beq.n	8002cd4 <_scanf_i+0x10c>
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f109 39ff 	add.w	r9, r9, #4294967295
 8002cd2:	60a3      	str	r3, [r4, #8]
 8002cd4:	6873      	ldr	r3, [r6, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	6073      	str	r3, [r6, #4]
 8002cdc:	dd1b      	ble.n	8002d16 <_scanf_i+0x14e>
 8002cde:	6833      	ldr	r3, [r6, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	6033      	str	r3, [r6, #0]
 8002ce4:	68a3      	ldr	r3, [r4, #8]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	60a3      	str	r3, [r4, #8]
 8002cea:	e7d9      	b.n	8002ca0 <_scanf_i+0xd8>
 8002cec:	f1bb 0f02 	cmp.w	fp, #2
 8002cf0:	d1ae      	bne.n	8002c50 <_scanf_i+0x88>
 8002cf2:	6822      	ldr	r2, [r4, #0]
 8002cf4:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8002cf8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002cfc:	d1bf      	bne.n	8002c7e <_scanf_i+0xb6>
 8002cfe:	2110      	movs	r1, #16
 8002d00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d04:	6061      	str	r1, [r4, #4]
 8002d06:	e7a2      	b.n	8002c4e <_scanf_i+0x86>
 8002d08:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8002d0c:	6022      	str	r2, [r4, #0]
 8002d0e:	780b      	ldrb	r3, [r1, #0]
 8002d10:	f805 3b01 	strb.w	r3, [r5], #1
 8002d14:	e7de      	b.n	8002cd4 <_scanf_i+0x10c>
 8002d16:	4631      	mov	r1, r6
 8002d18:	4650      	mov	r0, sl
 8002d1a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8002d1e:	4798      	blx	r3
 8002d20:	2800      	cmp	r0, #0
 8002d22:	d0df      	beq.n	8002ce4 <_scanf_i+0x11c>
 8002d24:	6823      	ldr	r3, [r4, #0]
 8002d26:	05d9      	lsls	r1, r3, #23
 8002d28:	d50d      	bpl.n	8002d46 <_scanf_i+0x17e>
 8002d2a:	42bd      	cmp	r5, r7
 8002d2c:	d909      	bls.n	8002d42 <_scanf_i+0x17a>
 8002d2e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8002d32:	4632      	mov	r2, r6
 8002d34:	4650      	mov	r0, sl
 8002d36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8002d3a:	f105 39ff 	add.w	r9, r5, #4294967295
 8002d3e:	4798      	blx	r3
 8002d40:	464d      	mov	r5, r9
 8002d42:	42bd      	cmp	r5, r7
 8002d44:	d028      	beq.n	8002d98 <_scanf_i+0x1d0>
 8002d46:	6822      	ldr	r2, [r4, #0]
 8002d48:	f012 0210 	ands.w	r2, r2, #16
 8002d4c:	d113      	bne.n	8002d76 <_scanf_i+0x1ae>
 8002d4e:	702a      	strb	r2, [r5, #0]
 8002d50:	4639      	mov	r1, r7
 8002d52:	6863      	ldr	r3, [r4, #4]
 8002d54:	4650      	mov	r0, sl
 8002d56:	9e01      	ldr	r6, [sp, #4]
 8002d58:	47b0      	blx	r6
 8002d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8002d5e:	6821      	ldr	r1, [r4, #0]
 8002d60:	1d1a      	adds	r2, r3, #4
 8002d62:	f8c8 2000 	str.w	r2, [r8]
 8002d66:	f011 0f20 	tst.w	r1, #32
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	d00f      	beq.n	8002d8e <_scanf_i+0x1c6>
 8002d6e:	6018      	str	r0, [r3, #0]
 8002d70:	68e3      	ldr	r3, [r4, #12]
 8002d72:	3301      	adds	r3, #1
 8002d74:	60e3      	str	r3, [r4, #12]
 8002d76:	2000      	movs	r0, #0
 8002d78:	6923      	ldr	r3, [r4, #16]
 8002d7a:	1bed      	subs	r5, r5, r7
 8002d7c:	445d      	add	r5, fp
 8002d7e:	442b      	add	r3, r5
 8002d80:	6123      	str	r3, [r4, #16]
 8002d82:	b007      	add	sp, #28
 8002d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d88:	f04f 0b00 	mov.w	fp, #0
 8002d8c:	e7ca      	b.n	8002d24 <_scanf_i+0x15c>
 8002d8e:	07ca      	lsls	r2, r1, #31
 8002d90:	bf4c      	ite	mi
 8002d92:	8018      	strhmi	r0, [r3, #0]
 8002d94:	6018      	strpl	r0, [r3, #0]
 8002d96:	e7eb      	b.n	8002d70 <_scanf_i+0x1a8>
 8002d98:	2001      	movs	r0, #1
 8002d9a:	e7f2      	b.n	8002d82 <_scanf_i+0x1ba>
 8002d9c:	0800363c 	.word	0x0800363c
 8002da0:	080034f9 	.word	0x080034f9
 8002da4:	080035d9 	.word	0x080035d9
 8002da8:	080036cf 	.word	0x080036cf

08002dac <__sflush_r>:
 8002dac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	0716      	lsls	r6, r2, #28
 8002db4:	4605      	mov	r5, r0
 8002db6:	460c      	mov	r4, r1
 8002db8:	d454      	bmi.n	8002e64 <__sflush_r+0xb8>
 8002dba:	684b      	ldr	r3, [r1, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	dc02      	bgt.n	8002dc6 <__sflush_r+0x1a>
 8002dc0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	dd48      	ble.n	8002e58 <__sflush_r+0xac>
 8002dc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002dc8:	2e00      	cmp	r6, #0
 8002dca:	d045      	beq.n	8002e58 <__sflush_r+0xac>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002dd2:	682f      	ldr	r7, [r5, #0]
 8002dd4:	6a21      	ldr	r1, [r4, #32]
 8002dd6:	602b      	str	r3, [r5, #0]
 8002dd8:	d030      	beq.n	8002e3c <__sflush_r+0x90>
 8002dda:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002ddc:	89a3      	ldrh	r3, [r4, #12]
 8002dde:	0759      	lsls	r1, r3, #29
 8002de0:	d505      	bpl.n	8002dee <__sflush_r+0x42>
 8002de2:	6863      	ldr	r3, [r4, #4]
 8002de4:	1ad2      	subs	r2, r2, r3
 8002de6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002de8:	b10b      	cbz	r3, 8002dee <__sflush_r+0x42>
 8002dea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002dec:	1ad2      	subs	r2, r2, r3
 8002dee:	2300      	movs	r3, #0
 8002df0:	4628      	mov	r0, r5
 8002df2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002df4:	6a21      	ldr	r1, [r4, #32]
 8002df6:	47b0      	blx	r6
 8002df8:	1c43      	adds	r3, r0, #1
 8002dfa:	89a3      	ldrh	r3, [r4, #12]
 8002dfc:	d106      	bne.n	8002e0c <__sflush_r+0x60>
 8002dfe:	6829      	ldr	r1, [r5, #0]
 8002e00:	291d      	cmp	r1, #29
 8002e02:	d82b      	bhi.n	8002e5c <__sflush_r+0xb0>
 8002e04:	4a28      	ldr	r2, [pc, #160]	@ (8002ea8 <__sflush_r+0xfc>)
 8002e06:	410a      	asrs	r2, r1
 8002e08:	07d6      	lsls	r6, r2, #31
 8002e0a:	d427      	bmi.n	8002e5c <__sflush_r+0xb0>
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	6062      	str	r2, [r4, #4]
 8002e10:	6922      	ldr	r2, [r4, #16]
 8002e12:	04d9      	lsls	r1, r3, #19
 8002e14:	6022      	str	r2, [r4, #0]
 8002e16:	d504      	bpl.n	8002e22 <__sflush_r+0x76>
 8002e18:	1c42      	adds	r2, r0, #1
 8002e1a:	d101      	bne.n	8002e20 <__sflush_r+0x74>
 8002e1c:	682b      	ldr	r3, [r5, #0]
 8002e1e:	b903      	cbnz	r3, 8002e22 <__sflush_r+0x76>
 8002e20:	6560      	str	r0, [r4, #84]	@ 0x54
 8002e22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e24:	602f      	str	r7, [r5, #0]
 8002e26:	b1b9      	cbz	r1, 8002e58 <__sflush_r+0xac>
 8002e28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e2c:	4299      	cmp	r1, r3
 8002e2e:	d002      	beq.n	8002e36 <__sflush_r+0x8a>
 8002e30:	4628      	mov	r0, r5
 8002e32:	f7ff f8f7 	bl	8002024 <_free_r>
 8002e36:	2300      	movs	r3, #0
 8002e38:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e3a:	e00d      	b.n	8002e58 <__sflush_r+0xac>
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	4628      	mov	r0, r5
 8002e40:	47b0      	blx	r6
 8002e42:	4602      	mov	r2, r0
 8002e44:	1c50      	adds	r0, r2, #1
 8002e46:	d1c9      	bne.n	8002ddc <__sflush_r+0x30>
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0c6      	beq.n	8002ddc <__sflush_r+0x30>
 8002e4e:	2b1d      	cmp	r3, #29
 8002e50:	d001      	beq.n	8002e56 <__sflush_r+0xaa>
 8002e52:	2b16      	cmp	r3, #22
 8002e54:	d11d      	bne.n	8002e92 <__sflush_r+0xe6>
 8002e56:	602f      	str	r7, [r5, #0]
 8002e58:	2000      	movs	r0, #0
 8002e5a:	e021      	b.n	8002ea0 <__sflush_r+0xf4>
 8002e5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e60:	b21b      	sxth	r3, r3
 8002e62:	e01a      	b.n	8002e9a <__sflush_r+0xee>
 8002e64:	690f      	ldr	r7, [r1, #16]
 8002e66:	2f00      	cmp	r7, #0
 8002e68:	d0f6      	beq.n	8002e58 <__sflush_r+0xac>
 8002e6a:	0793      	lsls	r3, r2, #30
 8002e6c:	bf18      	it	ne
 8002e6e:	2300      	movne	r3, #0
 8002e70:	680e      	ldr	r6, [r1, #0]
 8002e72:	bf08      	it	eq
 8002e74:	694b      	ldreq	r3, [r1, #20]
 8002e76:	1bf6      	subs	r6, r6, r7
 8002e78:	600f      	str	r7, [r1, #0]
 8002e7a:	608b      	str	r3, [r1, #8]
 8002e7c:	2e00      	cmp	r6, #0
 8002e7e:	ddeb      	ble.n	8002e58 <__sflush_r+0xac>
 8002e80:	4633      	mov	r3, r6
 8002e82:	463a      	mov	r2, r7
 8002e84:	4628      	mov	r0, r5
 8002e86:	6a21      	ldr	r1, [r4, #32]
 8002e88:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002e8c:	47e0      	blx	ip
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	dc07      	bgt.n	8002ea2 <__sflush_r+0xf6>
 8002e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9e:	81a3      	strh	r3, [r4, #12]
 8002ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ea2:	4407      	add	r7, r0
 8002ea4:	1a36      	subs	r6, r6, r0
 8002ea6:	e7e9      	b.n	8002e7c <__sflush_r+0xd0>
 8002ea8:	dfbffffe 	.word	0xdfbffffe

08002eac <_fflush_r>:
 8002eac:	b538      	push	{r3, r4, r5, lr}
 8002eae:	690b      	ldr	r3, [r1, #16]
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	460c      	mov	r4, r1
 8002eb4:	b913      	cbnz	r3, 8002ebc <_fflush_r+0x10>
 8002eb6:	2500      	movs	r5, #0
 8002eb8:	4628      	mov	r0, r5
 8002eba:	bd38      	pop	{r3, r4, r5, pc}
 8002ebc:	b118      	cbz	r0, 8002ec6 <_fflush_r+0x1a>
 8002ebe:	6a03      	ldr	r3, [r0, #32]
 8002ec0:	b90b      	cbnz	r3, 8002ec6 <_fflush_r+0x1a>
 8002ec2:	f7fe fe9b 	bl	8001bfc <__sinit>
 8002ec6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f3      	beq.n	8002eb6 <_fflush_r+0xa>
 8002ece:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002ed0:	07d0      	lsls	r0, r2, #31
 8002ed2:	d404      	bmi.n	8002ede <_fflush_r+0x32>
 8002ed4:	0599      	lsls	r1, r3, #22
 8002ed6:	d402      	bmi.n	8002ede <_fflush_r+0x32>
 8002ed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002eda:	f7ff f8a0 	bl	800201e <__retarget_lock_acquire_recursive>
 8002ede:	4628      	mov	r0, r5
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	f7ff ff63 	bl	8002dac <__sflush_r>
 8002ee6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ee8:	4605      	mov	r5, r0
 8002eea:	07da      	lsls	r2, r3, #31
 8002eec:	d4e4      	bmi.n	8002eb8 <_fflush_r+0xc>
 8002eee:	89a3      	ldrh	r3, [r4, #12]
 8002ef0:	059b      	lsls	r3, r3, #22
 8002ef2:	d4e1      	bmi.n	8002eb8 <_fflush_r+0xc>
 8002ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ef6:	f7ff f893 	bl	8002020 <__retarget_lock_release_recursive>
 8002efa:	e7dd      	b.n	8002eb8 <_fflush_r+0xc>

08002efc <__swhatbuf_r>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	460c      	mov	r4, r1
 8002f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f04:	4615      	mov	r5, r2
 8002f06:	2900      	cmp	r1, #0
 8002f08:	461e      	mov	r6, r3
 8002f0a:	b096      	sub	sp, #88	@ 0x58
 8002f0c:	da0c      	bge.n	8002f28 <__swhatbuf_r+0x2c>
 8002f0e:	89a3      	ldrh	r3, [r4, #12]
 8002f10:	2100      	movs	r1, #0
 8002f12:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002f16:	bf14      	ite	ne
 8002f18:	2340      	movne	r3, #64	@ 0x40
 8002f1a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002f1e:	2000      	movs	r0, #0
 8002f20:	6031      	str	r1, [r6, #0]
 8002f22:	602b      	str	r3, [r5, #0]
 8002f24:	b016      	add	sp, #88	@ 0x58
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
 8002f28:	466a      	mov	r2, sp
 8002f2a:	f000 f9ef 	bl	800330c <_fstat_r>
 8002f2e:	2800      	cmp	r0, #0
 8002f30:	dbed      	blt.n	8002f0e <__swhatbuf_r+0x12>
 8002f32:	9901      	ldr	r1, [sp, #4]
 8002f34:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002f38:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002f3c:	4259      	negs	r1, r3
 8002f3e:	4159      	adcs	r1, r3
 8002f40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f44:	e7eb      	b.n	8002f1e <__swhatbuf_r+0x22>

08002f46 <__smakebuf_r>:
 8002f46:	898b      	ldrh	r3, [r1, #12]
 8002f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f4a:	079d      	lsls	r5, r3, #30
 8002f4c:	4606      	mov	r6, r0
 8002f4e:	460c      	mov	r4, r1
 8002f50:	d507      	bpl.n	8002f62 <__smakebuf_r+0x1c>
 8002f52:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002f56:	6023      	str	r3, [r4, #0]
 8002f58:	6123      	str	r3, [r4, #16]
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	6163      	str	r3, [r4, #20]
 8002f5e:	b003      	add	sp, #12
 8002f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f62:	466a      	mov	r2, sp
 8002f64:	ab01      	add	r3, sp, #4
 8002f66:	f7ff ffc9 	bl	8002efc <__swhatbuf_r>
 8002f6a:	9f00      	ldr	r7, [sp, #0]
 8002f6c:	4605      	mov	r5, r0
 8002f6e:	4639      	mov	r1, r7
 8002f70:	4630      	mov	r0, r6
 8002f72:	f7ff f8c1 	bl	80020f8 <_malloc_r>
 8002f76:	b948      	cbnz	r0, 8002f8c <__smakebuf_r+0x46>
 8002f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f7c:	059a      	lsls	r2, r3, #22
 8002f7e:	d4ee      	bmi.n	8002f5e <__smakebuf_r+0x18>
 8002f80:	f023 0303 	bic.w	r3, r3, #3
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	81a3      	strh	r3, [r4, #12]
 8002f8a:	e7e2      	b.n	8002f52 <__smakebuf_r+0xc>
 8002f8c:	89a3      	ldrh	r3, [r4, #12]
 8002f8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f96:	81a3      	strh	r3, [r4, #12]
 8002f98:	9b01      	ldr	r3, [sp, #4]
 8002f9a:	6020      	str	r0, [r4, #0]
 8002f9c:	b15b      	cbz	r3, 8002fb6 <__smakebuf_r+0x70>
 8002f9e:	4630      	mov	r0, r6
 8002fa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002fa4:	f000 f9c4 	bl	8003330 <_isatty_r>
 8002fa8:	b128      	cbz	r0, 8002fb6 <__smakebuf_r+0x70>
 8002faa:	89a3      	ldrh	r3, [r4, #12]
 8002fac:	f023 0303 	bic.w	r3, r3, #3
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	81a3      	strh	r3, [r4, #12]
 8002fb6:	89a3      	ldrh	r3, [r4, #12]
 8002fb8:	431d      	orrs	r5, r3
 8002fba:	81a5      	strh	r5, [r4, #12]
 8002fbc:	e7cf      	b.n	8002f5e <__smakebuf_r+0x18>

08002fbe <_putc_r>:
 8002fbe:	b570      	push	{r4, r5, r6, lr}
 8002fc0:	460d      	mov	r5, r1
 8002fc2:	4614      	mov	r4, r2
 8002fc4:	4606      	mov	r6, r0
 8002fc6:	b118      	cbz	r0, 8002fd0 <_putc_r+0x12>
 8002fc8:	6a03      	ldr	r3, [r0, #32]
 8002fca:	b90b      	cbnz	r3, 8002fd0 <_putc_r+0x12>
 8002fcc:	f7fe fe16 	bl	8001bfc <__sinit>
 8002fd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002fd2:	07d8      	lsls	r0, r3, #31
 8002fd4:	d405      	bmi.n	8002fe2 <_putc_r+0x24>
 8002fd6:	89a3      	ldrh	r3, [r4, #12]
 8002fd8:	0599      	lsls	r1, r3, #22
 8002fda:	d402      	bmi.n	8002fe2 <_putc_r+0x24>
 8002fdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fde:	f7ff f81e 	bl	800201e <__retarget_lock_acquire_recursive>
 8002fe2:	68a3      	ldr	r3, [r4, #8]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	60a3      	str	r3, [r4, #8]
 8002fea:	da05      	bge.n	8002ff8 <_putc_r+0x3a>
 8002fec:	69a2      	ldr	r2, [r4, #24]
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	db12      	blt.n	8003018 <_putc_r+0x5a>
 8002ff2:	b2eb      	uxtb	r3, r5
 8002ff4:	2b0a      	cmp	r3, #10
 8002ff6:	d00f      	beq.n	8003018 <_putc_r+0x5a>
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	6022      	str	r2, [r4, #0]
 8002ffe:	701d      	strb	r5, [r3, #0]
 8003000:	b2ed      	uxtb	r5, r5
 8003002:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003004:	07da      	lsls	r2, r3, #31
 8003006:	d405      	bmi.n	8003014 <_putc_r+0x56>
 8003008:	89a3      	ldrh	r3, [r4, #12]
 800300a:	059b      	lsls	r3, r3, #22
 800300c:	d402      	bmi.n	8003014 <_putc_r+0x56>
 800300e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003010:	f7ff f806 	bl	8002020 <__retarget_lock_release_recursive>
 8003014:	4628      	mov	r0, r5
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	4629      	mov	r1, r5
 800301a:	4622      	mov	r2, r4
 800301c:	4630      	mov	r0, r6
 800301e:	f7fe fef0 	bl	8001e02 <__swbuf_r>
 8003022:	4605      	mov	r5, r0
 8003024:	e7ed      	b.n	8003002 <_putc_r+0x44>
	...

08003028 <lflush>:
 8003028:	898b      	ldrh	r3, [r1, #12]
 800302a:	f003 0309 	and.w	r3, r3, #9
 800302e:	2b09      	cmp	r3, #9
 8003030:	d103      	bne.n	800303a <lflush+0x12>
 8003032:	4b03      	ldr	r3, [pc, #12]	@ (8003040 <lflush+0x18>)
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	f7ff bf39 	b.w	8002eac <_fflush_r>
 800303a:	2000      	movs	r0, #0
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000020 	.word	0x20000020

08003044 <__srefill_r>:
 8003044:	b570      	push	{r4, r5, r6, lr}
 8003046:	460c      	mov	r4, r1
 8003048:	4605      	mov	r5, r0
 800304a:	b118      	cbz	r0, 8003054 <__srefill_r+0x10>
 800304c:	6a03      	ldr	r3, [r0, #32]
 800304e:	b90b      	cbnz	r3, 8003054 <__srefill_r+0x10>
 8003050:	f7fe fdd4 	bl	8001bfc <__sinit>
 8003054:	2300      	movs	r3, #0
 8003056:	6063      	str	r3, [r4, #4]
 8003058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800305c:	069e      	lsls	r6, r3, #26
 800305e:	d408      	bmi.n	8003072 <__srefill_r+0x2e>
 8003060:	0758      	lsls	r0, r3, #29
 8003062:	d445      	bmi.n	80030f0 <__srefill_r+0xac>
 8003064:	06d9      	lsls	r1, r3, #27
 8003066:	d407      	bmi.n	8003078 <__srefill_r+0x34>
 8003068:	2209      	movs	r2, #9
 800306a:	602a      	str	r2, [r5, #0]
 800306c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003070:	81a3      	strh	r3, [r4, #12]
 8003072:	f04f 30ff 	mov.w	r0, #4294967295
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	071a      	lsls	r2, r3, #28
 800307a:	d50b      	bpl.n	8003094 <__srefill_r+0x50>
 800307c:	4621      	mov	r1, r4
 800307e:	4628      	mov	r0, r5
 8003080:	f7ff ff14 	bl	8002eac <_fflush_r>
 8003084:	2800      	cmp	r0, #0
 8003086:	d1f4      	bne.n	8003072 <__srefill_r+0x2e>
 8003088:	89a3      	ldrh	r3, [r4, #12]
 800308a:	60a0      	str	r0, [r4, #8]
 800308c:	f023 0308 	bic.w	r3, r3, #8
 8003090:	81a3      	strh	r3, [r4, #12]
 8003092:	61a0      	str	r0, [r4, #24]
 8003094:	89a3      	ldrh	r3, [r4, #12]
 8003096:	f043 0304 	orr.w	r3, r3, #4
 800309a:	81a3      	strh	r3, [r4, #12]
 800309c:	6923      	ldr	r3, [r4, #16]
 800309e:	b91b      	cbnz	r3, 80030a8 <__srefill_r+0x64>
 80030a0:	4621      	mov	r1, r4
 80030a2:	4628      	mov	r0, r5
 80030a4:	f7ff ff4f 	bl	8002f46 <__smakebuf_r>
 80030a8:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80030ac:	07b3      	lsls	r3, r6, #30
 80030ae:	d00f      	beq.n	80030d0 <__srefill_r+0x8c>
 80030b0:	2301      	movs	r3, #1
 80030b2:	4a1b      	ldr	r2, [pc, #108]	@ (8003120 <__srefill_r+0xdc>)
 80030b4:	491b      	ldr	r1, [pc, #108]	@ (8003124 <__srefill_r+0xe0>)
 80030b6:	481c      	ldr	r0, [pc, #112]	@ (8003128 <__srefill_r+0xe4>)
 80030b8:	81a3      	strh	r3, [r4, #12]
 80030ba:	f7fe fdb7 	bl	8001c2c <_fwalk_sglue>
 80030be:	81a6      	strh	r6, [r4, #12]
 80030c0:	f006 0609 	and.w	r6, r6, #9
 80030c4:	2e09      	cmp	r6, #9
 80030c6:	d103      	bne.n	80030d0 <__srefill_r+0x8c>
 80030c8:	4621      	mov	r1, r4
 80030ca:	4628      	mov	r0, r5
 80030cc:	f7ff fe6e 	bl	8002dac <__sflush_r>
 80030d0:	6922      	ldr	r2, [r4, #16]
 80030d2:	4628      	mov	r0, r5
 80030d4:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80030d6:	6963      	ldr	r3, [r4, #20]
 80030d8:	6a21      	ldr	r1, [r4, #32]
 80030da:	6022      	str	r2, [r4, #0]
 80030dc:	47b0      	blx	r6
 80030de:	2800      	cmp	r0, #0
 80030e0:	6060      	str	r0, [r4, #4]
 80030e2:	dc17      	bgt.n	8003114 <__srefill_r+0xd0>
 80030e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030e8:	d116      	bne.n	8003118 <__srefill_r+0xd4>
 80030ea:	f043 0320 	orr.w	r3, r3, #32
 80030ee:	e7bf      	b.n	8003070 <__srefill_r+0x2c>
 80030f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80030f2:	2900      	cmp	r1, #0
 80030f4:	d0d2      	beq.n	800309c <__srefill_r+0x58>
 80030f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80030fa:	4299      	cmp	r1, r3
 80030fc:	d002      	beq.n	8003104 <__srefill_r+0xc0>
 80030fe:	4628      	mov	r0, r5
 8003100:	f7fe ff90 	bl	8002024 <_free_r>
 8003104:	2300      	movs	r3, #0
 8003106:	6363      	str	r3, [r4, #52]	@ 0x34
 8003108:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800310a:	6063      	str	r3, [r4, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d0c5      	beq.n	800309c <__srefill_r+0x58>
 8003110:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003112:	6023      	str	r3, [r4, #0]
 8003114:	2000      	movs	r0, #0
 8003116:	e7ae      	b.n	8003076 <__srefill_r+0x32>
 8003118:	2200      	movs	r2, #0
 800311a:	6062      	str	r2, [r4, #4]
 800311c:	e7a6      	b.n	800306c <__srefill_r+0x28>
 800311e:	bf00      	nop
 8003120:	20000014 	.word	0x20000014
 8003124:	08003029 	.word	0x08003029
 8003128:	20000024 	.word	0x20000024

0800312c <__sccl>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	780b      	ldrb	r3, [r1, #0]
 8003130:	4604      	mov	r4, r0
 8003132:	2b5e      	cmp	r3, #94	@ 0x5e
 8003134:	bf0b      	itete	eq
 8003136:	784b      	ldrbeq	r3, [r1, #1]
 8003138:	1c4a      	addne	r2, r1, #1
 800313a:	1c8a      	addeq	r2, r1, #2
 800313c:	2100      	movne	r1, #0
 800313e:	bf08      	it	eq
 8003140:	2101      	moveq	r1, #1
 8003142:	3801      	subs	r0, #1
 8003144:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8003148:	f800 1f01 	strb.w	r1, [r0, #1]!
 800314c:	42a8      	cmp	r0, r5
 800314e:	d1fb      	bne.n	8003148 <__sccl+0x1c>
 8003150:	b90b      	cbnz	r3, 8003156 <__sccl+0x2a>
 8003152:	1e50      	subs	r0, r2, #1
 8003154:	bd70      	pop	{r4, r5, r6, pc}
 8003156:	f081 0101 	eor.w	r1, r1, #1
 800315a:	4610      	mov	r0, r2
 800315c:	54e1      	strb	r1, [r4, r3]
 800315e:	4602      	mov	r2, r0
 8003160:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003164:	2d2d      	cmp	r5, #45	@ 0x2d
 8003166:	d005      	beq.n	8003174 <__sccl+0x48>
 8003168:	2d5d      	cmp	r5, #93	@ 0x5d
 800316a:	d016      	beq.n	800319a <__sccl+0x6e>
 800316c:	2d00      	cmp	r5, #0
 800316e:	d0f1      	beq.n	8003154 <__sccl+0x28>
 8003170:	462b      	mov	r3, r5
 8003172:	e7f2      	b.n	800315a <__sccl+0x2e>
 8003174:	7846      	ldrb	r6, [r0, #1]
 8003176:	2e5d      	cmp	r6, #93	@ 0x5d
 8003178:	d0fa      	beq.n	8003170 <__sccl+0x44>
 800317a:	42b3      	cmp	r3, r6
 800317c:	dcf8      	bgt.n	8003170 <__sccl+0x44>
 800317e:	461a      	mov	r2, r3
 8003180:	3002      	adds	r0, #2
 8003182:	3201      	adds	r2, #1
 8003184:	4296      	cmp	r6, r2
 8003186:	54a1      	strb	r1, [r4, r2]
 8003188:	dcfb      	bgt.n	8003182 <__sccl+0x56>
 800318a:	1af2      	subs	r2, r6, r3
 800318c:	3a01      	subs	r2, #1
 800318e:	42b3      	cmp	r3, r6
 8003190:	bfa8      	it	ge
 8003192:	2200      	movge	r2, #0
 8003194:	1c5d      	adds	r5, r3, #1
 8003196:	18ab      	adds	r3, r5, r2
 8003198:	e7e1      	b.n	800315e <__sccl+0x32>
 800319a:	4610      	mov	r0, r2
 800319c:	e7da      	b.n	8003154 <__sccl+0x28>

0800319e <__submore>:
 800319e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031a2:	460c      	mov	r4, r1
 80031a4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80031a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80031aa:	4299      	cmp	r1, r3
 80031ac:	d11b      	bne.n	80031e6 <__submore+0x48>
 80031ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80031b2:	f7fe ffa1 	bl	80020f8 <_malloc_r>
 80031b6:	b918      	cbnz	r0, 80031c0 <__submore+0x22>
 80031b8:	f04f 30ff 	mov.w	r0, #4294967295
 80031bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031c4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80031c6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80031ca:	6360      	str	r0, [r4, #52]	@ 0x34
 80031cc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80031d0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80031d4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80031d8:	7043      	strb	r3, [r0, #1]
 80031da:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80031de:	7003      	strb	r3, [r0, #0]
 80031e0:	6020      	str	r0, [r4, #0]
 80031e2:	2000      	movs	r0, #0
 80031e4:	e7ea      	b.n	80031bc <__submore+0x1e>
 80031e6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80031e8:	0077      	lsls	r7, r6, #1
 80031ea:	463a      	mov	r2, r7
 80031ec:	f000 f8dc 	bl	80033a8 <_realloc_r>
 80031f0:	4605      	mov	r5, r0
 80031f2:	2800      	cmp	r0, #0
 80031f4:	d0e0      	beq.n	80031b8 <__submore+0x1a>
 80031f6:	eb00 0806 	add.w	r8, r0, r6
 80031fa:	4601      	mov	r1, r0
 80031fc:	4632      	mov	r2, r6
 80031fe:	4640      	mov	r0, r8
 8003200:	f000 f8c4 	bl	800338c <memcpy>
 8003204:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8003208:	f8c4 8000 	str.w	r8, [r4]
 800320c:	e7e9      	b.n	80031e2 <__submore+0x44>

0800320e <_ungetc_r>:
 800320e:	b570      	push	{r4, r5, r6, lr}
 8003210:	460d      	mov	r5, r1
 8003212:	1c69      	adds	r1, r5, #1
 8003214:	4606      	mov	r6, r0
 8003216:	4614      	mov	r4, r2
 8003218:	d01e      	beq.n	8003258 <_ungetc_r+0x4a>
 800321a:	b118      	cbz	r0, 8003224 <_ungetc_r+0x16>
 800321c:	6a03      	ldr	r3, [r0, #32]
 800321e:	b90b      	cbnz	r3, 8003224 <_ungetc_r+0x16>
 8003220:	f7fe fcec 	bl	8001bfc <__sinit>
 8003224:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003226:	07da      	lsls	r2, r3, #31
 8003228:	d405      	bmi.n	8003236 <_ungetc_r+0x28>
 800322a:	89a3      	ldrh	r3, [r4, #12]
 800322c:	059b      	lsls	r3, r3, #22
 800322e:	d402      	bmi.n	8003236 <_ungetc_r+0x28>
 8003230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003232:	f7fe fef4 	bl	800201e <__retarget_lock_acquire_recursive>
 8003236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800323a:	f023 0220 	bic.w	r2, r3, #32
 800323e:	0758      	lsls	r0, r3, #29
 8003240:	81a2      	strh	r2, [r4, #12]
 8003242:	d422      	bmi.n	800328a <_ungetc_r+0x7c>
 8003244:	06d9      	lsls	r1, r3, #27
 8003246:	d40a      	bmi.n	800325e <_ungetc_r+0x50>
 8003248:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800324a:	07d2      	lsls	r2, r2, #31
 800324c:	d404      	bmi.n	8003258 <_ungetc_r+0x4a>
 800324e:	0599      	lsls	r1, r3, #22
 8003250:	d402      	bmi.n	8003258 <_ungetc_r+0x4a>
 8003252:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003254:	f7fe fee4 	bl	8002020 <__retarget_lock_release_recursive>
 8003258:	f04f 35ff 	mov.w	r5, #4294967295
 800325c:	e046      	b.n	80032ec <_ungetc_r+0xde>
 800325e:	071b      	lsls	r3, r3, #28
 8003260:	d50f      	bpl.n	8003282 <_ungetc_r+0x74>
 8003262:	4621      	mov	r1, r4
 8003264:	4630      	mov	r0, r6
 8003266:	f7ff fe21 	bl	8002eac <_fflush_r>
 800326a:	b120      	cbz	r0, 8003276 <_ungetc_r+0x68>
 800326c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800326e:	07d8      	lsls	r0, r3, #31
 8003270:	d4f2      	bmi.n	8003258 <_ungetc_r+0x4a>
 8003272:	89a3      	ldrh	r3, [r4, #12]
 8003274:	e7eb      	b.n	800324e <_ungetc_r+0x40>
 8003276:	89a3      	ldrh	r3, [r4, #12]
 8003278:	60a0      	str	r0, [r4, #8]
 800327a:	f023 0308 	bic.w	r3, r3, #8
 800327e:	81a3      	strh	r3, [r4, #12]
 8003280:	61a0      	str	r0, [r4, #24]
 8003282:	89a3      	ldrh	r3, [r4, #12]
 8003284:	f043 0304 	orr.w	r3, r3, #4
 8003288:	81a3      	strh	r3, [r4, #12]
 800328a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800328c:	6862      	ldr	r2, [r4, #4]
 800328e:	b2ed      	uxtb	r5, r5
 8003290:	b1d3      	cbz	r3, 80032c8 <_ungetc_r+0xba>
 8003292:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003294:	4293      	cmp	r3, r2
 8003296:	dc05      	bgt.n	80032a4 <_ungetc_r+0x96>
 8003298:	4621      	mov	r1, r4
 800329a:	4630      	mov	r0, r6
 800329c:	f7ff ff7f 	bl	800319e <__submore>
 80032a0:	2800      	cmp	r0, #0
 80032a2:	d1e3      	bne.n	800326c <_ungetc_r+0x5e>
 80032a4:	6823      	ldr	r3, [r4, #0]
 80032a6:	1e5a      	subs	r2, r3, #1
 80032a8:	6022      	str	r2, [r4, #0]
 80032aa:	f803 5c01 	strb.w	r5, [r3, #-1]
 80032ae:	6863      	ldr	r3, [r4, #4]
 80032b0:	3301      	adds	r3, #1
 80032b2:	6063      	str	r3, [r4, #4]
 80032b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032b6:	07da      	lsls	r2, r3, #31
 80032b8:	d418      	bmi.n	80032ec <_ungetc_r+0xde>
 80032ba:	89a3      	ldrh	r3, [r4, #12]
 80032bc:	059b      	lsls	r3, r3, #22
 80032be:	d415      	bmi.n	80032ec <_ungetc_r+0xde>
 80032c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032c2:	f7fe fead 	bl	8002020 <__retarget_lock_release_recursive>
 80032c6:	e011      	b.n	80032ec <_ungetc_r+0xde>
 80032c8:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80032ca:	6920      	ldr	r0, [r4, #16]
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	f001 0101 	and.w	r1, r1, #1
 80032d2:	b168      	cbz	r0, 80032f0 <_ungetc_r+0xe2>
 80032d4:	4298      	cmp	r0, r3
 80032d6:	d20b      	bcs.n	80032f0 <_ungetc_r+0xe2>
 80032d8:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80032dc:	42a8      	cmp	r0, r5
 80032de:	d107      	bne.n	80032f0 <_ungetc_r+0xe2>
 80032e0:	3b01      	subs	r3, #1
 80032e2:	3201      	adds	r2, #1
 80032e4:	6023      	str	r3, [r4, #0]
 80032e6:	6062      	str	r2, [r4, #4]
 80032e8:	2900      	cmp	r1, #0
 80032ea:	d0e6      	beq.n	80032ba <_ungetc_r+0xac>
 80032ec:	4628      	mov	r0, r5
 80032ee:	bd70      	pop	{r4, r5, r6, pc}
 80032f0:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80032f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80032f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80032fa:	2303      	movs	r3, #3
 80032fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80032fe:	4623      	mov	r3, r4
 8003300:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003304:	6023      	str	r3, [r4, #0]
 8003306:	2301      	movs	r3, #1
 8003308:	6063      	str	r3, [r4, #4]
 800330a:	e7ed      	b.n	80032e8 <_ungetc_r+0xda>

0800330c <_fstat_r>:
 800330c:	b538      	push	{r3, r4, r5, lr}
 800330e:	2300      	movs	r3, #0
 8003310:	4d06      	ldr	r5, [pc, #24]	@ (800332c <_fstat_r+0x20>)
 8003312:	4604      	mov	r4, r0
 8003314:	4608      	mov	r0, r1
 8003316:	4611      	mov	r1, r2
 8003318:	602b      	str	r3, [r5, #0]
 800331a:	f7fe fa62 	bl	80017e2 <_fstat>
 800331e:	1c43      	adds	r3, r0, #1
 8003320:	d102      	bne.n	8003328 <_fstat_r+0x1c>
 8003322:	682b      	ldr	r3, [r5, #0]
 8003324:	b103      	cbz	r3, 8003328 <_fstat_r+0x1c>
 8003326:	6023      	str	r3, [r4, #0]
 8003328:	bd38      	pop	{r3, r4, r5, pc}
 800332a:	bf00      	nop
 800332c:	200002c4 	.word	0x200002c4

08003330 <_isatty_r>:
 8003330:	b538      	push	{r3, r4, r5, lr}
 8003332:	2300      	movs	r3, #0
 8003334:	4d05      	ldr	r5, [pc, #20]	@ (800334c <_isatty_r+0x1c>)
 8003336:	4604      	mov	r4, r0
 8003338:	4608      	mov	r0, r1
 800333a:	602b      	str	r3, [r5, #0]
 800333c:	f7fe fbb4 	bl	8001aa8 <_isatty>
 8003340:	1c43      	adds	r3, r0, #1
 8003342:	d102      	bne.n	800334a <_isatty_r+0x1a>
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	b103      	cbz	r3, 800334a <_isatty_r+0x1a>
 8003348:	6023      	str	r3, [r4, #0]
 800334a:	bd38      	pop	{r3, r4, r5, pc}
 800334c:	200002c4 	.word	0x200002c4

08003350 <_sbrk_r>:
 8003350:	b538      	push	{r3, r4, r5, lr}
 8003352:	2300      	movs	r3, #0
 8003354:	4d05      	ldr	r5, [pc, #20]	@ (800336c <_sbrk_r+0x1c>)
 8003356:	4604      	mov	r4, r0
 8003358:	4608      	mov	r0, r1
 800335a:	602b      	str	r3, [r5, #0]
 800335c:	f7fd f8ae 	bl	80004bc <_sbrk>
 8003360:	1c43      	adds	r3, r0, #1
 8003362:	d102      	bne.n	800336a <_sbrk_r+0x1a>
 8003364:	682b      	ldr	r3, [r5, #0]
 8003366:	b103      	cbz	r3, 800336a <_sbrk_r+0x1a>
 8003368:	6023      	str	r3, [r4, #0]
 800336a:	bd38      	pop	{r3, r4, r5, pc}
 800336c:	200002c4 	.word	0x200002c4

08003370 <memchr>:
 8003370:	4603      	mov	r3, r0
 8003372:	b510      	push	{r4, lr}
 8003374:	b2c9      	uxtb	r1, r1
 8003376:	4402      	add	r2, r0
 8003378:	4293      	cmp	r3, r2
 800337a:	4618      	mov	r0, r3
 800337c:	d101      	bne.n	8003382 <memchr+0x12>
 800337e:	2000      	movs	r0, #0
 8003380:	e003      	b.n	800338a <memchr+0x1a>
 8003382:	7804      	ldrb	r4, [r0, #0]
 8003384:	3301      	adds	r3, #1
 8003386:	428c      	cmp	r4, r1
 8003388:	d1f6      	bne.n	8003378 <memchr+0x8>
 800338a:	bd10      	pop	{r4, pc}

0800338c <memcpy>:
 800338c:	440a      	add	r2, r1
 800338e:	4291      	cmp	r1, r2
 8003390:	f100 33ff 	add.w	r3, r0, #4294967295
 8003394:	d100      	bne.n	8003398 <memcpy+0xc>
 8003396:	4770      	bx	lr
 8003398:	b510      	push	{r4, lr}
 800339a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800339e:	4291      	cmp	r1, r2
 80033a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033a4:	d1f9      	bne.n	800339a <memcpy+0xe>
 80033a6:	bd10      	pop	{r4, pc}

080033a8 <_realloc_r>:
 80033a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ac:	4680      	mov	r8, r0
 80033ae:	4615      	mov	r5, r2
 80033b0:	460c      	mov	r4, r1
 80033b2:	b921      	cbnz	r1, 80033be <_realloc_r+0x16>
 80033b4:	4611      	mov	r1, r2
 80033b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033ba:	f7fe be9d 	b.w	80020f8 <_malloc_r>
 80033be:	b92a      	cbnz	r2, 80033cc <_realloc_r+0x24>
 80033c0:	f7fe fe30 	bl	8002024 <_free_r>
 80033c4:	2400      	movs	r4, #0
 80033c6:	4620      	mov	r0, r4
 80033c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033cc:	f000 f906 	bl	80035dc <_malloc_usable_size_r>
 80033d0:	4285      	cmp	r5, r0
 80033d2:	4606      	mov	r6, r0
 80033d4:	d802      	bhi.n	80033dc <_realloc_r+0x34>
 80033d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80033da:	d8f4      	bhi.n	80033c6 <_realloc_r+0x1e>
 80033dc:	4629      	mov	r1, r5
 80033de:	4640      	mov	r0, r8
 80033e0:	f7fe fe8a 	bl	80020f8 <_malloc_r>
 80033e4:	4607      	mov	r7, r0
 80033e6:	2800      	cmp	r0, #0
 80033e8:	d0ec      	beq.n	80033c4 <_realloc_r+0x1c>
 80033ea:	42b5      	cmp	r5, r6
 80033ec:	462a      	mov	r2, r5
 80033ee:	4621      	mov	r1, r4
 80033f0:	bf28      	it	cs
 80033f2:	4632      	movcs	r2, r6
 80033f4:	f7ff ffca 	bl	800338c <memcpy>
 80033f8:	4621      	mov	r1, r4
 80033fa:	4640      	mov	r0, r8
 80033fc:	f7fe fe12 	bl	8002024 <_free_r>
 8003400:	463c      	mov	r4, r7
 8003402:	e7e0      	b.n	80033c6 <_realloc_r+0x1e>

08003404 <_strtol_l.constprop.0>:
 8003404:	2b24      	cmp	r3, #36	@ 0x24
 8003406:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800340a:	4686      	mov	lr, r0
 800340c:	4690      	mov	r8, r2
 800340e:	d801      	bhi.n	8003414 <_strtol_l.constprop.0+0x10>
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <_strtol_l.constprop.0+0x1e>
 8003414:	f7fe fdd8 	bl	8001fc8 <__errno>
 8003418:	2316      	movs	r3, #22
 800341a:	6003      	str	r3, [r0, #0]
 800341c:	2000      	movs	r0, #0
 800341e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003422:	460d      	mov	r5, r1
 8003424:	4833      	ldr	r0, [pc, #204]	@ (80034f4 <_strtol_l.constprop.0+0xf0>)
 8003426:	462a      	mov	r2, r5
 8003428:	f815 4b01 	ldrb.w	r4, [r5], #1
 800342c:	5d06      	ldrb	r6, [r0, r4]
 800342e:	f016 0608 	ands.w	r6, r6, #8
 8003432:	d1f8      	bne.n	8003426 <_strtol_l.constprop.0+0x22>
 8003434:	2c2d      	cmp	r4, #45	@ 0x2d
 8003436:	d12d      	bne.n	8003494 <_strtol_l.constprop.0+0x90>
 8003438:	2601      	movs	r6, #1
 800343a:	782c      	ldrb	r4, [r5, #0]
 800343c:	1c95      	adds	r5, r2, #2
 800343e:	f033 0210 	bics.w	r2, r3, #16
 8003442:	d109      	bne.n	8003458 <_strtol_l.constprop.0+0x54>
 8003444:	2c30      	cmp	r4, #48	@ 0x30
 8003446:	d12a      	bne.n	800349e <_strtol_l.constprop.0+0x9a>
 8003448:	782a      	ldrb	r2, [r5, #0]
 800344a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800344e:	2a58      	cmp	r2, #88	@ 0x58
 8003450:	d125      	bne.n	800349e <_strtol_l.constprop.0+0x9a>
 8003452:	2310      	movs	r3, #16
 8003454:	786c      	ldrb	r4, [r5, #1]
 8003456:	3502      	adds	r5, #2
 8003458:	2200      	movs	r2, #0
 800345a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800345e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003462:	fbbc f9f3 	udiv	r9, ip, r3
 8003466:	4610      	mov	r0, r2
 8003468:	fb03 ca19 	mls	sl, r3, r9, ip
 800346c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003470:	2f09      	cmp	r7, #9
 8003472:	d81b      	bhi.n	80034ac <_strtol_l.constprop.0+0xa8>
 8003474:	463c      	mov	r4, r7
 8003476:	42a3      	cmp	r3, r4
 8003478:	dd27      	ble.n	80034ca <_strtol_l.constprop.0+0xc6>
 800347a:	1c57      	adds	r7, r2, #1
 800347c:	d007      	beq.n	800348e <_strtol_l.constprop.0+0x8a>
 800347e:	4581      	cmp	r9, r0
 8003480:	d320      	bcc.n	80034c4 <_strtol_l.constprop.0+0xc0>
 8003482:	d101      	bne.n	8003488 <_strtol_l.constprop.0+0x84>
 8003484:	45a2      	cmp	sl, r4
 8003486:	db1d      	blt.n	80034c4 <_strtol_l.constprop.0+0xc0>
 8003488:	2201      	movs	r2, #1
 800348a:	fb00 4003 	mla	r0, r0, r3, r4
 800348e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003492:	e7eb      	b.n	800346c <_strtol_l.constprop.0+0x68>
 8003494:	2c2b      	cmp	r4, #43	@ 0x2b
 8003496:	bf04      	itt	eq
 8003498:	782c      	ldrbeq	r4, [r5, #0]
 800349a:	1c95      	addeq	r5, r2, #2
 800349c:	e7cf      	b.n	800343e <_strtol_l.constprop.0+0x3a>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1da      	bne.n	8003458 <_strtol_l.constprop.0+0x54>
 80034a2:	2c30      	cmp	r4, #48	@ 0x30
 80034a4:	bf0c      	ite	eq
 80034a6:	2308      	moveq	r3, #8
 80034a8:	230a      	movne	r3, #10
 80034aa:	e7d5      	b.n	8003458 <_strtol_l.constprop.0+0x54>
 80034ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80034b0:	2f19      	cmp	r7, #25
 80034b2:	d801      	bhi.n	80034b8 <_strtol_l.constprop.0+0xb4>
 80034b4:	3c37      	subs	r4, #55	@ 0x37
 80034b6:	e7de      	b.n	8003476 <_strtol_l.constprop.0+0x72>
 80034b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80034bc:	2f19      	cmp	r7, #25
 80034be:	d804      	bhi.n	80034ca <_strtol_l.constprop.0+0xc6>
 80034c0:	3c57      	subs	r4, #87	@ 0x57
 80034c2:	e7d8      	b.n	8003476 <_strtol_l.constprop.0+0x72>
 80034c4:	f04f 32ff 	mov.w	r2, #4294967295
 80034c8:	e7e1      	b.n	800348e <_strtol_l.constprop.0+0x8a>
 80034ca:	1c53      	adds	r3, r2, #1
 80034cc:	d108      	bne.n	80034e0 <_strtol_l.constprop.0+0xdc>
 80034ce:	2322      	movs	r3, #34	@ 0x22
 80034d0:	4660      	mov	r0, ip
 80034d2:	f8ce 3000 	str.w	r3, [lr]
 80034d6:	f1b8 0f00 	cmp.w	r8, #0
 80034da:	d0a0      	beq.n	800341e <_strtol_l.constprop.0+0x1a>
 80034dc:	1e69      	subs	r1, r5, #1
 80034de:	e006      	b.n	80034ee <_strtol_l.constprop.0+0xea>
 80034e0:	b106      	cbz	r6, 80034e4 <_strtol_l.constprop.0+0xe0>
 80034e2:	4240      	negs	r0, r0
 80034e4:	f1b8 0f00 	cmp.w	r8, #0
 80034e8:	d099      	beq.n	800341e <_strtol_l.constprop.0+0x1a>
 80034ea:	2a00      	cmp	r2, #0
 80034ec:	d1f6      	bne.n	80034dc <_strtol_l.constprop.0+0xd8>
 80034ee:	f8c8 1000 	str.w	r1, [r8]
 80034f2:	e794      	b.n	800341e <_strtol_l.constprop.0+0x1a>
 80034f4:	080036db 	.word	0x080036db

080034f8 <_strtol_r>:
 80034f8:	f7ff bf84 	b.w	8003404 <_strtol_l.constprop.0>

080034fc <_strtoul_l.constprop.0>:
 80034fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003500:	4686      	mov	lr, r0
 8003502:	460d      	mov	r5, r1
 8003504:	4e33      	ldr	r6, [pc, #204]	@ (80035d4 <_strtoul_l.constprop.0+0xd8>)
 8003506:	4628      	mov	r0, r5
 8003508:	f815 4b01 	ldrb.w	r4, [r5], #1
 800350c:	5d37      	ldrb	r7, [r6, r4]
 800350e:	f017 0708 	ands.w	r7, r7, #8
 8003512:	d1f8      	bne.n	8003506 <_strtoul_l.constprop.0+0xa>
 8003514:	2c2d      	cmp	r4, #45	@ 0x2d
 8003516:	d12f      	bne.n	8003578 <_strtoul_l.constprop.0+0x7c>
 8003518:	2701      	movs	r7, #1
 800351a:	782c      	ldrb	r4, [r5, #0]
 800351c:	1c85      	adds	r5, r0, #2
 800351e:	f033 0010 	bics.w	r0, r3, #16
 8003522:	d109      	bne.n	8003538 <_strtoul_l.constprop.0+0x3c>
 8003524:	2c30      	cmp	r4, #48	@ 0x30
 8003526:	d12c      	bne.n	8003582 <_strtoul_l.constprop.0+0x86>
 8003528:	7828      	ldrb	r0, [r5, #0]
 800352a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800352e:	2858      	cmp	r0, #88	@ 0x58
 8003530:	d127      	bne.n	8003582 <_strtoul_l.constprop.0+0x86>
 8003532:	2310      	movs	r3, #16
 8003534:	786c      	ldrb	r4, [r5, #1]
 8003536:	3502      	adds	r5, #2
 8003538:	f04f 38ff 	mov.w	r8, #4294967295
 800353c:	fbb8 f8f3 	udiv	r8, r8, r3
 8003540:	2600      	movs	r6, #0
 8003542:	fb03 f908 	mul.w	r9, r3, r8
 8003546:	4630      	mov	r0, r6
 8003548:	ea6f 0909 	mvn.w	r9, r9
 800354c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8003550:	f1bc 0f09 	cmp.w	ip, #9
 8003554:	d81c      	bhi.n	8003590 <_strtoul_l.constprop.0+0x94>
 8003556:	4664      	mov	r4, ip
 8003558:	42a3      	cmp	r3, r4
 800355a:	dd2a      	ble.n	80035b2 <_strtoul_l.constprop.0+0xb6>
 800355c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8003560:	d007      	beq.n	8003572 <_strtoul_l.constprop.0+0x76>
 8003562:	4580      	cmp	r8, r0
 8003564:	d322      	bcc.n	80035ac <_strtoul_l.constprop.0+0xb0>
 8003566:	d101      	bne.n	800356c <_strtoul_l.constprop.0+0x70>
 8003568:	45a1      	cmp	r9, r4
 800356a:	db1f      	blt.n	80035ac <_strtoul_l.constprop.0+0xb0>
 800356c:	2601      	movs	r6, #1
 800356e:	fb00 4003 	mla	r0, r0, r3, r4
 8003572:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003576:	e7e9      	b.n	800354c <_strtoul_l.constprop.0+0x50>
 8003578:	2c2b      	cmp	r4, #43	@ 0x2b
 800357a:	bf04      	itt	eq
 800357c:	782c      	ldrbeq	r4, [r5, #0]
 800357e:	1c85      	addeq	r5, r0, #2
 8003580:	e7cd      	b.n	800351e <_strtoul_l.constprop.0+0x22>
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1d8      	bne.n	8003538 <_strtoul_l.constprop.0+0x3c>
 8003586:	2c30      	cmp	r4, #48	@ 0x30
 8003588:	bf0c      	ite	eq
 800358a:	2308      	moveq	r3, #8
 800358c:	230a      	movne	r3, #10
 800358e:	e7d3      	b.n	8003538 <_strtoul_l.constprop.0+0x3c>
 8003590:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8003594:	f1bc 0f19 	cmp.w	ip, #25
 8003598:	d801      	bhi.n	800359e <_strtoul_l.constprop.0+0xa2>
 800359a:	3c37      	subs	r4, #55	@ 0x37
 800359c:	e7dc      	b.n	8003558 <_strtoul_l.constprop.0+0x5c>
 800359e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80035a2:	f1bc 0f19 	cmp.w	ip, #25
 80035a6:	d804      	bhi.n	80035b2 <_strtoul_l.constprop.0+0xb6>
 80035a8:	3c57      	subs	r4, #87	@ 0x57
 80035aa:	e7d5      	b.n	8003558 <_strtoul_l.constprop.0+0x5c>
 80035ac:	f04f 36ff 	mov.w	r6, #4294967295
 80035b0:	e7df      	b.n	8003572 <_strtoul_l.constprop.0+0x76>
 80035b2:	1c73      	adds	r3, r6, #1
 80035b4:	d106      	bne.n	80035c4 <_strtoul_l.constprop.0+0xc8>
 80035b6:	2322      	movs	r3, #34	@ 0x22
 80035b8:	4630      	mov	r0, r6
 80035ba:	f8ce 3000 	str.w	r3, [lr]
 80035be:	b932      	cbnz	r2, 80035ce <_strtoul_l.constprop.0+0xd2>
 80035c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035c4:	b107      	cbz	r7, 80035c8 <_strtoul_l.constprop.0+0xcc>
 80035c6:	4240      	negs	r0, r0
 80035c8:	2a00      	cmp	r2, #0
 80035ca:	d0f9      	beq.n	80035c0 <_strtoul_l.constprop.0+0xc4>
 80035cc:	b106      	cbz	r6, 80035d0 <_strtoul_l.constprop.0+0xd4>
 80035ce:	1e69      	subs	r1, r5, #1
 80035d0:	6011      	str	r1, [r2, #0]
 80035d2:	e7f5      	b.n	80035c0 <_strtoul_l.constprop.0+0xc4>
 80035d4:	080036db 	.word	0x080036db

080035d8 <_strtoul_r>:
 80035d8:	f7ff bf90 	b.w	80034fc <_strtoul_l.constprop.0>

080035dc <_malloc_usable_size_r>:
 80035dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035e0:	1f18      	subs	r0, r3, #4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	bfbc      	itt	lt
 80035e6:	580b      	ldrlt	r3, [r1, r0]
 80035e8:	18c0      	addlt	r0, r0, r3
 80035ea:	4770      	bx	lr

080035ec <_init>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	bf00      	nop
 80035f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f2:	bc08      	pop	{r3}
 80035f4:	469e      	mov	lr, r3
 80035f6:	4770      	bx	lr

080035f8 <_fini>:
 80035f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fa:	bf00      	nop
 80035fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fe:	bc08      	pop	{r3}
 8003600:	469e      	mov	lr, r3
 8003602:	4770      	bx	lr
